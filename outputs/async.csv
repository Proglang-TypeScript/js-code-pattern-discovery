Found 4125 patterns and 693 unique patterns, 0 files could not be parsed:
{
    "!('A: Identifier')": 177,
    "!(0)": 131,
    "typeof('A: Identifier')": 120,
    "('A: Identifier' < 'B: Identifier')": 108,
    "('A: string' + 'B: Identifier')": 96,
    "('A: Identifier' + 1)": 84,
    "('A: number' === 'B: Identifier')": 79,
    "-(1)": 75,
    "!(1)": 74,
    "('A: Identifier' + 'B: Identifier')": 73,
    "('A: Identifier' + 'B: string')": 62,
    "('A: MemberExpression' === 'B: string')": 57,
    "('A: Identifier' < 'B: MemberExpression')": 55,
    "(null === 'A: Identifier')": 50,
    "('A: string' === 'B: Identifier')": 49,
    "('A: Identifier' < 'B: number')": 49,
    "('A: number' * 'B: Identifier')": 47,
    "!('A: CallExpression')": 41,
    "(false === 'A: Identifier')": 40,
    "('A: Identifier' || 'B: Identifier')": 36,
    "('A: MemberExpression' - 1)": 36,
    "('A: Identifier' + 'B: number')": 36,
    "typeof('A: MemberExpression')": 35,
    "('A: MemberExpression' === 0)": 33,
    "('A: MemberExpression' && 'B: CallExpression')": 32,
    "('A: Identifier' === 'B: Identifier')": 31,
    "(0 === 'A: Identifier')": 30,
    "!('A: MemberExpression')": 30,
    "(('A: string' + 'B: Identifier') + 'C: string')": 30,
    "('A: string' + 'B: CallExpression')": 27,
    "('A: Identifier' && 'B: MemberExpression')": 25,
    "('A: Identifier' - 1)": 25,
    "(typeof('A: Identifier') !== 'function')": 24,
    "('A: MemberExpression' - 'B: MemberExpression')": 24,
    "('A: Identifier' || 'B: CallExpression')": 22,
    "((('A: BinaryExpression' + 'B: string') + 'C: Identifier') + 'D: string')": 21,
    "(typeof('A: Identifier') === 'function')": 20,
    "void(0)": 20,
    "('A: string' + 'B: number')": 20,
    "('A: MemberExpression' === 'B: Identifier')": 19,
    "('A: MemberExpression' === 'B: number')": 19,
    "(typeof('A: Identifier') === 'object')": 18,
    "(typeof('A: MemberExpression') === 'function')": 18,
    "('A: Identifier' <= 0)": 18,
    "(('A: string' + 'B: CallExpression') + 'C: string')": 18,
    "('A: Identifier' ? 'B: CallExpression' : 'C: CallExpression')": 17,
    "(1 === 'A: Identifier')": 17,
    "(null == 'A: Identifier')": 16,
    "void('A: CallExpression')": 16,
    "('A: Identifier' > 'B: number')": 16,
    "('A: string' === 'B: CallExpression')": 16,
    "('A: MemberExpression' < 'B: number')": 15,
    "delete('A: MemberExpression')": 15,
    "+('A: MemberExpression')": 14,
    "('A: CallExpression' ? 'B: Identifier' : 'C: Identifier')": 13,
    "('A: Identifier' !== 'B: Identifier')": 13,
    "(!(1) === 'A: Identifier')": 13,
    "('A: Identifier' <= 'B: Identifier')": 13,
    "('A: UpdateExpression' < 'B: Identifier')": 12,
    "('A: Identifier' >= 'B: Identifier')": 12,
    "((('A: string' + 'B: Identifier') + 'C: string') + 'D: Identifier')": 11,
    "('A: MemberExpression' === 1)": 11,
    "('A: Identifier' != null)": 11,
    "('A: MemberExpression' || 'B: Identifier')": 11,
    "('A: Identifier' && 'B: CallExpression')": 11,
    "('A: Identifier' && 'B: AssignmentExpression')": 11,
    "-('A: number')": 11,
    "(0 === 'A: CallExpression')": 11,
    "('A: MemberExpression' > 1)": 10,
    "('A: CallExpression' >= 0)": 10,
    "('A: CallExpression' ? 'B: ArrayExpression' : 'C: ObjectExpression')": 10,
    "('A: Identifier' << 1)": 10,
    "(+('A: MemberExpression') || 'B: Identifier')": 10,
    "('A: Identifier' > 'B: Identifier')": 10,
    "('A: Identifier' || 'B: AssignmentExpression')": 10,
    "(('A: Identifier' + 'B: Identifier') + 'C: Identifier')": 10,
    "('A: Identifier' !== -(1))": 9,
    "('A: Identifier' > 0)": 9,
    "('A: Identifier' in 'B: Identifier')": 9,
    "('A: MemberExpression' + 'B: string')": 9,
    "('A: Identifier' !== 'B: string')": 9,
    "(('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier'))": 9,
    "(('A: Identifier' < 'B: number') || ('C: Identifier' > 'D: number'))": 9,
    "+('A: CallExpression')": 9,
    "('A: MemberExpression' && 'B: SequenceExpression')": 9,
    "('A: AssignmentExpression' && 'B: CallExpression')": 9,
    "('A: Identifier' / 'B: number')": 8,
    "('A: MemberExpression' < 'B: MemberExpression')": 8,
    "('A: MemberExpression' && 'B: AssignmentExpression')": 8,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + 'D: Identifier')": 8,
    "(('A: number' === 'B: Identifier') ? false : null)": 8,
    "((typeof('A: Identifier') === 'function') && 'B: Identifier')": 7,
    "(('A: Identifier' === 'B: Identifier') || ('C: Identifier' && ('D: Identifier' <= 0)))": 7,
    "('A: Identifier' && ('B: Identifier' <= 0))": 7,
    "('A: MemberExpression' || 'B: ArrayExpression')": 7,
    "('A: MemberExpression' > 0)": 7,
    "!(!('A: Identifier'))": 7,
    "('A: Identifier' ? 'B: CallExpression' : void('C: CallExpression'))": 7,
    "('A: Identifier' || 'B: SequenceExpression')": 7,
    "('A: Identifier' ? 'B: MemberExpression' : 'C: Identifier')": 7,
    "(typeof('A: Identifier') == 'object')": 7,
    "('A: string' == 'B: Identifier')": 7,
    "(('A: Identifier' + 'B: string') + 'C: Identifier')": 7,
    "('A: string' + 'B: MemberExpression')": 7,
    "('A: MemberExpression' + 1)": 7,
    "('A: string' + 1)": 7,
    "('A: Identifier' % 'B: number')": 7,
    "(('A: MemberExpression' > 1) ? 'B: Identifier' : 'C: MemberExpression')": 6,
    "('A: Identifier' ? 'B: CallExpression' : 'C: ArrayExpression')": 6,
    "('A: MemberExpression' <= 1)": 6,
    "(('A: MemberExpression' === 0) && 'B: CallExpression')": 6,
    "('A: MemberExpression' !== 'B: MemberExpression')": 6,
    "('A: MemberExpression' || 'B: string')": 6,
    "(typeof('A: Identifier') == \"function\")": 6,
    "void('A: SequenceExpression')": 6,
    "(1 / 0)": 6,
    "(('A: MemberExpression' + 'B: string') + 'C: MemberExpression')": 6,
    "((('A: Identifier' < 'B: number') || ('C: Identifier' > 'D: number')) || 'E: CallExpression')": 6,
    "('A: CallExpression' | 'B: number')": 6,
    "('A: CallExpression' & -('B: number'))": 6,
    "((('A: BinaryExpression' && 'B: AssignmentExpression') && ('C: Identifier' <= 'D: Identifier')) && 'E: AssignmentExpression')": 6,
    "((('A: string' === 'B: CallExpression') && 'C: AssignmentExpression') && ('D: Identifier' <= 'E: Identifier'))": 6,
    "(('A: string' === 'B: CallExpression') && 'C: AssignmentExpression')": 6,
    "('A: MemberExpression' >= 'B: number')": 6,
    "(\"\" + 'A: Identifier')": 6,
    "(('A: UpdateExpression' << 1) | 1)": 6,
    "('A: UpdateExpression' << 1)": 6,
    "('A: MemberExpression' ? 'B: AssignmentExpression' : ('C: MemberExpression' && 'D: AssignmentExpression'))": 6,
    "('A: Identifier' && ('B: string' === 'C: CallExpression'))": 6,
    "('A: UpdateExpression' >= 0)": 6,
    "('A: Identifier' > 1)": 6,
    "(('A: Identifier' >= 'B: Identifier') && 'C: AssignmentExpression')": 6,
    "(typeof('A: Identifier') !== 'undefined')": 5,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: Identifier')": 5,
    "('A: Identifier' || 'B: ArrayExpression')": 5,
    "(('A: UpdateExpression' < 'B: Identifier') ? 'C: ObjectExpression' : null)": 5,
    "(('A: Identifier' < 'B: Identifier') ? 'C: ObjectExpression' : null)": 5,
    "(('A: Identifier' < 'B: Identifier') && !('C: Identifier'))": 5,
    "(('A: UpdateExpression' === 'B: Identifier') || ('C: Identifier' === 'D: Identifier'))": 5,
    "('A: UpdateExpression' === 'B: Identifier')": 5,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + 'D: CallExpression')": 5,
    "(('A: MemberExpression' === 0) && (0 === 'B: Identifier'))": 5,
    "('A: MemberExpression' && ('B: Identifier' < 'C: Identifier'))": 5,
    "(-(1) === 'A: Identifier')": 5,
    "((!('A: Identifier') && ('B: MemberExpression' === 1)) || ('C: Identifier' && ('D: MemberExpression' === 0)))": 5,
    "(!('A: Identifier') && ('B: MemberExpression' === 1))": 5,
    "('A: Identifier' && ('B: MemberExpression' === 0))": 5,
    "((('A: MemberExpression' === 0) && !('B: Identifier')) && ('C: MemberExpression' === 0))": 5,
    "(('A: MemberExpression' === 0) && !('B: Identifier'))": 5,
    "('A: Identifier' <= ('B: MemberExpression' - 'C: MemberExpression'))": 5,
    "((!('A: MemberExpression') && ('B: Identifier' < 'C: MemberExpression')) && 'D: MemberExpression')": 5,
    "(!('A: MemberExpression') && ('B: Identifier' < 'C: MemberExpression'))": 5,
    "(0 === ('A: MemberExpression' + 'B: Identifier'))": 5,
    "('A: MemberExpression' + 'B: Identifier')": 5,
    "('A: MemberExpression' === false)": 5,
    "(typeof('A: Identifier') == 'function')": 5,
    "('A: CallExpression' && !('B: Identifier'))": 5,
    "('A: Identifier' ? 'B: Identifier' : 'C: CallExpression')": 5,
    "('A: Identifier' && ('B: UpdateExpression' < 'C: MemberExpression'))": 5,
    "('A: UpdateExpression' < 'B: MemberExpression')": 5,
    "(+('A: Identifier') || 'B: Identifier')": 5,
    "+('A: Identifier')": 5,
    "(('A: Identifier' < 'B: Identifier') ? -(1) : (('C: Identifier' > 'D: Identifier') ? 1 : 0))": 5,
    "(('A: Identifier' > 'B: Identifier') ? 1 : 0)": 5,
    "('A: MemberExpression' <= 'B: number')": 5,
    "('A: Identifier' || ('B: MemberExpression' === 'C: Identifier'))": 5,
    "(typeof('A: MemberExpression') == \"function\")": 5,
    "(0 >= 'A: Identifier')": 5,
    "('A: MemberExpression' ? 'B: CallExpression' : 'C: CallExpression')": 5,
    "('A: Identifier' == 'B: Identifier')": 5,
    "('A: CallExpression' || 'B: ArrayExpression')": 5,
    "('A: MemberExpression' * 'B: number')": 5,
    "('A: MemberExpression' || '')": 5,
    "('A: number' == 'B: Identifier')": 5,
    "((typeof('A: Identifier') === 'function') && 'B: MemberExpression')": 4,
    "((typeof('A: Identifier') === 'object') && (typeof('B: MemberExpression') === 'function'))": 4,
    "(('A: Identifier' && 'B: MemberExpression') ? 'C: Identifier' : 'D: NewExpression')": 4,
    "('A: MemberExpression' % 1)": 4,
    "((('A: Identifier' >= 'B: Identifier') || 'C: Identifier') || 'D: Identifier')": 4,
    "(('A: Identifier' >= 'B: Identifier') || 'C: Identifier')": 4,
    "('A: UpdateExpression' === 0)": 4,
    "('A: CallExpression' && ('B: CallExpression' >= 0))": 4,
    "(('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: string'))": 4,
    "((-(1) === 'A: Identifier') ? 'B: MemberExpression' : 'C: Identifier')": 4,
    "(('A: MemberExpression' > 0) ? 'B: Identifier' : 'C: Identifier')": 4,
    "(('A: Identifier' != null) && (typeof('B: Identifier') !== 'function'))": 4,
    "('A: Identifier' ? 'B: Identifier' : ('C: Identifier' || 'D: Identifier'))": 4,
    "('A: Identifier' || !('B: Identifier'))": 4,
    "('A: AssignmentExpression' < 'B: MemberExpression')": 4,
    "((('A: Identifier' + 1) < 'B: MemberExpression') && 'C: CallExpression')": 4,
    "(('A: Identifier' + 1) < 'B: MemberExpression')": 4,
    "(('A: Identifier' << 1) + 1)": 4,
    "((('A: Identifier' + 1) >> 1) - 1)": 4,
    "(('A: Identifier' + 1) >> 1)": 4,
    "(('A: MemberExpression' < 'B: number') && (typeof('C: Identifier') === 'function'))": 4,
    "(('A: Identifier' && ('B: UpdateExpression' < 'C: MemberExpression')) && (('D: UnaryExpression' != 'function') || 'E: CallExpression'))": 4,
    "((typeof('A: MemberExpression') != 'function') || 'B: CallExpression')": 4,
    "(typeof('A: MemberExpression') != 'function')": 4,
    "((typeof('A: MemberExpression') === 'function') ? 'B: MemberExpression' : 'C: CallExpression')": 4,
    "((typeof('A: Identifier') === 'number') || (typeof('B: Identifier') === 'string'))": 4,
    "(typeof('A: Identifier') === 'number')": 4,
    "(typeof('A: Identifier') === 'string')": 4,
    "(('A: Identifier' && 'B: MemberExpression') || 'C: MemberExpression')": 4,
    "(('A: MemberExpression' < ('B: Identifier' - 1)) || (null == 'C: Identifier'))": 4,
    "('A: MemberExpression' < ('B: Identifier' - 1))": 4,
    "('A: Identifier' ? null : 'B: ObjectExpression')": 4,
    "(typeof('A: Identifier') == \"object\")": 4,
    "('A: number' > 'B: MemberExpression')": 4,
    "('A: CallExpression' && 'B: CallExpression')": 4,
    "('A: CallExpression' ? ('B: CallExpression' ? void(0) : 'C: CallExpression') : 'D: CallExpression')": 4,
    "('A: CallExpression' ? void(0) : 'B: CallExpression')": 4,
    "('A: MemberExpression' ? 'B: AssignmentExpression' : 'C: AssignmentExpression')": 4,
    "('A: Identifier' ? 'B: Identifier' : 'C: Identifier')": 4,
    "('A: CallExpression' || 'B: SequenceExpression')": 4,
    "('A: Identifier' | 0)": 4,
    "((typeof('A: Identifier') == 'object') && 'B: Identifier')": 4,
    "('A: Identifier' ? 'B: CallExpression' : 'C: Identifier')": 4,
    "('A: Identifier' !== 'B: number')": 4,
    "('A: MemberExpression' || 'B: MemberExpression')": 4,
    "('A: MemberExpression' + 'B: MemberExpression')": 4,
    "('A: MemberExpression' || 'B: CallExpression')": 4,
    "((('A: Identifier' + 'B: string') + 'C: string') + 'D: Identifier')": 4,
    "(('A: Identifier' + 'B: string') + 'C: string')": 4,
    "((1 + 'A: number') + 'B: number')": 4,
    "(1 + 'A: number')": 4,
    "((0 === 'A: CallExpression') && (0 === 'B: CallExpression'))": 4,
    "(('A: number' * 'B: Identifier') + 1)": 4,
    "('A: CallExpression' - 'B: Identifier')": 4,
    "((('A: UnaryExpression' === 'object') && ('B: UnaryExpression' !== 'undefined')) ? 'C: CallExpression' : (('D: BinaryExpression' && 'E: MemberExpression') ? 'F: CallExpression' : 'G: CallExpression'))": 3,
    "((typeof('A: Identifier') === 'object') && (typeof('B: Identifier') !== 'undefined'))": 3,
    "((('A: UnaryExpression' === 'function') && 'B: MemberExpression') ? 'C: CallExpression' : 'D: CallExpression')": 3,
    "('A: Identifier' && (typeof('B: MemberExpression') === 'function'))": 3,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: MemberExpression' >= 0)) && (0 === ('D: MemberExpression' % 1)))": 3,
    "(('A: Identifier' && ('B: UnaryExpression' === 'number')) && ('C: MemberExpression' >= 0))": 3,
    "('A: Identifier' && (typeof('B: MemberExpression') === 'number'))": 3,
    "(typeof('A: MemberExpression') === 'number')": 3,
    "('A: MemberExpression' >= 0)": 3,
    "(0 === ('A: MemberExpression' % 1))": 3,
    "(true === 'A: Identifier')": 3,
    "(typeof('A: Identifier') !== 'number')": 3,
    "((('A: Identifier' !== 'B: UnaryExpression') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: string'))": 3,
    "(('A: Identifier' !== -(1)) && ('B: MemberExpression' === 'C: string'))": 3,
    "('A: Identifier' || (false === 'B: Identifier'))": 3,
    "(('A: Identifier' > 0) && 'B: CallExpression')": 3,
    "('A: Identifier' >= 0)": 3,
    "(('A: MemberExpression' <= 'B: number') && (typeof('C: Identifier') === 'function'))": 3,
    "(\"function\" != typeof('A: Identifier'))": 3,
    "(1 < 'A: MemberExpression')": 3,
    "void('A: AssignmentExpression')": 3,
    "('A: MemberExpression' === 'B: MemberExpression')": 3,
    "('A: MemberExpression' || 'B: ObjectExpression')": 3,
    "(false === 'A: CallExpression')": 3,
    "('A: MemberExpression' > 'B: number')": 3,
    "('A: Identifier' < 0)": 3,
    "('A: CallExpression' > -(1))": 3,
    "((typeof('A: Identifier') !== 'function') && (typeof('B: Identifier') === 'object'))": 3,
    "(('A: Identifier' + 'B: Identifier') <= 'C: Identifier')": 3,
    "('A: MemberExpression' != \"null\")": 3,
    "(typeof('A: Identifier') !== 'string')": 3,
    "('A: CallExpression' !== -(1))": 3,
    "('A: MemberExpression' - 'B: number')": 3,
    "('A: AssignmentExpression' ? 'B: Identifier' : (('C: BinaryExpression' && 'D: BinaryExpression') ? 'E: CallExpression' : ('F: LogicalExpression' ? 'G: CallExpression' : 'H: CallExpression')))": 3,
    "((('A: string' <= 'B: Identifier') && ('C: Identifier' <= 'D: string')) ? 'E: CallExpression' : (('F: BinaryExpression' || 'G: BinaryExpression') ? 'H: CallExpression' : 'I: CallExpression'))": 3,
    "(('A: string' <= 'B: Identifier') && ('C: Identifier' <= 'D: string'))": 3,
    "('A: string' <= 'B: Identifier')": 3,
    "('A: Identifier' <= 'B: string')": 3,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) ? 'E: CallExpression' : 'F: CallExpression')": 3,
    "((('A: Identifier' < 'B: number') ? 'C: string' : 'D: string') + 'E: CallExpression')": 3,
    "(('A: Identifier' < 'B: number') ? 'C: string' : 'D: string')": 3,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 3,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 3,
    "('A: Identifier' ? 1 : 0)": 3,
    "((('A: BinaryExpression' < 'B: Identifier') && ('C: MemberExpression' === 'D: string')) ? 'E: SequenceExpression' : 'F: AssignmentExpression')": 3,
    "((('A: Identifier' + 'B: number') < 'C: Identifier') && ('D: MemberExpression' === 'E: string'))": 3,
    "(('A: Identifier' + 'B: number') < 'C: Identifier')": 3,
    "((('A: Identifier' < 'B: number') || ('C: Identifier' > 'D: number')) || 'E: SequenceExpression')": 3,
    "(('A: MemberExpression' - 'B: MemberExpression') || ('C: MemberExpression' - 'D: MemberExpression'))": 3,
    "(('A: MemberExpression' <= ('B: MemberExpression' + 1)) ? 'C: AssignmentExpression' : 'D: CallExpression')": 3,
    "('A: MemberExpression' <= ('B: MemberExpression' + 1))": 3,
    "(('A: MemberExpression' > 'B: MemberExpression') && 'C: SequenceExpression')": 3,
    "('A: MemberExpression' > 'B: MemberExpression')": 3,
    "((('A: MemberExpression' + 1) > 'B: MemberExpression') && 'C: CallExpression')": 3,
    "(('A: MemberExpression' + 1) > 'B: MemberExpression')": 3,
    "(('A: string' === 'B: Identifier') ? 'C: UpdateExpression' : (('D: LogicalExpression' && 'E: BinaryExpression') && 'F: AssignmentExpression'))": 3,
    "((-(1) === 'A: MemberExpression') && 'B: AssignmentExpression')": 3,
    "(-(1) === 'A: MemberExpression')": 3,
    "(('A: string' === 'B: Identifier') ? 'C: SequenceExpression' : (('D: LogicalExpression' && 'E: BinaryExpression') && 'F: AssignmentExpression'))": 3,
    "(('A: MemberExpression' === void(0)) && 'B: AssignmentExpression')": 3,
    "('A: MemberExpression' === void(0))": 3,
    "((('A: MemberExpression' === 'B: string') && ('C: string' !== 'D: MemberExpression')) && 'E: AssignmentExpression')": 3,
    "(('A: MemberExpression' === 'B: string') && ('C: string' !== 'D: MemberExpression'))": 3,
    "('A: string' !== 'B: MemberExpression')": 3,
    "('A: MemberExpression' && 'B: Identifier')": 3,
    "((('A: MemberExpression' >= 'B: number') && ('C: string' === 'D: Identifier')) ? 'E: AssignmentExpression' : (('F: Identifier' !== 'G: string') && 'H: AssignmentExpression'))": 3,
    "(('A: MemberExpression' >= 'B: number') && ('C: string' === 'D: Identifier'))": 3,
    "(('A: Identifier' !== 'B: string') && 'C: AssignmentExpression')": 3,
    "('A: Identifier' & -('B: number'))": 3,
    "('A: Identifier' | 'B: number')": 3,
    "('A: Identifier' ? 'B: string' : 'C: string')": 3,
    "('A: Identifier' && 'B: SequenceExpression')": 3,
    "(typeof('A: Identifier') === \"string\")": 3,
    "('A: AssignmentExpression' && !(('B: Identifier' && 'C: BinaryExpression')))": 3,
    "(('A: MemberExpression' >= 'B: number') && ('C: string' === 'D: CallExpression'))": 3,
    "!(('A: Identifier' && ('B: UnaryExpression' === \"string\")))": 3,
    "('A: Identifier' && (typeof('B: MemberExpression') === \"string\"))": 3,
    "(typeof('A: MemberExpression') === \"string\")": 3,
    "('A: Identifier' + 'B: MemberExpression')": 3,
    "('A: Identifier' - 'B: MemberExpression')": 3,
    "('A: MemberExpression' ? 'B: CallExpression' : ('C: MemberExpression' ? 'D: CallExpression' : 'E: CallExpression'))": 3,
    "('A: Identifier' && ('B: MemberExpression' ? 'C: SequenceExpression' : 'D: CallExpression'))": 3,
    "('A: MemberExpression' ? 'B: SequenceExpression' : 'C: CallExpression')": 3,
    "(('A: Identifier' > 1) ? 'B: CallExpression' : 'C: CallExpression')": 3,
    "(\"\" + 'A: MemberExpression')": 3,
    "('A: AssignmentExpression' && ('B: MemberExpression' === 1))": 3,
    "(('A: Identifier' === ('B: Identifier' | 0)) && 'C: CallExpression')": 3,
    "('A: Identifier' === ('B: Identifier' | 0))": 3,
    "('A: CallExpression' || 0)": 3,
    "(('A: Identifier' - 1) | 0)": 3,
    "('A: string' + (('B: Identifier' + 'C: Identifier') % 'D: number'))": 3,
    "(('A: Identifier' + 'B: Identifier') % 'C: number')": 3,
    "('A: CallExpression' ? ('B: MemberExpression' && 'C: CallExpression') : 'D: AssignmentExpression')": 3,
    "(!('A: Identifier') || !('B: CallExpression'))": 3,
    "('A: CallExpression' ? 'B: string' : 'C: string')": 3,
    "(('A: MemberExpression' !== 'B: MemberExpression') ? 'C: SequenceExpression' : 'D: AssignmentExpression')": 3,
    "((('A: Identifier' + 'B: number') <= 'C: Identifier') && ('D: MemberExpression' === 'E: Identifier'))": 3,
    "(('A: Identifier' + 'B: number') <= 'C: Identifier')": 3,
    "(('A: MemberExpression' !== 1) && 'B: AssignmentExpression')": 3,
    "('A: MemberExpression' !== 1)": 3,
    "(('A: Identifier' < 'B: Identifier') && 'C: SequenceExpression')": 3,
    "(('A: string' in 'B: Identifier') && 'C: CallExpression')": 3,
    "('A: string' in 'B: Identifier')": 3,
    "(('A: Identifier' && 'B: MemberExpression') ? 'C: MemberExpression' : 'D: Identifier')": 3,
    "('A: MemberExpression' ? ('B: CallExpression' + 'C: number') : 'D: Identifier')": 3,
    "('A: CallExpression' + 'B: number')": 3,
    "(('A: Identifier' < 'B: MemberExpression') && ('C: CallExpression' < 'D: Identifier'))": 3,
    "('A: CallExpression' < 'B: Identifier')": 3,
    "((1 === 'A: Identifier') ? ('B: Identifier' ? 'C: Identifier' : 'D: Identifier') : (('E: number' === 'F: Identifier') ? ('G: CallExpression' ? 'H: Identifier' : 'I: Identifier') : 'J: Identifier'))": 3,
    "(('A: number' === 'B: Identifier') ? ('C: CallExpression' ? 'D: Identifier' : 'E: Identifier') : 'F: Identifier')": 3,
    "('A: AssignmentExpression' && ('B: MemberExpression' === 'C: string'))": 3,
    "(('A: Identifier' === 'B: Identifier') ? void(0) : 'C: Identifier')": 3,
    "((('A: LogicalExpression' || 'B: BinaryExpression') && 'C: MemberExpression') && ('D: CallExpression' >= 0))": 3,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: MemberExpression' === 'D: string')) && 'E: MemberExpression')": 3,
    "((('A: MemberExpression' === 'B: string') || ('C: MemberExpression' === 'D: string')) || ('E: MemberExpression' === 'F: string'))": 3,
    "(('A: MemberExpression' === 'B: string') || ('C: MemberExpression' === 'D: string'))": 3,
    "('A: AssignmentExpression' ? (('B: MemberExpression' && 'C: MemberExpression') ? +('D: MemberExpression') : !(0)) : !(1))": 3,
    "(('A: MemberExpression' && 'B: MemberExpression') ? +('C: MemberExpression') : !(0))": 3,
    "('A: MemberExpression' && 'B: MemberExpression')": 3,
    "(('A: Identifier' < 'B: MemberExpression') ? 'C: CallExpression' : ('D: Identifier' && 'E: CallExpression'))": 3,
    "('A: MemberExpression' || 'B: AssignmentExpression')": 3,
    "+('A: NewExpression')": 3,
    "('A: string' + 'B: string')": 3,
    "('A: MemberExpression' !== 'B: string')": 3,
    "('A: Identifier' <= 'B: number')": 3,
    "('A: CallExpression' + 'B: string')": 3,
    "('A: MemberExpression' === 'function')": 3,
    "('A: CallExpression' === -(1))": 3,
    "('A: number' == 'B: CallExpression')": 3,
    "('A: MemberExpression' !== 'B: number')": 3,
    "((1 < 'A: MemberExpression') ? 'B: Identifier' : 'C: MemberExpression')": 2,
    "void(((0 >= 'A: Identifier') && 'B: CallExpression'))": 2,
    "((0 >= 'A: Identifier') && 'B: CallExpression')": 2,
    "(('A: Identifier' === 'B: Identifier') || ('C: Identifier' && (0 >= 'D: Identifier')))": 2,
    "('A: Identifier' && (0 >= 'B: Identifier'))": 2,
    "((0 === 'A: Identifier') && 'B: CallExpression')": 2,
    "(('A: number' > 'B: MemberExpression') && 'C: AssignmentExpression')": 2,
    "(0 < 'A: MemberExpression')": 2,
    "(1 >= 'A: MemberExpression')": 2,
    "(null != 'A: Identifier')": 2,
    "((0 < 'A: Identifier') && 'B: CallExpression')": 2,
    "(0 < 'A: Identifier')": 2,
    "('A: CallExpression' ? 'B: Identifier' : 'C: FunctionExpression')": 2,
    "('A: Identifier' ? 'B: CallExpression' : void('C: SequenceExpression'))": 2,
    "((typeof('A: Identifier') == \"function\") && 'B: Identifier')": 2,
    "('A: Identifier' ? 'B: CallExpression' : (('C: UnaryExpression' === 'D: Identifier') ? void(0) : ('E: Identifier' ? 'F: UnaryExpression' : 'G: CallExpression')))": 2,
    "((!(1) === 'A: Identifier') ? void(0) : ('B: Identifier' ? void('C: CallExpression') : 'D: CallExpression'))": 2,
    "('A: Identifier' ? void('B: CallExpression') : 'C: CallExpression')": 2,
    "((!(1) === 'A: Identifier') || 'B: CallExpression')": 2,
    "('A: MemberExpression' - 'B: Identifier')": 2,
    "((('A: BinaryExpression' && 'B: Identifier') && ('C: MemberExpression' === 'D: Identifier')) && 'E: Identifier')": 2,
    "((('A: UnaryExpression' == 'object') && 'B: Identifier') && ('C: MemberExpression' === 'D: Identifier'))": 2,
    "(('A: Identifier' === 'B: Identifier') ? 'C: Identifier' : 'D: Identifier')": 2,
    "('A: Identifier' > -(1))": 2,
    "(0 == ('A: Identifier' % 1))": 2,
    "('A: Identifier' % 1)": 2,
    "(('A: Identifier' && 'B: MemberExpression') && 'C: CallExpression')": 2,
    "('A: CallExpression' && ('B: Identifier' == 'C: CallExpression'))": 2,
    "('A: Identifier' == 'B: CallExpression')": 2,
    "((('A: BinaryExpression' && 'B: Identifier') && !('C: MemberExpression')) && 'D: Identifier')": 2,
    "((('A: UnaryExpression' == 'object') && 'B: Identifier') && !('C: MemberExpression'))": 2,
    "((('A: LogicalExpression' && 'B: Identifier') && !('C: MemberExpression')) && 'D: Identifier')": 2,
    "((('A: Identifier' && 'B: BinaryExpression') && 'C: Identifier') && !('D: MemberExpression'))": 2,
    "(('A: Identifier' && ('B: UnaryExpression' == 'object')) && 'C: Identifier')": 2,
    "('A: Identifier' && (typeof('B: Identifier') == 'object'))": 2,
    "('A: Identifier' && ('B: MemberExpression' === 'C: Identifier'))": 2,
    "('A: Identifier' != 'B: string')": 2,
    "(('A: Identifier' && 'B: MemberExpression') && 'C: MemberExpression')": 2,
    "(!('A: Identifier') && !('B: Identifier'))": 2,
    "(('A: string' == 'B: Identifier') || ('C: string' == 'D: Identifier'))": 2,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: CallExpression')": 2,
    "((null == 'A: Identifier') ? 0 : 'B: MemberExpression')": 2,
    "('A: Identifier' ? 'B: Identifier' : 'C: UpdateExpression')": 2,
    "-('A: Identifier')": 2,
    "('A: Identifier' - 'B: Identifier')": 2,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: Identifier') + 'D: string')": 2,
    "((('A: BinaryExpression' + 'B: string') + 'C: Identifier') + 'D: Identifier')": 2,
    "((('A: string' + 'B: string') + 'C: Identifier') + 'D: string')": 2,
    "(('A: string' + 'B: string') + 'C: Identifier')": 2,
    "((('A: MemberExpression' + 'B: string') + 'C: CallExpression') + 'D: string')": 2,
    "(('A: MemberExpression' + 'B: string') + 'C: CallExpression')": 2,
    "('A: Identifier' > ('B: Identifier' / 'C: number'))": 2,
    "('A: Identifier' >= 'B: number')": 2,
    "('A: MemberExpression' ? 'B: CallExpression' : 'C: ArrayExpression')": 2,
    "('A: number' * 'B: number')": 2,
    "(('A: MemberExpression' === 'B: string') ? 'C: NewExpression' : null)": 2,
    "('A: MemberExpression' instanceof 'B: Identifier')": 2,
    "(('A: Identifier' * ('B: Identifier' - 1)) - 'C: Identifier')": 2,
    "('A: Identifier' * ('B: Identifier' - 1))": 2,
    "('A: number' - 'B: Identifier')": 2,
    "(('A: Identifier' > 1) ? false : 'B: string')": 2,
    "('A: Identifier' && ('B: Identifier' !== 'C: Identifier'))": 2,
    "((('A: UnaryExpression' == \"object\") && (\"undefined\" != 'B: UnaryExpression')) ? 'C: CallExpression' : (('D: BinaryExpression' && 'E: MemberExpression') ? 'F: CallExpression' : 'G: CallExpression'))": 1,
    "((typeof('A: Identifier') == \"object\") && (\"undefined\" != typeof('B: Identifier')))": 1,
    "(\"undefined\" != typeof('A: Identifier'))": 1,
    "((('A: UnaryExpression' == \"function\") && 'B: MemberExpression') ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "((typeof('A: Identifier') == \"function\") && 'B: MemberExpression')": 1,
    "('A: CallExpression' ? 'B: FunctionExpression' : 'C: CallExpression')": 1,
    "(('A: Identifier' && ('B: UnaryExpression' == \"function\")) ? 'C: CallExpression' : void('D: CallExpression'))": 1,
    "('A: Identifier' && (typeof('B: MemberExpression') == \"function\"))": 1,
    "((typeof('A: MemberExpression') == \"function\") ? 'B: CallExpression' : 'C: NewExpression')": 1,
    "((('A: Identifier' && 'B: BinaryExpression') && (0 <= 'C: MemberExpression')) && (0 == ('D: MemberExpression' % 1)))": 1,
    "(('A: Identifier' && ('B: UnaryExpression' == \"number\")) && (0 <= 'C: MemberExpression'))": 1,
    "('A: Identifier' && (typeof('B: MemberExpression') == \"number\"))": 1,
    "(typeof('A: MemberExpression') == \"number\")": 1,
    "(0 <= 'A: MemberExpression')": 1,
    "(0 == ('A: MemberExpression' % 1))": 1,
    "(null !== 'A: Identifier')": 1,
    "('A: MemberExpression' ? null : 'B: SequenceExpression')": 1,
    "(('A: string' === 'B: Identifier') ? 'C: CallExpression' : (('D: Identifier' < 'E: Identifier') ? 'F: ObjectExpression' : null))": 1,
    "((('A: BinaryExpression' || 'B: Identifier') || 'C: Identifier') || 'D: SequenceExpression')": 1,
    "!(('A: Identifier' || 'B: Identifier'))": 1,
    "('A: Identifier' ? 'B: SequenceExpression' : void('C: SequenceExpression'))": 1,
    "('A: Identifier' ? void(0) : ('B: Identifier' ? 'C: CallExpression' : ('D: BinaryExpression' ? 'E: SequenceExpression' : 'F: ConditionalExpression')))": 1,
    "('A: Identifier' ? 'B: CallExpression' : (('C: UnaryExpression' === 'D: Identifier') ? 'E: SequenceExpression' : ('F: LogicalExpression' ? 'G: SequenceExpression' : 'H: UnaryExpression')))": 1,
    "((!(1) === 'A: Identifier') ? 'B: SequenceExpression' : (('C: BinaryExpression' || 'D: LogicalExpression') ? 'E: SequenceExpression' : void('F: CallExpression')))": 1,
    "((('A: Identifier' === 'B: Identifier') || ('C: Identifier' && 'D: BinaryExpression')) ? 'E: SequenceExpression' : void('F: CallExpression'))": 1,
    "((!(1) === 'A: Identifier') && 'B: AssignmentExpression')": 1,
    "((!(0) === 'A: Identifier') || ('B: Identifier' ? 'C: CallExpression' : ('D: LogicalExpression' && 'E: CallExpression')))": 1,
    "(!(0) === 'A: Identifier')": 1,
    "('A: Identifier' ? 'B: CallExpression' : (('C: BinaryExpression' || 'D: BinaryExpression') && 'E: CallExpression'))": 1,
    "((('A: UpdateExpression' === 'B: Identifier') || ('C: Identifier' === 'D: Identifier')) && 'E: CallExpression')": 1,
    "((1 < 'A: MemberExpression') ? 'B: CallExpression' : 'C: CallExpression')": 1,
    "(('A: CallExpression' && (0 <= 'B: CallExpression')) && 'C: CallExpression')": 1,
    "('A: CallExpression' && (0 <= 'B: CallExpression'))": 1,
    "(0 <= 'A: CallExpression')": 1,
    "((\"number\" != typeof('A: Identifier')) && 'B: SequenceExpression')": 1,
    "(\"number\" != typeof('A: Identifier'))": 1,
    "((0 === 'A: Identifier') ? 'B: SequenceExpression' : void('C: SequenceExpression'))": 1,
    "(('A: UpdateExpression' == 0) && 'B: CallExpression')": 1,
    "('A: UpdateExpression' == 0)": 1,
    "((('A: UnaryExpression' !== 'B: Identifier') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: string'))": 1,
    "((-(1) !== 'A: Identifier') && ('B: MemberExpression' === 'C: string'))": 1,
    "(-(1) !== 'A: Identifier')": 1,
    "((-(1) === 'A: Identifier') ? 'B: SequenceExpression' : 'C: SequenceExpression')": 1,
    "((0 < 'A: MemberExpression') ? 'B: Identifier' : 'C: Identifier')": 1,
    "('A: Identifier' ? ('B: Identifier' ? void('C: AssignmentExpression') : 'D: AssignmentExpression') : 'E: CallExpression')": 1,
    "('A: Identifier' ? void('B: AssignmentExpression') : 'C: AssignmentExpression')": 1,
    "('A: Identifier' ? ('B: Identifier' ? 'C: CallExpression' : 'D: CallExpression') : ((1 >= 'E: MemberExpression') ? 'F: CallExpression' : void('G: CallExpression')))": 1,
    "((1 >= 'A: MemberExpression') ? 'B: CallExpression' : void('C: CallExpression'))": 1,
    "((null != 'A: Identifier') && (\"function\" != typeof('B: Identifier')))": 1,
    "((0 === 'A: Identifier') ? 'B: CallExpression' : ((0 < 'C: Identifier') && 'D: CallExpression'))": 1,
    "((null != 'A: Identifier') && 'B: CallExpression')": 1,
    "(('A: Identifier' <= ('B: MemberExpression' - 'C: MemberExpression')) && 'D: CallExpression')": 1,
    "(!(!('A: LogicalExpression')) && 'B: SequenceExpression')": 1,
    "!(!(('A: BinaryExpression' && 'B: CallExpression')))": 1,
    "!((('A: MemberExpression' === 0) && 'B: CallExpression'))": 1,
    "('A: Identifier' ? void('B: SequenceExpression') : 'C: NewExpression')": 1,
    "(('A: MemberExpression' === 'B: Identifier') && 'C: CallExpression')": 1,
    "((!(1) === 'A: MemberExpression') || 'B: SequenceExpression')": 1,
    "(!(1) === 'A: MemberExpression')": 1,
    "((typeof('A: Identifier') == \"function\") ? 'B: CallExpression' : 'C: AssignmentExpression')": 1,
    "(('A: Identifier' || ('B: UnaryExpression' === 'C: Identifier')) ? 'D: CallExpression' : (('E: CallExpression' && 'F: UnaryExpression') ? 'G: SequenceExpression' : void('H: CallExpression')))": 1,
    "('A: Identifier' || (!(1) === 'B: Identifier'))": 1,
    "(('A: CallExpression' && !('B: Identifier')) ? 'C: SequenceExpression' : void('D: CallExpression'))": 1,
    "((typeof('A: Identifier') == \"object\") && ('B: Identifier' ? ('C: MemberExpression' && 'D: CallExpression') : ('E: MemberExpression' && 'F: CallExpression')))": 1,
    "('A: Identifier' ? ('B: MemberExpression' && 'C: CallExpression') : ('D: MemberExpression' && 'E: CallExpression'))": 1,
    "(('A: Identifier' in 'B: Identifier') ? 'C: CallExpression' : (('D: Identifier' in 'E: Identifier') ? 'F: CallExpression' : 'G: SequenceExpression'))": 1,
    "(('A: Identifier' in 'B: Identifier') ? 'C: CallExpression' : 'D: SequenceExpression')": 1,
    "(('A: MemberExpression' === 'B: MemberExpression') ? ('C: MemberExpression' < 'D: MemberExpression') : ('E: MemberExpression' < 'F: MemberExpression'))": 1,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: ObjectExpression')": 1,
    "((1 >= 'A: MemberExpression') && 'B: AssignmentExpression')": 1,
    "('A: CallExpression' ? 'B: AssignmentExpression' : 'C: SequenceExpression')": 1,
    "((!(1) === 'A: Identifier') || (('B: LogicalExpression' && 'C: LogicalExpression') ? 'D: CallExpression' : 'E: CallExpression'))": 1,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: BinaryExpression' || 'D: CallExpression')) ? 'E: CallExpression' : 'F: CallExpression')": 1,
    "(('A: Identifier' && ('B: UpdateExpression' < 'C: MemberExpression')) && ((\"function\" != 'D: UnaryExpression') || 'E: CallExpression'))": 1,
    "((\"function\" != typeof('A: MemberExpression')) || 'B: CallExpression')": 1,
    "(\"function\" != typeof('A: MemberExpression'))": 1,
    "((('A: number' > 'B: MemberExpression') && ('C: UnaryExpression' == \"function\")) ? 'D: SequenceExpression' : 'E: SequenceExpression')": 1,
    "(('A: number' > 'B: MemberExpression') && (typeof('C: Identifier') == \"function\"))": 1,
    "((typeof('A: MemberExpression') == \"function\") ? 'B: MemberExpression' : 'C: CallExpression')": 1,
    "((typeof('A: Identifier') == \"number\") || (typeof('B: Identifier') == \"string\"))": 1,
    "(typeof('A: Identifier') == \"number\")": 1,
    "(typeof('A: Identifier') == \"string\")": 1,
    "('A: CallExpression' && 'B: AssignmentExpression')": 1,
    "((('A: MemberExpression' < 'B: BinaryExpression') || (null == 'C: Identifier')) && 'D: SequenceExpression')": 1,
    "((('A: number' >= 'B: MemberExpression') && ('C: UnaryExpression' == \"function\")) && 'D: SequenceExpression')": 1,
    "(('A: number' >= 'B: MemberExpression') && (typeof('C: Identifier') == \"function\"))": 1,
    "('A: number' >= 'B: MemberExpression')": 1,
    "((typeof('A: Identifier') == \"object\") && (typeof('B: MemberExpression') == \"function\"))": 1,
    "('A: Identifier' ? 'B: Identifier' : ('C: Identifier' ? 'D: Identifier' : ('E: Identifier' ? 'F: MemberExpression' : 'G: Identifier')))": 1,
    "('A: Identifier' ? 'B: Identifier' : ('C: Identifier' ? 'D: MemberExpression' : 'E: Identifier'))": 1,
    "('A: Identifier' ? 'B: CallExpression' : void(('C: BinaryExpression' || 'D: SequenceExpression')))": 1,
    "void((('A: UnaryExpression' === 'B: Identifier') || 'C: SequenceExpression'))": 1,
    "((!(1) === 'A: Identifier') || 'B: SequenceExpression')": 1,
    "('A: Identifier' ? 'B: CallExpression' : void(('C: BinaryExpression' || 'D: CallExpression')))": 1,
    "void((('A: UnaryExpression' === 'B: Identifier') || 'C: CallExpression'))": 1,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: AssignmentExpression')": 1,
    "('A: Identifier' ? 'B: MemberExpression' : ('C: Identifier' ? 'D: Identifier' : 'E: Identifier'))": 1,
    "(('A: AssignmentExpression' < 'B: MemberExpression') && 'C: SequenceExpression')": 1,
    "((('A: BinaryExpression' < 'B: MemberExpression') && 'C: CallExpression') && 'D: UpdateExpression')": 1,
    "(0 <= 'A: Identifier')": 1,
    "((!(1) === 'A: Identifier') ? 'B: CallExpression' : void('C: SequenceExpression'))": 1,
    "(('A: number' > 'B: MemberExpression') ? 'C: AssignmentExpression' : 'D: AssignmentExpression')": 1,
    "((!(1) === 'A: Identifier') ? void(0) : (('B: Identifier' || 'C: BinaryExpression') ? 'D: CallExpression' : void('E: CallExpression')))": 1,
    "(('A: Identifier' || ('B: MemberExpression' === 'C: Identifier')) ? 'D: CallExpression' : void('E: CallExpression'))": 1,
    "(('A: Identifier' != null) && (('object' == 'B: Identifier') || ('function' == 'C: Identifier')))": 1,
    "(('object' == 'A: Identifier') || ('function' == 'B: Identifier'))": 1,
    "('object' == 'A: Identifier')": 1,
    "('function' == 'A: Identifier')": 1,
    "('A: CallExpression' && (typeof('B: MemberExpression') === 'function'))": 1,
    "('A: MemberExpression' ? 'B: Identifier' : 'C: NewExpression')": 1,
    "('A: Identifier' && ('B: MemberExpression' === 'C: string'))": 1,
    "(('A: Identifier' || 'B: Identifier') || 'C: CallExpression')": 1,
    "(('A: Identifier' && ('B: Identifier' in 'C: CallExpression')) ? 'D: CallExpression' : 'E: CallExpression')": 1,
    "('A: Identifier' && ('B: Identifier' in 'C: CallExpression'))": 1,
    "('A: Identifier' in 'B: CallExpression')": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: Identifier' == 'D: Identifier')) || ('E: Identifier' == 'F: Identifier'))": 1,
    "((('A: Identifier' == 'B: Identifier') || ('C: Identifier' == 'D: Identifier')) || ('E: Identifier' == 'F: Identifier'))": 1,
    "(('A: Identifier' == 'B: Identifier') || ('C: Identifier' == 'D: Identifier'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && (0 == 'C: BinaryExpression')) && ('D: Identifier' <= 'E: Identifier'))": 1,
    "((('A: UnaryExpression' == 'number') && ('B: Identifier' > 'C: UnaryExpression')) && (0 == ('D: Identifier' % 1)))": 1,
    "((typeof('A: Identifier') == 'number') && ('B: Identifier' > -(1)))": 1,
    "(typeof('A: Identifier') == 'number')": 1,
    "((('A: Identifier' != null) && 'B: CallExpression') && !('C: CallExpression'))": 1,
    "(('A: Identifier' != null) && 'B: CallExpression')": 1,
    "(('A: Identifier' != null) && (typeof('B: Identifier') == 'object'))": 1,
    "(('A: CallExpression' && 'B: CallExpression') && !('C: CallExpression'))": 1,
    "((null == 'A: Identifier') ? 'B: Identifier' : 'C: Identifier')": 1,
    "((!('A: UnaryExpression') && ('B: BinaryExpression' || 'C: LogicalExpression')) && (('D: BinaryExpression' && 'E: BinaryExpression') && ('F: Identifier' < 'G: Identifier')))": 1,
    "(!(!('A: Identifier')) && (('number' == 'B: Identifier') || ('C: BinaryExpression' && 'D: CallExpression')))": 1,
    "(('number' == 'A: Identifier') || (('B: Identifier' != 'C: string') && 'D: CallExpression'))": 1,
    "('number' == 'A: Identifier')": 1,
    "(('A: Identifier' != 'B: string') && 'C: CallExpression')": 1,
    "((('A: Identifier' > 'B: UnaryExpression') && (0 == 'C: BinaryExpression')) && ('D: Identifier' < 'E: Identifier'))": 1,
    "(('A: Identifier' > -(1)) && (0 == ('B: Identifier' % 1)))": 1,
    "(('A: CallExpression' && 'B: CallExpression') && !(!('C: MemberExpression')))": 1,
    "!(!('A: MemberExpression'))": 1,
    "(!('A: Identifier') && 'B: CallExpression')": 1,
    "((!('A: Identifier') && !('B: Identifier')) && 'C: CallExpression')": 1,
    "((('A: UnaryExpression' && 'B: UnaryExpression') && !('C: Identifier')) && 'D: CallExpression')": 1,
    "((!('A: Identifier') && !('B: Identifier')) && !('C: Identifier'))": 1,
    "((('A: Identifier' || 'B: Identifier') || 'C: Identifier') || 'D: Identifier')": 1,
    "(('A: Identifier' || 'B: Identifier') || 'C: Identifier')": 1,
    "(('A: Identifier' || 'B: CallExpression') && !(('C: Identifier' && 'D: LogicalExpression')))": 1,
    "!(('A: Identifier' && ('B: LogicalExpression' || 'C: CallExpression')))": 1,
    "('A: Identifier' && (('B: LogicalExpression' || 'C: LogicalExpression') || 'D: CallExpression'))": 1,
    "((('A: BinaryExpression' || 'B: LogicalExpression') || ('C: Identifier' && 'D: LogicalExpression')) || 'E: CallExpression')": 1,
    "((('A: string' == 'B: Identifier') || ('C: Identifier' && 'D: LogicalExpression')) || ('E: Identifier' && ('F: LogicalExpression' || 'G: BinaryExpression')))": 1,
    "(('A: string' == 'B: Identifier') || ('C: Identifier' && ('D: BinaryExpression' || 'E: BinaryExpression')))": 1,
    "('A: Identifier' && (('B: string' == 'C: Identifier') || ('D: string' == 'E: Identifier')))": 1,
    "('A: Identifier' && (('B: BinaryExpression' || 'C: BinaryExpression') || ('D: string' == 'E: Identifier')))": 1,
    "((('A: string' == 'B: Identifier') || ('C: string' == 'D: Identifier')) || ('E: string' == 'F: Identifier'))": 1,
    "((('A: UnaryExpression' == 'function') && 'B: MemberExpression') || 'C: Identifier')": 1,
    "((typeof('A: Identifier') == 'function') && 'B: MemberExpression')": 1,
    "('A: CallExpression' && ('B: Identifier' != 'C: string'))": 1,
    "(('A: Identifier' <= 0) || !('B: Identifier'))": 1,
    "('A: Identifier' + ('B: Identifier' ? 1 : -(1)))": 1,
    "('A: Identifier' ? 1 : -(1))": 1,
    "('A: Identifier' ? 'B: UpdateExpression' : ('C: UpdateExpression' < 'D: Identifier'))": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "((typeof('A: Identifier') == 'B: string') || ('C: CallExpression' && ('D: Identifier' == 'E: CallExpression')))": 1,
    "(typeof('A: Identifier') == 'B: string')": 1,
    "(typeof('A: Identifier') == 'string')": 1,
    "('A: CallExpression' + '')": 1,
    "('A: Identifier' ? 'B: CallExpression' : '')": 1,
    "('A: Identifier' + '')": 1,
    "((('A: string' == 'B: Identifier') && ('C: BinaryExpression' == 'D: UnaryExpression')) ? 'E: string' : 'F: Identifier')": 1,
    "(('A: string' == 'B: Identifier') && ((1 / 'C: Identifier') == -('D: Identifier')))": 1,
    "((1 / 'A: Identifier') == -('B: Identifier'))": 1,
    "(1 / 'A: Identifier')": 1,
    "((-('A: Identifier') > 'B: Identifier') ? 0 : ('C: Identifier' + 'D: Identifier'))": 1,
    "(-('A: Identifier') > 'B: Identifier')": 1,
    "(('A: Identifier' > 'B: Identifier') ? 'C: Identifier' : 'D: Identifier')": 1,
    "(('A: Identifier' > 'B: Identifier') ? 0 : (('C: Identifier' - 'D: Identifier') >>> 0))": 1,
    "(('A: Identifier' - 'B: Identifier') >>> 0)": 1,
    "((!('A: Identifier') && ('B: Identifier' >= 'C: Identifier')) ? 'D: Identifier' : 'E: CallExpression')": 1,
    "(!('A: Identifier') && ('B: Identifier' >= 'C: Identifier'))": 1,
    "('A: UpdateExpression' && ('B: CallExpression' > -(1)))": 1,
    "(('A: UpdateExpression' < 'B: Identifier') && ('C: CallExpression' > -(1)))": 1,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: Identifier') + 'D: Identifier')": 1,
    "((('A: string' + 'B: Identifier') + 'C: Identifier') + 'D: Identifier')": 1,
    "(('A: string' + 'B: Identifier') + 'C: Identifier')": 1,
    "((('A: BinaryExpression' + 'B: CallExpression') + 'C: string') + 'D: Identifier')": 1,
    "((('A: BinaryExpression' + 'B: string') + 'C: CallExpression') + 'D: string')": 1,
    "((('A: string' + 'B: Identifier') + 'C: string') + 'D: CallExpression')": 1,
    "(('A: Identifier' + 'B: Identifier') + 'C: string')": 1,
    "((('A: Identifier' + 'B: string') + 'C: Identifier') + 'D: string')": 1,
    "((null == 'A: Identifier') ? '' : 'B: CallExpression')": 1,
    "('A: Identifier' && ('B: Identifier' || ('C: Identifier' === 'D: Identifier')))": 1,
    "('A: Identifier' || ('B: Identifier' === 'C: Identifier'))": 1,
    "(!('A: Identifier') || !('B: AssignmentExpression'))": 1,
    "!('A: AssignmentExpression')": 1,
    "('A: CallExpression' + 1)": 1,
    "((null == 'A: Identifier') ? 'B: Identifier' : 'C: MemberExpression')": 1,
    "('A: Identifier' || 0)": 1,
    "('A: Identifier' && ('B: Identifier' >= 'C: MemberExpression'))": 1,
    "('A: Identifier' >= 'B: MemberExpression')": 1,
    "(('A: Identifier' - 'B: Identifier') / ('C: Identifier' || 1))": 1,
    "('A: Identifier' || 1)": 1,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + 'D: MemberExpression')": 1,
    "('A: CallExpression' < 'B: number')": 1,
    "(('A: Identifier' / 'B: Identifier') - 1)": 1,
    "('A: Identifier' / 'B: Identifier')": 1,
    "('A: MemberExpression' || 'B: FunctionExpression')": 1,
    "!(!('A: CallExpression'))": 1,
    "(('A: MemberExpression' + 'B: string') + 'C: Identifier')": 1,
    "(('A: string' + +('B: CallExpression')) + 'C: string')": 1,
    "('A: string' + +('B: CallExpression'))": 1,
    "('A: string' + ('B: Identifier' + 1))": 1,
    "('A: string' + ('B: Identifier' + 'C: number'))": 1,
    "(('A: Identifier' !== 1) && ('B: Identifier' !== 'C: string'))": 1,
    "('A: Identifier' !== 1)": 1,
    "('A: Identifier' - 'B: number')": 1,
    "((('A: BinaryExpression' + 'B: string') + 'C: MemberExpression') + 'D: string')": 1,
    "((('A: string' + 'B: Identifier') + 'C: string') + 'D: MemberExpression')": 1,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: CallExpression') + 'D: Identifier')": 1,
    "((('A: Identifier' + 'B: CallExpression') + 'C: Identifier') + 'D: CallExpression')": 1,
    "(('A: Identifier' + 'B: CallExpression') + 'C: Identifier')": 1,
    "('A: Identifier' + 'B: CallExpression')": 1,
    "('A: CallExpression' && ('B: Identifier' !== 'C: Identifier'))": 1,
    "('A: Identifier' ? '' : 'B: Identifier')": 1,
    "(('A: MemberExpression' === 'function') || ('B: MemberExpression' === 'C: string'))": 1,
    "((('A: BinaryExpression' && 'B: MemberExpression') && 'C: MemberExpression') && 'D: MemberExpression')": 1,
    "((('A: MemberExpression' === 'B: string') && 'C: MemberExpression') && 'D: MemberExpression')": 1,
    "(('A: MemberExpression' === 'B: string') && 'C: MemberExpression')": 1,
    "('function' === 'A: CallExpression')": 1,
    "('A: MemberExpression' === true)": 1,
    "('A: MemberExpression' && ('B: CallExpression' === -(1)))": 1,
    "((('A: BinaryExpression' + 'B: string') + 'C: string') + 'D: Identifier')": 1,
    "((('A: string' + 'B: LogicalExpression') + 'C: string') + 'D: string')": 1,
    "(('A: string' + ('B: MemberExpression' || '')) + 'C: string')": 1,
    "('A: string' + ('B: MemberExpression' || ''))": 1,
    "((('A: LogicalExpression' + 'B: string') + ('C: MemberExpression' ? 'D: BinaryExpression' : '')) + 'E: string')": 1,
    "((('A: MemberExpression' || '') + 'B: string') + ('C: MemberExpression' ? ('D: string' + 'E: CallExpression') : ''))": 1,
    "(('A: MemberExpression' || '') + 'B: string')": 1,
    "('A: MemberExpression' ? ('B: string' + 'C: CallExpression') : '')": 1,
    "(('A: MemberExpression' && ('B: MemberExpression' !== 'null')) ? 'C: CallExpression' : 'D: MemberExpression')": 1,
    "('A: MemberExpression' && ('B: MemberExpression' !== 'null'))": 1,
    "('A: MemberExpression' !== 'null')": 1,
    "((false === 'A: Identifier') ? false : true)": 1,
    "('A: Identifier' || 'B: string')": 1,
    "('A: MemberExpression' || ('B: MemberExpression' === 'C: string'))": 1,
    "(('A: MemberExpression' === 'B: string') || ('C: MemberExpression' === 'function'))": 1,
    "('A: Identifier' !== '')": 1,
    "(('A: MemberExpression' !== 'B: string') && !('C: CallExpression'))": 1,
    "('A: MemberExpression' ? 'B: CallExpression' : 'C: string')": 1,
    "('A: Identifier' || '')": 1,
    "(('A: MemberExpression' || 'B: MemberExpression') || 'C: ArrayExpression')": 1,
    "('A: Identifier' + 'B: TemplateLiteral')": 1,
    "(('A: MemberExpression' && ('B: MemberExpression' !== false)) ? true : false)": 1,
    "('A: MemberExpression' && ('B: MemberExpression' !== false))": 1,
    "('A: MemberExpression' !== false)": 1,
    "('A: MemberExpression' ? 'B: MemberExpression' : 'C: string')": 1,
    "((!('A: Identifier') || !('B: Identifier')) || !('C: Identifier'))": 1,
    "(!('A: Identifier') || !('B: Identifier'))": 1,
    "((1 === 'A: Identifier') || ('B: number' === 'C: Identifier'))": 1,
    "('A: CallExpression' instanceof 'B: Identifier')": 1,
    "('A: Identifier' >= 1)": 1,
    "(('A: Identifier' < 'B: MemberExpression') ? 'C: ObjectExpression' : 'D: ObjectExpression')": 1,
    "('A: MemberExpression' == 'B: MemberExpression')": 1,
    "('A: number' - ('B: number' * 'C: Identifier'))": 1,
    "('A: Identifier' instanceof 'B: Identifier')": 1,
    "('A: number' * 'B: CallExpression')": 1,
    "(('A: number' === 'B: Identifier') ? 'C: Identifier' : ('D: Identifier' + 'E: Identifier'))": 1,
    "('A: Identifier' && ('B: Identifier' === ('C: Identifier' + 'D: Identifier')))": 1,
    "('A: Identifier' === ('B: Identifier' + 'C: Identifier'))": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: Identifier' : ('D: Identifier' + 'E: Identifier'))": 1,
    "('A: Identifier' && ('B: Identifier' === 'C: Identifier'))": 1,
    "(('A: number' === 'B: Identifier') ? 'C: string' : 'D: Identifier')": 1,
    "(('A: MemberExpression' - 1) * 'B: MemberExpression')": 1,
    "('A: MemberExpression' * -(1))": 1,
    "('A: Identifier' < 1)": 1,
    "(('A: Identifier' <= 'B: Identifier') && ('C: Identifier' > 0))": 1,
    "('A: number' * ('B: number' - 'C: Identifier'))": 1
}