Found 6056 patterns and 1227 unique patterns, 2 files could not be parsed:
{
    "typeof('A: Identifier')": 257,
    "!('A: Identifier')": 146,
    "void(0)": 142,
    "!('A: MemberExpression')": 132,
    "!('A: CallExpression')": 123,
    "('A: Identifier' === 'B: Identifier')": 117,
    "('A: string' + 'B: Identifier')": 116,
    "('A: Identifier' instanceof 'B: Identifier')": 111,
    "('A: Identifier' < 'B: Identifier')": 105,
    "typeof('A: MemberExpression')": 83,
    "('A: ThisExpression' === 'B: Identifier')": 79,
    "('A: Identifier' < 'B: MemberExpression')": 68,
    "('A: Identifier' + 'B: Identifier')": 66,
    "('A: string' + 'B: CallExpression')": 65,
    "('A: MemberExpression' - 1)": 64,
    "('A: MemberExpression' === 'B: number')": 62,
    "(typeof('A: Identifier') === \"function\")": 62,
    "-(1)": 59,
    "('A: MemberExpression' === 'B: string')": 59,
    "('A: MemberExpression' === 'B: Identifier')": 58,
    "((('A: BinaryExpression' + 'B: string') + 'C: Identifier') + 'D: string')": 57,
    "('A: number' === 'B: Identifier')": 56,
    "('A: Identifier' - 1)": 54,
    "('A: Identifier' + 1)": 54,
    "(('A: string' + 'B: Identifier') + 'C: string')": 51,
    "('A: Identifier' !== 'B: Identifier')": 45,
    "('A: Identifier' + 'B: string')": 43,
    "('A: Identifier' ? 'B: MemberExpression' : null)": 41,
    "('A: number' * 'B: Identifier')": 41,
    "('A: string' + 'B: string')": 40,
    "('A: Identifier' instanceof 'B: MemberExpression')": 37,
    "!(!('A: MemberExpression'))": 36,
    "(0 === 'A: Identifier')": 35,
    "((('A: BinaryExpression' + 'B: string') + 'C: string') + 'D: string')": 35,
    "(1 === 'A: Identifier')": 34,
    "(typeof('A: MemberExpression') === \"function\")": 34,
    "('A: string' == 'B: Identifier')": 34,
    "(('A: string' + 'B: CallExpression') + 'C: string')": 33,
    "('A: MemberExpression' || 'B: MemberExpression')": 32,
    "delete('A: MemberExpression')": 32,
    "(typeof('A: Identifier') !== \"undefined\")": 30,
    "('A: string' == 'B: CallExpression')": 29,
    "('A: MemberExpression' === 1)": 28,
    "-('A: number')": 28,
    "('A: Identifier' > 0)": 28,
    "((('A: BinaryExpression' + 'B: string') + 'C: CallExpression') + 'D: string')": 27,
    "(typeof('A: Identifier') !== \"function\")": 27,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + 'D: Identifier')": 26,
    "('A: CallExpression' + 'B: string')": 26,
    "(typeof('A: Identifier') === \"number\")": 26,
    "('A: string' + 'B: MemberExpression')": 24,
    "('A: MemberExpression' !== 'B: Identifier')": 23,
    "('A: Identifier' < 0)": 21,
    "('A: Identifier' >= 0)": 21,
    "('A: Identifier' + 'B: number')": 21,
    "(null === 'A: Identifier')": 20,
    "('A: MemberExpression' & 'B: Identifier')": 19,
    "('A: Identifier' + 'B: CallExpression')": 19,
    "('A: Identifier' < 'B: number')": 18,
    "(void(0) === 'A: Identifier')": 18,
    "(1 + 1)": 18,
    "('A: number' + 1)": 18,
    "('A: Identifier' ? 'B: Identifier' : 'C: MemberExpression')": 18,
    "('A: Identifier' !== null)": 17,
    "((('A: string' + 'B: Identifier') + 'C: string') + 'D: Identifier')": 17,
    "('A: Identifier' * 'B: Identifier')": 17,
    "('A: MemberExpression' == 1)": 17,
    "('A: CallExpression' !== 'B: string')": 16,
    "((('A: BinaryExpression' + 'B: CallExpression') + 'C: string') + 'D: CallExpression')": 16,
    "(typeof('A: Identifier') === \"string\")": 16,
    "('A: MemberExpression' === 0)": 16,
    "('A: CallExpression' >= 0)": 16,
    "('A: Identifier' - 'B: Identifier')": 15,
    "('A: string' === 'B: CallExpression')": 15,
    "('A: number' | 0)": 15,
    "(('A: string' + 'B: MemberExpression') + 'C: string')": 15,
    "('A: MemberExpression' > 0)": 15,
    "('A: Identifier' - 'B: number')": 15,
    "(typeof('A: Identifier') === 'function')": 14,
    "('A: ThisExpression' !== 'B: Identifier')": 14,
    "('A: MemberExpression' * 'B: number')": 14,
    "('A: Identifier' >= 'B: number')": 14,
    "('A: MemberExpression' > 1)": 13,
    "('A: MemberExpression' === 'B: MemberExpression')": 13,
    "(('A: Identifier' + 'B: string') + 'C: Identifier')": 12,
    "('A: MemberExpression' | 'B: Identifier')": 12,
    "('A: string' in 'B: Identifier')": 12,
    "('A: MemberExpression' + 'B: string')": 12,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + 'D: string')": 12,
    "(typeof('A: MemberExpression') === \"string\")": 12,
    "('A: Identifier' in 'B: Identifier')": 12,
    "('A: Identifier' / 'B: number')": 12,
    "(('A: Identifier' + 'B: Identifier') + 'C: number')": 12,
    "('A: Identifier' && 'B: CallExpression')": 11,
    "!(('A: Identifier' instanceof 'B: Identifier'))": 11,
    "('A: Identifier' != null)": 11,
    "('A: MemberExpression' == 'B: string')": 11,
    "(typeof('A: Identifier') == \"function\")": 11,
    "('A: MemberExpression' || 0)": 11,
    "('A: CallExpression' + 'B: CallExpression')": 11,
    "('A: string' === 'B: Identifier')": 11,
    "('A: MemberExpression' || 'B: number')": 10,
    "('A: MemberExpression' && 'B: CallExpression')": 10,
    "('A: MemberExpression' instanceof 'B: Identifier')": 10,
    "('A: MemberExpression' == null)": 10,
    "('A: Identifier' && ('B: string' == 'C: CallExpression'))": 10,
    "('A: Identifier' / 'B: Identifier')": 10,
    "('A: number' <= 'B: Identifier')": 10,
    "(typeof('A: Identifier') == 'string')": 10,
    "((('A: BinaryExpression' + 'B: number') + 'C: number') + 'D: number')": 10,
    "((typeof('A: Identifier') === 'function') ? 'B: CallExpression' : 'C: CallExpression')": 9,
    "(null == 'A: Identifier')": 9,
    "('A: Identifier' === 'B: CallExpression')": 9,
    "((('A: BinaryExpression' + 'B: string') + 'C: string') + 'D: Identifier')": 9,
    "('A: Identifier' >= 'B: Identifier')": 9,
    "('A: MemberExpression' + 1)": 9,
    "(typeof('A: Identifier') === \"object\")": 9,
    "+('A: Identifier')": 9,
    "('A: MemberExpression' >>> 0)": 9,
    "(\"\" + 'A: Identifier')": 9,
    "('A: MemberExpression' == 0)": 9,
    "('A: number' === 'B: CallExpression')": 9,
    "('A: MemberExpression' & 'B: number')": 9,
    "('A: Identifier' <= 'B: Identifier')": 8,
    "('A: MemberExpression' !== 'B: string')": 8,
    "('A: MemberExpression' != null)": 8,
    "~('A: Identifier')": 8,
    "(('A: MemberExpression' & 'B: Identifier') !== 0)": 8,
    "((('A: BinaryExpression' + 'B: string') + 'C: MemberExpression') + 'D: string')": 8,
    "('A: CallExpression' + 'B: Identifier')": 8,
    "(false === 'A: Identifier')": 8,
    "(('A: Identifier' + 'B: Identifier') + 'C: Identifier')": 8,
    "('A: Identifier' !== void(0))": 8,
    "(('A: Identifier' && ('B: string' == 'C: CallExpression')) ? 'D: CallExpression' : 'E: Identifier')": 8,
    "('A: Identifier' % 'B: number')": 8,
    "(('A: string' + 'B: string') + 'C: string')": 8,
    "(('A: number' <= 'B: Identifier') && ('C: number' >= 'D: Identifier'))": 8,
    "('A: number' >= 'B: Identifier')": 8,
    "('A: Identifier' && 'B: MemberExpression')": 7,
    "('A: Identifier' > 'B: number')": 7,
    "('A: Identifier' >= 1)": 7,
    "(('A: CallExpression' + 'B: string') + 'C: CallExpression')": 7,
    "((('A: Identifier' + 'B: string') + 'C: Identifier') + 'D: string')": 7,
    "('A: MemberExpression' - 'B: number')": 7,
    "(0 === 'A: CallExpression')": 7,
    "('A: Identifier' >= 'B: MemberExpression')": 7,
    "(typeof('A: Identifier') !== \"object\")": 7,
    "(1 === 'A: CallExpression')": 7,
    "('A: MemberExpression' == 'B: Identifier')": 7,
    "('A: CallExpression' != 'B: string')": 7,
    "('A: number' == 'B: Identifier')": 7,
    "('A: MemberExpression' ? 'B: string' : 'C: string')": 7,
    "(('A: MemberExpression' & 'B: number') > 0)": 7,
    "(((1 + 'A: number') + 'B: number') + 'C: number')": 7,
    "((1 + 'A: number') + 'B: number')": 7,
    "(1 + 'A: number')": 7,
    "('A: MemberExpression' + 'B: MemberExpression')": 6,
    "(true === 'A: Identifier')": 6,
    "('A: CallExpression' > 0)": 6,
    "('A: MemberExpression' & ~('B: Identifier'))": 6,
    "('A: Identifier' | 'B: Identifier')": 6,
    "!(!('A: Identifier'))": 6,
    "('A: MemberExpression' || 'B: string')": 6,
    "('A: MemberExpression' && 'B: MemberExpression')": 6,
    "('A: Identifier' + \"\")": 6,
    "(('A: Identifier' * 'B: Identifier') - 'C: Identifier')": 6,
    "('A: Identifier' + 0)": 6,
    "('A: CallExpression' && 'B: CallExpression')": 6,
    "(typeof('A: Identifier') != \"function\")": 6,
    "('A: CallExpression' === -(1))": 6,
    "('A: MemberExpression' !== 'B: number')": 6,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: string' == 'D: CallExpression')) && ('E: string' == 'F: CallExpression'))": 6,
    "(typeof('A: Identifier') == \"object\")": 6,
    "('A: number' == 'B: CallExpression')": 6,
    "('A: string' != 'B: Identifier')": 6,
    "('A: MemberExpression' !== 'B: MemberExpression')": 6,
    "(('A: MemberExpression' + 'B: string') + 'C: MemberExpression')": 6,
    "('A: number' * 'B: number')": 6,
    "('A: Identifier' < 'B: CallExpression')": 6,
    "('A: Identifier' + ('B: MemberExpression' * 'C: number'))": 6,
    "('A: MemberExpression' || 'B: FunctionExpression')": 5,
    "((('A: CallExpression' + 'B: string') + 'C: CallExpression') + 'D: string')": 5,
    "((('A: string' + 'B: CallExpression') + 'C: string') + 'D: CallExpression')": 5,
    "(typeof('A: MemberExpression') === \"number\")": 5,
    "('A: Identifier' || 'B: CallExpression')": 5,
    "('A: Identifier' || 'B: Identifier')": 5,
    "('A: Identifier' & 'B: Identifier')": 5,
    "('A: MemberExpression' < 'B: Identifier')": 5,
    "(typeof('A: MemberExpression') !== \"undefined\")": 5,
    "('A: Identifier' ? 'B: string' : 'C: string')": 5,
    "('A: MemberExpression' + \"\")": 5,
    "(('A: string' + 'B: Identifier') + 'C: CallExpression')": 5,
    "('A: MemberExpression' !== null)": 5,
    "(('A: Identifier' instanceof 'B: Identifier') && 'C: CallExpression')": 5,
    "('A: Identifier' <= 0)": 5,
    "((('A: Identifier' - 'B: number') + 'C: Identifier') / 'D: number')": 5,
    "(('A: Identifier' - 'B: number') + 'C: Identifier')": 5,
    "-('A: Identifier')": 5,
    "!(0)": 5,
    "!(1)": 5,
    "((typeof('A: Identifier') == \"object\") && 'B: Identifier')": 5,
    "('A: Identifier' ? 'B: CallExpression' : 'C: MemberExpression')": 5,
    "('A: Identifier' == 'B: Identifier')": 5,
    "(('A: CallExpression' + 'B: CallExpression') + 'C: CallExpression')": 5,
    "('A: Identifier' !== 'B: number')": 5,
    "(0 === ('A: Identifier' % 'B: number'))": 5,
    "('A: UpdateExpression' > 'B: number')": 5,
    "('A: CallExpression' <= 'B: Identifier')": 4,
    "('A: Identifier' ? 'B: Identifier' : 'C: Identifier')": 4,
    "('A: MemberExpression' - 'B: Identifier')": 4,
    "('A: MemberExpression' > 'B: Identifier')": 4,
    "((('A: BinaryExpression' + 'B: CallExpression') + 'C: string') + 'D: Identifier')": 4,
    "('A: MemberExpression' > 'B: number')": 4,
    "+('A: ThisExpression')": 4,
    "('A: CallExpression' || 'B: CallExpression')": 4,
    "('A: CallExpression' != 0)": 4,
    "(('A: MemberExpression' & 'B: Identifier') > 0)": 4,
    "('A: Identifier' !== 0)": 4,
    "('A: MemberExpression' <= 'B: Identifier')": 4,
    "('A: Identifier' < ('B: Identifier' - 1))": 4,
    "((typeof('A: Identifier') === \"object\") || (typeof('B: Identifier') === \"function\"))": 4,
    "('A: ThisExpression' instanceof 'B: Identifier')": 4,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: CallExpression')": 4,
    "('A: MemberExpression' === null)": 4,
    "('A: string' + ('B: Identifier' + 1))": 4,
    "((('A: Identifier' * 'B: Identifier') - 'C: Identifier') + 'D: Identifier')": 4,
    "((typeof('A: Identifier') !== \"undefined\") && 'B: MemberExpression')": 4,
    "((('A: string' + 'B: MemberExpression') + 'C: string') + 'D: CallExpression')": 4,
    "('A: MemberExpression' / 'B: number')": 4,
    "('A: MemberExpression' + 'B: Identifier')": 4,
    "('A: MemberExpression' > 'B: CallExpression')": 4,
    "('A: Identifier' | 0)": 4,
    "('A: Identifier' ? 'B: CallExpression' : 'C: CallExpression')": 4,
    "('A: Identifier' ? 'B: MemberExpression' : 'C: Identifier')": 4,
    "((('A: UnaryExpression' != \"object\") && ('B: UnaryExpression' != \"function\")) || (null === 'C: Identifier'))": 4,
    "((typeof('A: Identifier') != \"object\") && (typeof('B: Identifier') != \"function\"))": 4,
    "(typeof('A: Identifier') != \"object\")": 4,
    "(('A: Identifier' >= 'B: number') ? 'C: NewExpression' : (('D: Identifier' >= 'E: number') ? 'F: NewExpression' : ('G: BinaryExpression' ? 'H: NewExpression' : 'I: ConditionalExpression')))": 4,
    "('A: number' * 'B: CallExpression')": 4,
    "('A: Identifier' % 'B: Identifier')": 4,
    "('A: MemberExpression' ? 'B: string' : \"\")": 4,
    "(1 / 0)": 4,
    "('A: Identifier' || 'B: AssignmentExpression')": 4,
    "('A: number' != 'B: Identifier')": 4,
    "(('A: string' == 'B: Identifier') && 'C: CallExpression')": 4,
    "((+('A: Identifier') || 0) | 0)": 4,
    "(+('A: Identifier') || 0)": 4,
    "('A: Identifier' || 'B: ObjectExpression')": 4,
    "(('A: CallExpression' + 'B: string') + 'C: Identifier')": 4,
    "(('A: MemberExpression' * 'B: number') | 0)": 4,
    "~('A: CallExpression')": 4,
    "('A: MemberExpression' - 'B: MemberExpression')": 4,
    "('A: string' + ('B: Identifier' ? ('C: string' + 'D: Identifier') : ''))": 4,
    "('A: Identifier' ? ('B: string' + 'C: Identifier') : '')": 4,
    "('A: CallExpression' > -(1))": 4,
    "('A: MemberExpression' < 'B: number')": 4,
    "('A: CallExpression' < ('B: number' * 'C: Identifier'))": 4,
    "('A: MemberExpression' !== void(0))": 4,
    "('A: MemberExpression' | 'B: number')": 4,
    "((typeof('A: Identifier') !== \"undefined\") && (typeof('B: MemberExpression') === \"string\"))": 4,
    "(('A: MemberExpression' === 'B: string') || ('C: MemberExpression' === 'D: string'))": 4,
    "(('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: string'))": 4,
    "(typeof('A: MemberExpression') !== \"boolean\")": 4,
    "(typeof('A: MemberExpression') === \"boolean\")": 4,
    "('A: MemberExpression' && 'B: Identifier')": 3,
    "('A: Identifier' - 'B: MemberExpression')": 3,
    "('A: Identifier' != 'B: Identifier')": 3,
    "(('A: Identifier' + 'B: string') + 'C: MemberExpression')": 3,
    "('A: CallExpression' - 'B: CallExpression')": 3,
    "('A: Identifier' === ('B: MemberExpression' & 'C: Identifier'))": 3,
    "('A: Identifier' + 'B: MemberExpression')": 3,
    "('A: MemberExpression' === 'B: ThisExpression')": 3,
    "('A: CallExpression' && !('B: CallExpression'))": 3,
    "!(!(('A: BinaryExpression' && 'B: LogicalExpression')))": 3,
    "('A: MemberExpression' && !('B: MemberExpression'))": 3,
    "(('A: Identifier' & 'B: Identifier') !== 0)": 3,
    "(('A: MemberExpression' + 'B: string') + 'C: CallExpression')": 3,
    "((('A: string' + 'B: MemberExpression') + 'C: string') + 'D: MemberExpression')": 3,
    "(('A: Identifier' + 'B: string') + 'C: CallExpression')": 3,
    "('A: Identifier' && (typeof('B: MemberExpression') === \"function\"))": 3,
    "('A: Identifier' <= 'B: MemberExpression')": 3,
    "('A: MemberExpression' === true)": 3,
    "(typeof('A: Identifier') === \"boolean\")": 3,
    "('A: Identifier' > 1)": 3,
    "('A: CallExpression' && ('B: CallExpression' !== 'C: string'))": 3,
    "('A: CallExpression' - 1)": 3,
    "(typeof('A: Identifier') === \"undefined\")": 3,
    "(typeof('A: Identifier') == \"undefined\")": 3,
    "(!('A: MemberExpression') || 'B: Identifier')": 3,
    "((void(0) === 'A: Identifier') ? 0 : 'B: Identifier')": 3,
    "((('A: string' + 'B: string') + 'C: string') + 'D: string')": 3,
    "('A: MemberExpression' || 1)": 3,
    "('A: Identifier' > -(1))": 3,
    "('A: number' - 'B: Identifier')": 3,
    "('A: MemberExpression' < 'B: MemberExpression')": 3,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: number' == 'D: CallExpression')) && ('E: number' == 'F: CallExpression'))": 3,
    "('A: MemberExpression' || 'B: Identifier')": 3,
    "('A: Identifier' && ('B: string' == 'C: Identifier'))": 3,
    "('A: Identifier' ? 'B: CallExpression' : 'C: Identifier')": 3,
    "('A: CallExpression' % 'B: number')": 3,
    "(('A: Identifier' < 'B: Identifier') && 'C: SequenceExpression')": 3,
    "('A: MemberExpression' || 'B: CallExpression')": 3,
    "('A: MemberExpression' <= 'B: number')": 3,
    "((('A: MemberExpression' + 'B: string') + 'C: MemberExpression') + 'D: string')": 3,
    "('A: MemberExpression' ? 'B: CallExpression' : 'C: CallExpression')": 3,
    "(0 == ('A: UpdateExpression' % 'B: Identifier'))": 3,
    "('A: UpdateExpression' % 'B: Identifier')": 3,
    "('A: number' * ('B: MemberExpression' / 'C: MemberExpression'))": 3,
    "('A: MemberExpression' / 'B: MemberExpression')": 3,
    "('A: MemberExpression' || 'B: ObjectExpression')": 3,
    "(('A: number' * 'B: CallExpression') + 'C: number')": 3,
    "('A: number' * ('B: number' * 'C: number'))": 3,
    "('A: Identifier' || 'B: ArrayExpression')": 3,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + 'D: Identifier')": 3,
    "(!('A: Identifier') && 'B: CallExpression')": 3,
    "(('A: Identifier' + 'B: number') - 'C: number')": 3,
    "((typeof('A: Identifier') === \"function\") ? 'B: Identifier' : void(0))": 3,
    "(('A: Identifier' - 'B: number') + 'C: number')": 3,
    "(('A: Identifier' !== 'B: Identifier') || (('C: Identifier' instanceof 'D: Identifier') && 'E: CallExpression'))": 3,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: string')": 3,
    "('A: MemberExpression' !== 1)": 3,
    "((typeof('A: MemberExpression') !== \"boolean\") ? true : 'B: MemberExpression')": 3,
    "((typeof('A: MemberExpression') === \"boolean\") ? 'B: MemberExpression' : true)": 3,
    "('A: Identifier' && ('B: CallExpression' <= 'C: Identifier'))": 2,
    "('A: Identifier' !== 'B: CallExpression')": 2,
    "(!('A: MemberExpression') || ('B: MemberExpression' === 'C: Identifier'))": 2,
    "!((('A: Identifier' >= 1) && ('B: Identifier' <= 'C: Identifier')))": 2,
    "(('A: Identifier' >= 1) && ('B: Identifier' <= 'C: Identifier'))": 2,
    "(false === 'A: CallExpression')": 2,
    "('A: CallExpression' - 'B: Identifier')": 2,
    "((('A: string' + 'B: Identifier') + 'C: string') + 'D: CallExpression')": 2,
    "((null == 'A: Identifier') || !('B: CallExpression'))": 2,
    "(('A: Identifier' | 'B: Identifier') | 'C: Identifier')": 2,
    "(1 << 'A: number')": 2,
    "('A: Identifier' && ('B: MemberExpression' == null))": 2,
    "!((('A: CallExpression' != 0) && ('B: Identifier' || 'C: CallExpression')))": 2,
    "(('A: CallExpression' != 0) && ('B: Identifier' || 'C: CallExpression'))": 2,
    "('A: CallExpression' && !('B: MemberExpression'))": 2,
    "(!('A: MemberExpression') && 'B: CallExpression')": 2,
    "(('A: string' in 'B: Identifier') && 'C: MemberExpression')": 2,
    "(!('A: MemberExpression') && 'B: MemberExpression')": 2,
    "((('A: Identifier' & 'B: Identifier') !== 0) && 'C: CallExpression')": 2,
    "(('A: Identifier' !== 'B: Identifier') && 'C: CallExpression')": 2,
    "(('A: Identifier' === 'B: Identifier') || 'C: CallExpression')": 2,
    "('A: Identifier' && !('B: Identifier'))": 2,
    "('A: MemberExpression' != 'B: string')": 2,
    "('A: MemberExpression' || \"\")": 2,
    "(('A: MemberExpression' !== 'B: Identifier') && ('C: MemberExpression' !== 'D: Identifier'))": 2,
    "((typeof('A: MemberExpression') === \"number\") && (typeof('B: MemberExpression') === \"function\"))": 2,
    "((typeof('A: Identifier') !== \"undefined\") && (typeof('B: MemberExpression') !== \"undefined\"))": 2,
    "(('A: Identifier' + 'B: Identifier') + 'C: string')": 2,
    "('A: MemberExpression' <= 1)": 2,
    "!(('A: ThisExpression' instanceof 'B: Identifier'))": 2,
    "(('A: number' * 'B: Identifier') + 1)": 2,
    "((('A: string' + 'B: Identifier') + 'C: string') + 'D: string')": 2,
    "(-(1) * 'A: Identifier')": 2,
    "('A: MemberExpression' >= 'B: Identifier')": 2,
    "((typeof('A: Identifier') === \"object\") && ('B: Identifier' !== null))": 2,
    "(typeof('A: MemberExpression') !== \"number\")": 2,
    "(('A: Identifier' instanceof 'B: Identifier') && ('C: CallExpression' === 'D: MemberExpression'))": 2,
    "('A: CallExpression' === 'B: MemberExpression')": 2,
    "('A: MemberExpression' ? 'B: Identifier' : 'C: Identifier')": 2,
    "(('A: string' + 'B: string') + 'C: CallExpression')": 2,
    "('A: CallExpression' && ('B: MemberExpression' > 0))": 2,
    "('A: Identifier' ? 'B: Identifier' : 'C: NewExpression')": 2,
    "(('A: Identifier' === 'B: Identifier') && 'C: CallExpression')": 2,
    "(!('A: Identifier') && !('B: Identifier'))": 2,
    "('A: Identifier' !== 'B: string')": 2,
    "(('A: Identifier' > 0) ? 'B: string' : \"\")": 2,
    "(typeof('A: Identifier') !== \"string\")": 2,
    "('A: CallExpression' + 'B: number')": 2,
    "('A: Identifier' & 'B: number')": 2,
    "((('A: string' + 'B: MemberExpression') + 'C: string') + 'D: Identifier')": 2,
    "(('A: Identifier' | 0) !== 'B: Identifier')": 2,
    "(0 === ('A: MemberExpression' & 'B: Identifier'))": 2,
    "(('A: Identifier' != null) && (typeof('B: MemberExpression') === \"function\"))": 2,
    "((typeof('A: Identifier') == \"undefined\") || 'B: CallExpression')": 2,
    "(!('A: Identifier') || !('B: Identifier'))": 2,
    "(0 == 'A: Identifier')": 2,
    "('A: UpdateExpression' < 'B: Identifier')": 2,
    "(!('A: Identifier') && ('B: MemberExpression' == 1))": 2,
    "('A: MemberExpression' >= 'B: number')": 2,
    "('A: Identifier' in 'B: ThisExpression')": 2,
    "(!('A: MemberExpression') || ('B: CallExpression' != -(1)))": 2,
    "('A: CallExpression' != -(1))": 2,
    "(('A: Identifier' && ('B: string' == 'C: CallExpression')) ? 'D: CallExpression' : 'E: CallExpression')": 2,
    "(('A: Identifier' in 'B: Identifier') && ('C: MemberExpression' === 'D: Identifier'))": 2,
    "('A: Identifier' - 'B: CallExpression')": 2,
    "((('A: Identifier' % 'B: number') + 'C: number') % 'D: number')": 2,
    "(('A: Identifier' % 'B: number') + 'C: number')": 2,
    "(0 <= 'A: Identifier')": 2,
    "('A: Identifier' <= 'B: number')": 2,
    "((('A: Identifier' + 'B: string') + 'C: CallExpression') + 'D: string')": 2,
    "('A: CallExpression' !== -(1))": 2,
    "(1 == 'A: Identifier')": 2,
    "('A: MemberExpression' + 'B: CallExpression')": 2,
    "('A: number' * ('B: Identifier' - 'C: number'))": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' < 'D: number')) && ('E: Identifier' > -(1)))": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' < 'D: number')) && ('E: Identifier' < 'F: number'))": 2,
    "('A: UpdateExpression' >= 0)": 2,
    "('A: Identifier' * 'B: CallExpression')": 2,
    "('A: MemberExpression' === void(0))": 2,
    "((void(0) === 'A: Identifier') && (0 === 'B: Identifier'))": 2,
    "('A: Identifier' > 'B: Identifier')": 2,
    "('A: Identifier' < ('B: MemberExpression' - 'C: number'))": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: string' === 'D: CallExpression')) && ('E: string' == 'F: CallExpression'))": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' === 'D: CallExpression')) && ('E: Identifier' === 'F: CallExpression'))": 2,
    "(\"null\" == 'A: CallExpression')": 2,
    "(1 !== 'A: CallExpression')": 2,
    "(('A: Identifier' && ('B: string' == 'C: Identifier')) || !('D: CallExpression'))": 2,
    "('A: Identifier' || 0)": 2,
    "('A: number' < 'B: Identifier')": 2,
    "('A: number' > 'B: Identifier')": 2,
    "(typeof('A: MemberExpression') == \"function\")": 2,
    "(('A: Identifier' > ('B: UnaryExpression' / 0)) && ('C: Identifier' < (1 / 0)))": 2,
    "('A: Identifier' > (-(1) / 0))": 2,
    "(-(1) / 0)": 2,
    "('A: Identifier' < (1 / 0))": 2,
    "(0 > 'A: Identifier')": 2,
    "('A: MemberExpression' ? ('B: Identifier' ? ('C: BinaryExpression' + 'D: string') : ('E: BinaryExpression' + 'F: string')) : 'G: string')": 2,
    "('A: Identifier' ? (('B: BinaryExpression' + 'C: Identifier') + 'D: string') : (('E: string' + 'F: CallExpression') + 'G: string'))": 2,
    "((('A: string' + 'B: Identifier') + 'C: CallExpression') + 'D: string')": 2,
    "('A: string' == 'B: AssignmentExpression')": 2,
    "(('A: number' == 'B: Identifier') && 'C: SequenceExpression')": 2,
    "(('A: Identifier' == 'B: Identifier') && 'C: CallExpression')": 2,
    "(typeof('A: Identifier') == \"string\")": 2,
    "('A: string' == ('B: Identifier' ? 'C: CallExpression' : 'D: MemberExpression'))": 2,
    "('A: Identifier' && (('B: string' == 'C: Identifier') ? 'D: SequenceExpression' : 'E: CallExpression'))": 2,
    "(('A: string' == 'B: Identifier') ? 'C: SequenceExpression' : 'D: CallExpression')": 2,
    "('A: string' != 'B: CallExpression')": 2,
    "((typeof('A: Identifier') === \"function\") && 'B: MemberExpression')": 2,
    "('A: Identifier' >= ('B: MemberExpression' + 'C: MemberExpression'))": 2,
    "((('A: MemberExpression' + 1) >= 'B: Identifier') && (('C: Identifier' + 1) >= 'D: Identifier'))": 2,
    "(('A: MemberExpression' + 1) >= 'B: Identifier')": 2,
    "(('A: Identifier' + 1) >= 'B: Identifier')": 2,
    "(('A: Identifier' + 1) < 'B: Identifier')": 2,
    "(('A: string' + 'B: Identifier') + (('C: UnaryExpression' === 'undefined') ? '' : ('D: string' + 'E: Identifier')))": 2,
    "((typeof('A: Identifier') === 'undefined') ? '' : ('B: string' + 'C: Identifier'))": 2,
    "(typeof('A: Identifier') === 'undefined')": 2,
    "('A: Identifier' === ('B: MemberExpression' - 'C: number'))": 2,
    "((('A: BinaryExpression' + 'B: string') + ('C: BinaryExpression' + 'D: Identifier')) + 'E: string')": 2,
    "(('A: Identifier' - 'B: Identifier') + 'C: Identifier')": 2,
    "(typeof('A: Identifier') !== 'undefined')": 2,
    "('A: MemberExpression' && ('B: MemberExpression' === 'C: Identifier'))": 2,
    "(typeof('A: Identifier') == 'function')": 2,
    "(typeof('A: MemberExpression') === 'function')": 2,
    "('A: Identifier' || 'B: string')": 2,
    "('A: MemberExpression' || 'B: ArrayExpression')": 2,
    "('A: MemberExpression' && ('B: Identifier' != 'C: Identifier'))": 2,
    "((('A: CallExpression' + 'B: string') + 'C: Identifier') + 'D: string')": 2,
    "('A: MemberExpression' ? 'B: MemberExpression' : 'C: MemberExpression')": 2,
    "('A: MemberExpression' || '')": 2,
    "('A: CallExpression' + 'B: MemberExpression')": 2,
    "('A: CallExpression' / 'B: number')": 2,
    "('A: NewExpression' - 'B: MemberExpression')": 2,
    "('A: CallExpression' ? '' : 'B: string')": 2,
    "!(~('A: CallExpression'))": 2,
    "(('A: MemberExpression' + 'B: string') + 'C: Identifier')": 2,
    "(('A: string' + ('B: Identifier' + 1)) + 'C: string')": 2,
    "('A: Identifier' + ('B: number' * 'C: Identifier'))": 2,
    "(('A: MemberExpression' / 'B: number') || 0)": 2,
    "(('A: CallExpression' + 'B: string') + 'C: MemberExpression')": 2,
    "('A: Identifier' || 'B: NewExpression')": 2,
    "(typeof('A: Identifier') === 'object')": 2,
    "('A: MemberExpression' !== true)": 2,
    "(('A: ThisExpression' === 'B: Identifier') || ('C: ThisExpression' === 'D: Identifier'))": 2,
    "('A: UpdateExpression' === 'B: Identifier')": 2,
    "('A: CallExpression' > ('B: number' * 'C: Identifier'))": 2,
    "!(('A: Identifier' instanceof 'B: MemberExpression'))": 2,
    "(('A: MemberExpression' <= 'B: Identifier') && ('C: Identifier' <= 'D: MemberExpression'))": 2,
    "((('A: string' + 'B: CallExpression') + 'C: Identifier') + 'D: string')": 2,
    "(('A: string' + 'B: CallExpression') + 'C: Identifier')": 2,
    "((('A: BinaryExpression' + 'B: string') + \"\") + 'C: string')": 2,
    "(typeof('A: MemberExpression') === \"undefined\")": 2,
    "((typeof('A: Identifier') === \"number\") && ('B: MemberExpression' !== void(0)))": 2,
    "((typeof('A: Identifier') === \"function\") ? 'B: Identifier' : 'C: Identifier')": 2,
    "('A: MemberExpression' & -('B: number'))": 2,
    "(('A: Identifier' === 'B: Identifier') && !('C: Identifier'))": 2,
    "('A: Identifier' && ('B: ThisExpression' !== 'C: Identifier'))": 2,
    "('A: CallExpression' ? 'B: MemberExpression' : 'C: MemberExpression')": 2,
    "(0 + 1)": 2,
    "typeof('A: CallExpression')": 2,
    "('A: number' + 'B: MemberExpression')": 2,
    "((('A: BinaryExpression' ? 0 : 'B: Identifier') + 'C: Identifier') + 'D: number')": 2,
    "((('A: UnaryExpression' === 'B: Identifier') ? 0 : 'C: Identifier') + 'D: Identifier')": 2,
    "((('A: string' + 'B: CallExpression') + 'C: string') + 'D: MemberExpression')": 2,
    "('A: MemberExpression' ? 'B: CallExpression' : 'C: string')": 2,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + 'D: CallExpression')": 2,
    "(('A: MemberExpression' < 'B: number') ? 'C: Identifier' : 'D: MemberExpression')": 2,
    "(('A: MemberExpression' !== 1) && ('B: MemberExpression' !== 'C: number'))": 2,
    "(!(!('A: MemberExpression')) || !(!('B: MemberExpression')))": 2,
    "(('A: MemberExpression' || 'B: MemberExpression') || 'C: MemberExpression')": 1,
    "('A: MemberExpression' | 0)": 1,
    "(!('A: Identifier') || 'B: CallExpression')": 1,
    "('A: Identifier' && ('B: MemberExpression' || 'C: MemberExpression'))": 1,
    "('A: MemberExpression' === false)": 1,
    "(('A: MemberExpression' + 'B: MemberExpression') - 'C: Identifier')": 1,
    "(!('A: Identifier') || ('B: Identifier' < 0))": 1,
    "!(('A: Identifier' < 'B: Identifier'))": 1,
    "('A: Identifier' && ('B: MemberExpression' !== 'C: string'))": 1,
    "!('A: UpdateExpression')": 1,
    "((('A: Identifier' - 'B: Identifier') / 'C: number') / 'D: number')": 1,
    "(('A: Identifier' - 'B: Identifier') / 'C: number')": 1,
    "(('A: MemberExpression' != null) ? 'B: MemberExpression' : 'C: Identifier')": 1,
    "(('A: MemberExpression' != null) ? 'B: CallExpression' : 'C: Identifier')": 1,
    "((typeof('A: Identifier') === \"string\") && ('B: string' === 'C: CallExpression'))": 1,
    "(('A: string' + ('B: BinaryExpression' ? 'C: MemberExpression' : 'D: Identifier')) + 'E: string')": 1,
    "('A: string' + (('B: Identifier' instanceof 'C: Identifier') ? 'D: MemberExpression' : 'E: Identifier'))": 1,
    "(('A: Identifier' instanceof 'B: Identifier') ? 'C: MemberExpression' : 'D: Identifier')": 1,
    "(('A: Identifier' !== null) ? 'B: Identifier' : 'C: Identifier')": 1,
    "(('A: MemberExpression' === 'B: Identifier') || ('C: MemberExpression' <= 0))": 1,
    "('A: MemberExpression' <= 0)": 1,
    "(('A: Identifier' === 'B: Identifier') || (('C: Identifier' != null) && ('D: MemberExpression' instanceof 'E: Identifier')))": 1,
    "(('A: Identifier' != null) && ('B: MemberExpression' instanceof 'C: Identifier'))": 1,
    "('A: MemberExpression' != 'B: MemberExpression')": 1,
    "(0x0 | 0)": 1,
    "((('A: Identifier' | 'B: Identifier') | 'C: Identifier') | 'D: Identifier')": 1,
    "((1 << 'A: number') | 0)": 1,
    "!((('A: CallExpression' != 0) && ('B: LogicalExpression' || 'C: BinaryExpression')))": 1,
    "(('A: CallExpression' != 0) && (('B: Identifier' || 'C: CallExpression') || ('D: string' === 'E: CallExpression')))": 1,
    "(('A: Identifier' || 'B: CallExpression') || ('C: string' === 'D: CallExpression'))": 1,
    "(('A: CallExpression' != 0) && ('B: Identifier' || !('C: UnaryExpression')))": 1,
    "('A: Identifier' || !(!('B: CallExpression')))": 1,
    "!(!('A: CallExpression'))": 1,
    "(('A: MemberExpression' & ~('B: Identifier')) | 'C: Identifier')": 1,
    "('A: Identifier' || 'B: ThisExpression')": 1,
    "((('A: string' in 'B: Identifier') && 'C: MemberExpression') && !('D: MemberExpression'))": 1,
    "((('A: Identifier' === 'B: Identifier') && ('C: Identifier' !== null)) && 'D: Identifier')": 1,
    "(('A: Identifier' === 'B: Identifier') && ('C: Identifier' !== null))": 1,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + 'D: MemberExpression')": 1,
    "('A: MemberExpression' && 'B: AssignmentExpression')": 1,
    "('A: Identifier' < ('B: MemberExpression' - 1))": 1,
    "(('A: MemberExpression' === 0) || (('B: BinaryExpression' < 'C: MemberExpression') && ('D: MemberExpression' === 'E: MemberExpression')))": 1,
    "((('A: Identifier' + 1) < 'B: MemberExpression') && ('C: MemberExpression' === 'D: MemberExpression'))": 1,
    "(('A: Identifier' + 1) < 'B: MemberExpression')": 1,
    "('A: Identifier' && ('B: CallExpression' !== 'C: string'))": 1,
    "(('A: Identifier' > 0) && ('B: MemberExpression' != 'C: string'))": 1,
    "((('A: UnaryExpression' === \"string\") && ('B: MemberExpression' > 0)) ? 'C: CallExpression' : 'D: ArrayExpression')": 1,
    "((typeof('A: Identifier') === \"string\") && ('B: MemberExpression' > 0))": 1,
    "(('A: MemberExpression' == 'B: string') ? 'C: Identifier' : 'D: CallExpression')": 1,
    "((typeof('A: MemberExpression') === \"function\") || (typeof('B: MemberExpression') === \"object\"))": 1,
    "(typeof('A: MemberExpression') === \"object\")": 1,
    "(!('A: CallExpression') && !('B: Identifier'))": 1,
    "(('A: string' + ('B: MemberExpression' || 'C: string')) + 'D: string')": 1,
    "('A: string' + ('B: MemberExpression' || 'C: string'))": 1,
    "(('A: Identifier' && ('B: UnaryExpression' === \"function\")) ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "((('A: LogicalExpression' || 'B: UnaryExpression') || ('C: Identifier' !== 'D: Identifier')) || ('E: Identifier' >= 'F: Identifier'))": 1,
    "((('A: LogicalExpression' || 'B: UnaryExpression') || !('C: Identifier')) || ('D: Identifier' !== 'E: Identifier'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || !('C: Identifier')) || !('D: Identifier'))": 1,
    "((('A: Identifier' < 0) || ('B: Identifier' < 0)) || !('C: Identifier'))": 1,
    "(('A: Identifier' < 0) || ('B: Identifier' < 0))": 1,
    "(('A: MemberExpression' === 'B: Identifier') && (('C: Identifier' <= 'D: MemberExpression') && ('E: MemberExpression' <= 'F: Identifier')))": 1,
    "(('A: Identifier' <= 'B: MemberExpression') && ('C: MemberExpression' <= 'D: Identifier'))": 1,
    "(('A: Identifier' === 'B: Identifier') || ('C: Identifier' instanceof 'D: Identifier'))": 1,
    "(1 + (('A: Identifier' === 'B: Identifier') ? 0 : 'C: MemberExpression'))": 1,
    "(('A: Identifier' === 'B: Identifier') ? 0 : 'C: MemberExpression')": 1,
    "(('A: Identifier' !== 'B: Identifier') && ('C: Identifier' !== 'D: Identifier'))": 1,
    "(('A: Identifier' > 0) ? 'B: MemberExpression' : 'C: ThisExpression')": 1,
    "((typeof('A: MemberExpression') === \"string\") && ('B: CallExpression' >= 0))": 1,
    "((!('A: BinaryExpression') && 'B: Identifier') && (typeof('C: MemberExpression') === \"number\"))": 1,
    "(!(('A: string' in 'B: Identifier')) && 'C: Identifier')": 1,
    "!(('A: string' in 'B: Identifier'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') && ('C: MemberExpression' !== 'D: Identifier')) && ('E: MemberExpression' !== 'F: Identifier'))": 1,
    "((('A: UnaryExpression' === \"object\") || ('B: UnaryExpression' === \"function\")) && ('C: MemberExpression' !== 'D: Identifier'))": 1,
    "(!('A: MemberExpression') && (typeof('B: MemberExpression') === \"string\"))": 1,
    "((typeof('A: Identifier') === \"string\") ? 'B: Identifier' : 'C: Identifier')": 1,
    "(('A: MemberExpression' === 'B: ThisExpression') ? 'C: string' : ('D: MemberExpression' + \"\"))": 1,
    "!(!(('A: LogicalExpression' || 'B: MemberExpression')))": 1,
    "!((('A: UnaryExpression' || 'B: MemberExpression') || 'C: MemberExpression'))": 1,
    "((!('A: Identifier') || 'B: MemberExpression') || 'C: MemberExpression')": 1,
    "(!('A: Identifier') || 'B: MemberExpression')": 1,
    "((typeof('A: Identifier') === \"function\") ? 'B: CallExpression' : 'C: Identifier')": 1,
    "('A: CallExpression' && ('B: MemberExpression' !== null))": 1,
    "((null === 'A: Identifier') || ('B: Identifier' instanceof 'C: Identifier'))": 1,
    "(('A: CallExpression' + 'B: Identifier') + 'C: CallExpression')": 1,
    "(('A: Identifier' > 0) && (typeof('B: MemberExpression') === \"function\"))": 1,
    "(('A: Identifier' <= 'B: Identifier') && 'C: Identifier')": 1,
    "(('A: Identifier' !== 'B: Identifier') ? 'C: CallExpression' : 'D: Identifier')": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: NewExpression' : null)": 1,
    "((-(1) * 'A: Identifier') - 1)": 1,
    "(('A: Identifier' >= 1) && ('B: MemberExpression' >= 'C: Identifier'))": 1,
    "(('A: Identifier' !== null) ? 'B: string' : 'C: string')": 1,
    "(('A: Identifier' + 1) * -(1))": 1,
    "(('A: MemberExpression' > 0) && ('B: MemberExpression' < 'C: Identifier'))": 1,
    "((('A: BinaryExpression' && 'B: CallExpression') && ('C: Identifier' >= 1)) ? 'D: Identifier' : 0)": 1,
    "((('A: UnaryExpression' === \"number\") && 'B: CallExpression') && ('C: Identifier' >= 1))": 1,
    "((typeof('A: Identifier') === \"number\") && 'B: CallExpression')": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "(('A: Identifier' !== 'B: Identifier') && 'C: MemberExpression')": 1,
    "('A: CallExpression' ? 'B: NewExpression' : 'C: MemberExpression')": 1,
    "('A: CallExpression' || !('B: CallExpression'))": 1,
    "(('A: MemberExpression' && 'B: MemberExpression') ? 'C: MemberExpression' : null)": 1,
    "((null == 'A: Identifier') || ('B: MemberExpression' !== 'C: Identifier'))": 1,
    "((('A: CallExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' !== \"function\")) && (typeof('D: Identifier') !== \"function\"))": 1,
    "(('A: CallExpression' && ('B: MemberExpression' > 0)) && (typeof('C: Identifier') !== \"function\"))": 1,
    "(('A: MemberExpression' > 1) ? !(!('B: MemberExpression')) : false)": 1,
    "(('A: ThisExpression' === 'B: Identifier') ? 'C: Identifier' : 'D: MemberExpression')": 1,
    "(('A: MemberExpression' & 'B: Identifier') | ('C: Identifier' & 'D: Identifier'))": 1,
    "('A: Identifier' | (('B: BinaryExpression' >> 'C: Identifier') ^ 'D: Identifier'))": 1,
    "((('A: Identifier' & 'B: Identifier') >> 'C: Identifier') ^ 'D: Identifier')": 1,
    "(('A: Identifier' & 'B: Identifier') >> 'C: Identifier')": 1,
    "(('A: MemberExpression' | 'B: Identifier') & ~('C: Identifier'))": 1,
    "((0 === 'A: Identifier') ? 'B: MemberExpression' : 'C: MemberExpression')": 1,
    "('A: Identifier' >= ('B: Identifier' - 'C: Identifier'))": 1,
    "((!('A: Identifier') && !('B: Identifier')) && 'C: CallExpression')": 1,
    "('A: Identifier' ? 'B: Identifier' : false)": 1,
    "(!('A: Identifier') || (typeof('B: MemberExpression') !== \"number\"))": 1,
    "!(('A: MemberExpression' instanceof 'B: Identifier'))": 1,
    "('A: Identifier' || ('B: Identifier' instanceof 'C: Identifier'))": 1,
    "(('A: CallExpression' && ('B: CallExpression' !== 'C: string')) && ('D: Identifier' !== 'E: string'))": 1,
    "('A: Identifier' ? 'B: CallExpression' : false)": 1,
    "(('A: Identifier' === 'B: Identifier') ? true : 'C: CallExpression')": 1,
    "((('A: BinaryExpression' && 'B: UnaryExpression') && !('C: CallExpression')) && 'D: CallExpression')": 1,
    "((('A: UnaryExpression' === \"function\") && !('B: CallExpression')) && !('C: CallExpression'))": 1,
    "((typeof('A: Identifier') === \"function\") && !('B: CallExpression'))": 1,
    "(('A: Identifier' - 1) - 'B: Identifier')": 1,
    "((typeof('A: Identifier') === \"string\") || ('B: Identifier' === 'C: Identifier'))": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: string' : 'D: string')": 1,
    "((typeof('A: Identifier') === \"string\") ? (('B: string' + 'C: Identifier') + 'D: string') : 'E: string')": 1,
    "((('A: UnaryExpression' === \"string\") && ('B: ThisExpression' !== 'C: Identifier')) ? 'D: MemberExpression' : 'E: Identifier')": 1,
    "((typeof('A: Identifier') === \"string\") && ('B: ThisExpression' !== 'C: Identifier'))": 1,
    "(('A: MemberExpression' === 'B: Identifier') ? 'C: Identifier' : 'D: MemberExpression')": 1,
    "((typeof('A: Identifier') !== \"function\") && (typeof('B: Identifier') !== \"object\"))": 1,
    "(('A: MemberExpression' !== 'B: string') && 'C: CallExpression')": 1,
    "(('A: MemberExpression' / 'B: number') | 0)": 1,
    "(('A: Identifier' !== 'B: Identifier') && ('C: Identifier' instanceof 'D: Identifier'))": 1,
    "('A: Identifier' >> 1)": 1,
    "(('A: MemberExpression' + 'B: Identifier') & ('C: MemberExpression' - 1))": 1,
    "(('A: MemberExpression' + 'B: Identifier') - 'C: number')": 1,
    "(('A: Identifier' + 0) & 'B: Identifier')": 1,
    "(('A: Identifier' + 1) & 'B: Identifier')": 1,
    "(('A: Identifier' + 'B: number') & 'C: Identifier')": 1,
    "(('A: Identifier' + 1) & ('B: MemberExpression' - 1))": 1,
    "('A: MemberExpression' << 1)": 1,
    "(('A: Identifier' + 'B: Identifier') & ('C: Identifier' - 1))": 1,
    "(('A: Identifier' === 'B: Identifier') && !(('C: Identifier' in 'D: Identifier')))": 1,
    "!(('A: Identifier' in 'B: Identifier'))": 1,
    "((('A: MemberExpression' !== 'B: Identifier') && ('C: MemberExpression' !== null)) && ('D: Identifier' !== 'E: Identifier'))": 1,
    "(('A: MemberExpression' !== 'B: Identifier') && ('C: MemberExpression' !== null))": 1,
    "(('A: MemberExpression' !== 'B: Identifier') ? 'C: MemberExpression' : 'D: MemberExpression')": 1,
    "(0 === ('A: Identifier' & 'B: number'))": 1,
    "(('A: MemberExpression' !== 'B: Identifier') ? 'C: string' : 'D: string')": 1,
    "('A: MemberExpression' && (typeof('B: Identifier') === \"undefined\"))": 1,
    "('A: MemberExpression' ? 'B: FunctionExpression' : 'C: FunctionExpression')": 1,
    "((typeof('A: Identifier') === \"function\") && (typeof('B: MemberExpression') === \"function\"))": 1,
    "((('A: UnaryExpression' !== \"undefined\") && !('B: LogicalExpression')) && ('C: string' in 'D: MemberExpression'))": 1,
    "((typeof('A: Identifier') !== \"undefined\") && !(('B: LogicalExpression' && 'C: LogicalExpression')))": 1,
    "!((('A: BinaryExpression' && 'B: MemberExpression') && ('C: MemberExpression' || 'D: MemberExpression')))": 1,
    "((('A: UnaryExpression' !== \"undefined\") && 'B: MemberExpression') && ('C: MemberExpression' || 'D: MemberExpression'))": 1,
    "('A: string' in 'B: MemberExpression')": 1,
    "((!('A: CallExpression') && 'B: Identifier') && ('C: MemberExpression' > 'D: CallExpression'))": 1,
    "(!('A: CallExpression') && 'B: Identifier')": 1,
    "('A: CallExpression' === 'B: CallExpression')": 1,
    "((1 === 'A: CallExpression') && 'B: MemberExpression')": 1,
    "(('A: MemberExpression' instanceof 'B: Identifier') || ('C: MemberExpression' == null))": 1,
    "('A: CallExpression' > 'B: CallExpression')": 1,
    "('A: MemberExpression' - 'B: CallExpression')": 1,
    "((('A: Identifier' | 0) !== 'B: Identifier') || ('C: Identifier' < 0))": 1,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: Identifier')": 1,
    "('A: Identifier' && ('B: Identifier' === 'C: Identifier'))": 1,
    "('A: CallExpression' && ('B: Identifier' instanceof 'C: Identifier'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' === \"function\")) && 'D: CallExpression')": 1,
    "((('A: Identifier' !== 'B: Identifier') && ('C: UnaryExpression' === \"function\")) && (typeof('D: MemberExpression') === \"function\"))": 1,
    "(('A: Identifier' !== 'B: Identifier') && (typeof('C: MemberExpression') === \"function\"))": 1,
    "(('A: Identifier' !== 'B: Identifier') ? 'C: CallExpression' : null)": 1,
    "((('A: Identifier' != null) && ('B: UnaryExpression' === \"function\")) && (typeof('C: MemberExpression') === \"function\"))": 1,
    "(('A: number' === 'B: Identifier') && 'C: CallExpression')": 1,
    "((typeof('A: Identifier') !== \"undefined\") ? 'B: Identifier' : (('C: UnaryExpression' !== \"undefined\") ? 'D: Identifier' : ('E: BinaryExpression' ? 'F: Identifier' : 'G: ConditionalExpression')))": 1,
    "((typeof('A: Identifier') !== \"undefined\") ? 'B: Identifier' : (('C: UnaryExpression' !== \"undefined\") ? 'D: Identifier' : ('E: BinaryExpression' ? 'F: ThisExpression' : null)))": 1,
    "((typeof('A: Identifier') !== \"undefined\") ? 'B: Identifier' : (('C: ThisExpression' !== 'D: Identifier') ? 'E: ThisExpression' : null))": 1,
    "(('A: ThisExpression' !== 'B: Identifier') ? 'C: ThisExpression' : null)": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: UnaryExpression' === \"string\")) || (typeof('D: Identifier') === \"number\"))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || (false === 'C: Identifier')) || (typeof('D: Identifier') === \"string\"))": 1,
    "(((null == 'A: Identifier') || (true === 'B: Identifier')) || (false === 'C: Identifier'))": 1,
    "((null == 'A: Identifier') || (true === 'B: Identifier'))": 1,
    "((typeof('A: Identifier') === \"function\") || (('B: UnaryExpression' === \"object\") && ('C: Identifier' !== null)))": 1,
    "((('A: MemberExpression' == null) && ('B: MemberExpression' == null)) ? 'C: MemberExpression' : 'D: Identifier')": 1,
    "(('A: MemberExpression' == null) && ('B: MemberExpression' == null))": 1,
    "('A: CallExpression' ? 'B: MemberExpression' : 'C: Identifier')": 1,
    "(('A: Identifier' != null) && !('B: CallExpression'))": 1,
    "((('A: Identifier' != null) && ('B: MemberExpression' == null)) && ('C: MemberExpression' == null))": 1,
    "(('A: Identifier' != null) && ('B: MemberExpression' == null))": 1,
    "('A: MemberExpression' && ('B: MemberExpression' > 1))": 1,
    "(('A: MemberExpression' > 0) && !(('B: BinaryExpression' && 'C: BinaryExpression')))": 1,
    "!((('A: MemberExpression' === 1) && ('B: MemberExpression' === 'C: string')))": 1,
    "(('A: MemberExpression' === 1) && ('B: MemberExpression' === 'C: string'))": 1,
    "(('A: Identifier' || 'B: Identifier') || 'C: Identifier')": 1,
    "(('A: Identifier' !== null) && typeof('B: MemberExpression'))": 1,
    "((null == 'A: Identifier') ? 'B: CallExpression' : 'C: Identifier')": 1,
    "(('A: Identifier' instanceof 'B: Identifier') || (('C: LogicalExpression' && 'D: BinaryExpression') && ('E: UnaryExpression' === \"string\")))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' === \"string\")) && (typeof('D: MemberExpression') === \"string\"))": 1,
    "((('A: Identifier' !== null) && ('B: UnaryExpression' === \"object\")) && (typeof('C: MemberExpression') === \"string\"))": 1,
    "(('A: Identifier' !== null) && (typeof('B: Identifier') === \"object\"))": 1,
    "(('A: Identifier' instanceof 'B: MemberExpression') || ('C: MemberExpression' === true))": 1,
    "!(('A: string' in 'B: NewExpression'))": 1,
    "('A: string' in 'B: NewExpression')": 1,
    "((typeof('A: MemberExpression') === \"function\") ? 'B: FunctionExpression' : 'C: FunctionExpression')": 1,
    "((typeof('A: Identifier') !== \"undefined\") && ('B: string' === 'C: CallExpression'))": 1,
    "(((null === 'A: Identifier') || ('B: UnaryExpression' !== \"function\")) || ('C: Identifier' === 'D: Identifier'))": 1,
    "((null === 'A: Identifier') || (typeof('B: Identifier') !== \"function\"))": 1,
    "((('A: MemberExpression' === 0) && ('B: MemberExpression' > 'C: number')) || ('D: MemberExpression' > 0))": 1,
    "(('A: MemberExpression' === 0) && ('B: MemberExpression' > 'C: number'))": 1,
    "('A: MemberExpression' || ('B: MemberExpression' ? 'C: MemberExpression' : 'D: Identifier'))": 1,
    "('A: MemberExpression' ? 'B: MemberExpression' : 'C: Identifier')": 1,
    "('A: Identifier' || (typeof('B: Identifier') == 'undefined'))": 1,
    "(typeof('A: Identifier') == 'undefined')": 1,
    "((typeof('A: Identifier') !== \"object\") && (typeof('B: Identifier') !== \"function\"))": 1,
    "('A: Identifier' && ('B: CallExpression' || 'C: CallExpression'))": 1,
    "('A: CallExpression' && ('B: Identifier' != 'C: string'))": 1,
    "('A: Identifier' != 'B: string')": 1,
    "('A: CallExpression' !== 'B: Identifier')": 1,
    "('A: MemberExpression' != 'B: number')": 1,
    "(('A: Identifier' + 1) == 'B: MemberExpression')": 1,
    "((void(0) === 'A: Identifier') ? ('B: MemberExpression' - 'C: Identifier') : 'D: Identifier')": 1,
    "('A: CallExpression' != 1)": 1,
    "(('A: MemberExpression' != 'B: string') || !((0 in 'C: Identifier')))": 1,
    "!((0 in 'A: Identifier'))": 1,
    "(0 in 'A: Identifier')": 1,
    "(('A: Identifier' in 'B: Identifier') && !('C: CallExpression'))": 1,
    "(('A: Identifier' in 'B: Identifier') && 'C: CallExpression')": 1,
    "('A: UpdateExpression' >= 'B: Identifier')": 1,
    "('A: UpdateExpression' < 0)": 1,
    "(('A: Identifier' >= 0) ? 'B: Identifier' : 'C: CallExpression')": 1,
    "(('A: Identifier' >= 0) ? 'B: Identifier' : ('C: Identifier' - 'D: CallExpression'))": 1,
    "(!('A: MemberExpression') || ('B: CallExpression' === -(1)))": 1,
    "((('A: Identifier' < 0) ? 'B: string' : ('C: BinaryExpression' ? 'D: string' : \"\")) + 'E: CallExpression')": 1,
    "(('A: Identifier' < 0) ? 'B: string' : (('C: Identifier' > 'D: number') ? 'E: string' : \"\"))": 1,
    "(('A: Identifier' > 'B: number') ? 'C: string' : \"\")": 1,
    "(((0 <= 'A: Identifier') && ('B: Identifier' <= 'C: number')) ? -('D: number') : -('E: number'))": 1,
    "((0 <= 'A: Identifier') && ('B: Identifier' <= 'C: number'))": 1,
    "((('A: MemberExpression' && 'B: BinaryExpression') && ('C: CallExpression' !== 'D: UnaryExpression')) && 'E: CallExpression')": 1,
    "(('A: MemberExpression' && (null === 'B: CallExpression')) && ('C: CallExpression' !== -(1)))": 1,
    "('A: MemberExpression' && (null === 'B: CallExpression'))": 1,
    "(null === 'A: CallExpression')": 1,
    "((typeof('A: Identifier') === \"number\") && !('B: CallExpression'))": 1,
    "(!('A: MemberExpression') || 'B: string')": 1,
    "(((1 == 'A: Identifier') && ('B: Identifier' === 'C: CallExpression')) ? 'D: NewExpression' : (('E: Identifier' >= 'F: number') ? 'G: NewExpression' : ('H: BinaryExpression' ? 'I: NewExpression' : 'J: ConditionalExpression')))": 1,
    "((1 == 'A: Identifier') && ('B: Identifier' === 'C: CallExpression'))": 1,
    "(('A: Identifier' >= 'B: number') ? 'C: NewExpression' : (('D: Identifier' >= 'E: number') ? 'F: NewExpression' : ('G: BinaryExpression' ? 'H: NewExpression' : 'I: NewExpression')))": 1,
    "(('A: Identifier' >= 'B: number') ? 'C: NewExpression' : (('D: Identifier' >= 1) ? 'E: NewExpression' : 'F: NewExpression'))": 1,
    "(('A: Identifier' >= 1) ? 'B: NewExpression' : 'C: NewExpression')": 1,
    "(('A: Identifier' > 1) ? 1 : 0)": 1,
    "((('A: BinaryExpression' - 'B: CallExpression') + 'C: CallExpression') + ('D: number' * ('E: Identifier' - 'F: number')))": 1,
    "((('A: MemberExpression' + 'B: CallExpression') - 'C: CallExpression') + 'D: CallExpression')": 1,
    "(('A: MemberExpression' + 'B: CallExpression') - 'C: CallExpression')": 1,
    "(('A: MemberExpression' === 'B: string') ? 1 : -(1))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' > 'D: UnaryExpression')) && ('E: Identifier' < ('F: CallExpression' - 'G: CallExpression')))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' > 'D: UnaryExpression')) && ('E: Identifier' < 'F: number'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: Identifier' < 'D: number')) && ('E: Identifier' < 'F: number'))": 1,
    "((('A: Identifier' < 'B: ConditionalExpression') && ('C: Identifier' < 'D: number')) && ('E: Identifier' < 'F: number'))": 1,
    "(('A: Identifier' < ('B: LogicalExpression' ? 'C: number' : 'D: number')) && ('E: Identifier' < 'F: number'))": 1,
    "('A: Identifier' < (('B: LogicalExpression' || 'C: BinaryExpression') ? 'D: number' : 'E: number'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: Identifier' > 0)) ? 'D: number' : 'E: number')": 1,
    "((('A: Identifier' > 0) || ('B: Identifier' > 0)) || ('C: Identifier' > 0))": 1,
    "(('A: Identifier' > 0) || ('B: Identifier' > 0))": 1,
    "('A: Identifier' < ('B: CallExpression' - 'C: CallExpression'))": 1,
    "('A: number' * (('B: BinaryExpression' + 'C: Identifier') + ('D: Identifier' * 'E: Identifier')))": 1,
    "((('A: number' * 'B: BinaryExpression') + 'C: Identifier') + ('D: Identifier' * 'E: Identifier'))": 1,
    "(('A: number' * ('B: CallExpression' + 'C: Identifier')) + 'D: Identifier')": 1,
    "('A: number' * ('B: CallExpression' + 'C: Identifier'))": 1,
    "(('A: number' * ('B: BinaryExpression' + 'C: Identifier')) + 'D: Identifier')": 1,
    "('A: number' * (('B: number' * 'C: BinaryExpression') + 'D: Identifier'))": 1,
    "(('A: number' * ('B: BinaryExpression' + 'C: BinaryExpression')) + 'D: Identifier')": 1,
    "('A: number' * (('B: Identifier' + 'C: Identifier') + ('D: Identifier' * 'E: Identifier')))": 1,
    "(('A: Identifier' + 'B: Identifier') + ('C: Identifier' * 'D: Identifier'))": 1,
    "((-('A: number') <= 'B: Identifier') && ('C: Identifier' <= 'D: number'))": 1,
    "(-('A: number') <= 'B: Identifier')": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: CallExpression' !== 'D: string')) || ('E: CallExpression' !== 'F: string'))": 1,
    "((('A: UnaryExpression' || 'B: BinaryExpression') || ('C: string' === 'D: CallExpression')) || ('E: CallExpression' !== 'F: string'))": 1,
    "((!('A: MemberExpression') || ('B: CallExpression' !== 'C: string')) || ('D: string' === 'E: CallExpression'))": 1,
    "(!('A: MemberExpression') || ('B: CallExpression' !== 'C: string'))": 1,
    "('A: MemberExpression' * 'B: Identifier')": 1,
    "('A: Identifier' * ('B: Identifier' % 'C: Identifier'))": 1,
    "((('A: Identifier' !== '') || (0 === 'B: Identifier')) || ('C: MemberExpression' !== 0))": 1,
    "(('A: Identifier' !== '') || (0 === 'B: Identifier'))": 1,
    "('A: Identifier' !== '')": 1,
    "('A: MemberExpression' !== 0)": 1,
    "('' === 'A: Identifier')": 1,
    "('A: number' - 'B: MemberExpression')": 1,
    "((0 === 'A: Identifier') ? 'B: Identifier' : ((1 === 'C: BinaryExpression') ? 'D: CallExpression' : 'E: CallExpression'))": 1,
    "((1 === ('A: Identifier' % 'B: number')) ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "(1 === ('A: Identifier' % 'B: number'))": 1,
    "(('A: Identifier' !== 'B: Identifier') ? 0 : 'C: CallExpression')": 1,
    "(('A: Identifier' < 0) || ('B: Identifier' > 'C: number'))": 1,
    "(('A: Identifier' <= -('B: number')) || ('C: Identifier' >= 'D: number'))": 1,
    "('A: Identifier' <= -('B: number'))": 1,
    "('A: CallExpression' - 'B: number')": 1,
    "(('A: Identifier' < 0) ? ('B: Identifier' * 'C: CallExpression') : ('D: Identifier' / 'E: CallExpression'))": 1,
    "('A: Identifier' / 'B: CallExpression')": 1,
    "(1 << 'A: Identifier')": 1,
    "(1 << -('A: Identifier'))": 1,
    "('A: number' + 'B: Identifier')": 1,
    "(('A: Identifier' + 'B: CallExpression') + 'C: Identifier')": 1,
    "(('A: Identifier' - 'B: Identifier') + 'C: number')": 1,
    "((('A: Identifier' + 'B: CallExpression') + 'C: string') + 'D: CallExpression')": 1,
    "(('A: Identifier' + 'B: CallExpression') + 'C: string')": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || 'C: MemberExpression') || ('D: MemberExpression' > 1))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: MemberExpression' === 'D: string')) || 'E: MemberExpression')": 1,
    "((('A: MemberExpression' !== 'B: number') || ('C: MemberExpression' !== 'D: number')) || ('E: MemberExpression' === 'F: string'))": 1,
    "(('A: MemberExpression' !== 'B: number') || ('C: MemberExpression' !== 'D: number'))": 1,
    "((('A: ConditionalExpression' + 'B: ConditionalExpression') + ('C: MemberExpression' ? 'D: string' : \"\")) + ('E: MemberExpression' ? 'F: string' : \"\"))": 1,
    "((('A: MemberExpression' ? 'B: string' : \"\") + ('C: MemberExpression' ? 'D: string' : \"\")) + ('E: MemberExpression' ? 'F: string' : \"\"))": 1,
    "(('A: MemberExpression' ? 'B: string' : \"\") + ('C: MemberExpression' ? 'D: string' : \"\"))": 1,
    "((void(0) === 'A: Identifier') ? (-(1) >>> 0) : ('B: Identifier' >>> 0))": 1,
    "(-(1) >>> 0)": 1,
    "('A: Identifier' >>> 0)": 1,
    "(!('A: Identifier') && ('B: MemberExpression' > 1))": 1,
    "(('A: MemberExpression' > 1) && ('B: MemberExpression' < 'C: MemberExpression'))": 1,
    "('A: Identifier' || !('B: CallExpression'))": 1,
    "(('A: MemberExpression' > 'B: Identifier') ? 'C: CallExpression' : 'D: Identifier')": 1,
    "('A: MemberExpression' && ('B: CallExpression' !== 'C: string'))": 1,
    "(('A: Identifier' < 0) ? (('B: AssignmentExpression' < 0) ? 0 : 'C: Identifier') : 'D: Identifier')": 1,
    "(('A: AssignmentExpression' < 0) ? 0 : 'B: Identifier')": 1,
    "('A: AssignmentExpression' < 0)": 1,
    "(!('A: MemberExpression') || 'B: CallExpression')": 1,
    "((('A: string' + 'B: Identifier') + 'C: Identifier') + 'D: string')": 1,
    "(('A: string' + 'B: Identifier') + 'C: Identifier')": 1,
    "(('A: ThisExpression' === void(0)) || ('B: ThisExpression' === null))": 1,
    "('A: ThisExpression' === void(0))": 1,
    "('A: ThisExpression' === null)": 1,
    "(('A: string' + 'B: ThisExpression') + 'C: string')": 1,
    "('A: string' + 'B: ThisExpression')": 1,
    "((('A: Identifier' !== 0) && ('B: Identifier' !== 'C: BinaryExpression')) && ('D: Identifier' !== -('E: BinaryExpression')))": 1,
    "(('A: Identifier' !== 0) && ('B: Identifier' !== (1 / 0)))": 1,
    "('A: Identifier' !== (1 / 0))": 1,
    "('A: Identifier' !== -((1 / 0)))": 1,
    "-((1 / 0))": 1,
    "((('A: Identifier' > 0) || -(1)) * 'B: CallExpression')": 1,
    "(('A: Identifier' > 0) || -(1))": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || (\"number\" === 'C: Identifier')) || (\"string\" === 'D: Identifier'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || (\"boolean\" === 'C: Identifier')) || (\"number\" === 'D: Identifier'))": 1,
    "(((null === 'A: Identifier') || (\"undefined\" === 'B: Identifier')) || (\"boolean\" === 'C: Identifier'))": 1,
    "((null === 'A: Identifier') || (\"undefined\" === 'B: Identifier'))": 1,
    "(\"undefined\" === 'A: Identifier')": 1,
    "(\"boolean\" === 'A: Identifier')": 1,
    "(\"number\" === 'A: Identifier')": 1,
    "(\"string\" === 'A: Identifier')": 1,
    "('A: string' != 'B: MemberExpression')": 1,
    "((typeof('A: Identifier') == \"function\") && 'B: Identifier')": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: string' == 'D: CallExpression')) && ('E: string' === 'F: CallExpression'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && (\"null\" == 'C: CallExpression')) && ('D: string' == 'E: CallExpression'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: string' == 'D: CallExpression')) && (\"null\" == 'E: CallExpression'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' === 'D: CallExpression')) && ('E: string' === 'F: CallExpression'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: string' == 'D: CallExpression')) && ('E: Identifier' === 'F: CallExpression'))": 1,
    "((('A: string' === 'B: CallExpression') && ('C: string' === 'D: CallExpression')) && ('E: string' == 'F: CallExpression'))": 1,
    "(('A: string' === 'B: CallExpression') && ('C: string' === 'D: CallExpression'))": 1,
    "((0 === 'A: CallExpression') && !('B: CallExpression'))": 1,
    "(('A: MemberExpression' == 'B: number') && ('C: MemberExpression' === 1))": 1,
    "('A: MemberExpression' == 'B: number')": 1,
    "((('A: UnaryExpression' == \"object\") && 'B: Identifier') && 'C: SequenceExpression')": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && (1 === 'C: CallExpression')) && ('D: number' == 'E: CallExpression'))": 1,
    "((('A: UnaryExpression' == 'B: CallExpression') && (0 === 'C: CallExpression')) && (1 === 'D: CallExpression'))": 1,
    "((-('A: number') == 'B: CallExpression') && (0 === 'C: CallExpression'))": 1,
    "(-('A: number') == 'B: CallExpression')": 1,
    "((('A: BinaryExpression' + 'B: CallExpression') - 'C: CallExpression') + 'D: CallExpression')": 1,
    "((('A: MemberExpression' + 'B: BinaryExpression') + 'C: CallExpression') - 'D: CallExpression')": 1,
    "(('A: MemberExpression' + ('B: number' * 'C: BinaryExpression')) + 'D: CallExpression')": 1,
    "('A: MemberExpression' + ('B: number' * ('C: Identifier' - 'D: number')))": 1,
    "((('A: Identifier' - 'B: number') + 'C: AssignmentExpression') / 'D: number')": 1,
    "(('A: Identifier' - 'B: number') + 'C: AssignmentExpression')": 1,
    "+((1 < 'A: Identifier'))": 1,
    "(1 < 'A: Identifier')": 1,
    "('A: AssignmentExpression' || 'B: AssignmentExpression')": 1,
    "(('A: MemberExpression' != 'B: Identifier') ? 'C: AssignmentExpression' : 'D: SequenceExpression')": 1,
    "('A: MemberExpression' != 'B: Identifier')": 1,
    "('A: Identifier' in 'B: SequenceExpression')": 1,
    "(('A: Identifier' in 'B: ThisExpression') && !(('C: BinaryExpression' && 'D: BinaryExpression')))": 1,
    "!((('A: Identifier' in 'B: Identifier') && ('C: MemberExpression' === 'D: MemberExpression')))": 1,
    "(('A: Identifier' in 'B: Identifier') && ('C: MemberExpression' === 'D: MemberExpression'))": 1,
    "('A: CallExpression' && 'B: UpdateExpression')": 1,
    "('A: Identifier' ? 'B: AssignmentExpression' : 'C: SequenceExpression')": 1,
    "(('A: number' == 'B: Identifier') ? 'C: FunctionExpression' : 'D: FunctionExpression')": 1,
    "((('A: LogicalExpression' || 'B: UnaryExpression') || !('C: CallExpression')) || 'D: CallExpression')": 1,
    "((('A: LogicalExpression' || 'B: CallExpression') || !('C: AssignmentExpression')) || !('D: CallExpression'))": 1,
    "((('A: Identifier' && 'B: BinaryExpression') || 'C: CallExpression') || !('D: AssignmentExpression'))": 1,
    "(('A: Identifier' && ('B: string' == 'C: Identifier')) || 'D: CallExpression')": 1,
    "!('A: AssignmentExpression')": 1,
    "((('A: LogicalExpression' || 'B: UnaryExpression') || 'C: AssignmentExpression') || 'D: CallExpression')": 1,
    "((('A: Identifier' && 'B: BinaryExpression') || !('C: CallExpression')) || 'D: AssignmentExpression')": 1,
    "(('A: Identifier' || 'B: CallExpression') && 'C: CallExpression')": 1,
    "(\"function\" != typeof('A: MemberExpression'))": 1,
    "((\"object\" == 'A: Identifier') ? !(!('B: MemberExpression')) : !('C: MemberExpression'))": 1,
    "(\"object\" == 'A: Identifier')": 1,
    "((('A: Identifier' && 'B: BinaryExpression') || !('C: CallExpression')) || 'D: CallExpression')": 1,
    "('A: string' + ('B: Identifier' || 0))": 1,
    "(!('A: Identifier') || ('B: number' < 'C: Identifier'))": 1,
    "('A: Identifier' && ('B: Identifier' ? 'C: CallExpression' : 'D: Identifier'))": 1,
    "('A: Identifier' ? 'B: MemberExpression' : 'C: CallExpression')": 1,
    "(('A: string' != 'B: Identifier') || 'C: CallExpression')": 1,
    "((('A: UnaryExpression' == \"function\") && ('B: LogicalExpression' || 'C: CallExpression')) && 'D: AssignmentExpression')": 1,
    "((typeof('A: MemberExpression') == \"function\") && (('B: LogicalExpression' && 'C: BinaryExpression') || 'D: CallExpression'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: string' != 'D: Identifier')) || 'E: CallExpression')": 1,
    "((('A: string' != 'B: Identifier') && ('C: string' != 'D: Identifier')) && ('E: string' != 'F: Identifier'))": 1,
    "(('A: string' != 'B: Identifier') && ('C: string' != 'D: Identifier'))": 1,
    "(('A: CallExpression' + 'B: number') - 1)": 1,
    "(('A: Identifier' - 'B: CallExpression') / 'C: number')": 1,
    "((1 + 'A: Identifier') - 'B: CallExpression')": 1,
    "(1 + 'A: Identifier')": 1,
    "((('A: ConditionalExpression' + 'B: string') + 'C: CallExpression') + 'D: string')": 1,
    "((('A: LogicalExpression' ? 'B: BinaryExpression' : 'C: CallExpression') + 'D: string') + 'E: CallExpression')": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') ? ('C: ConditionalExpression' + 'D: CallExpression') : 'E: CallExpression') + 'F: string')": 1,
    "(((0 >= 'A: Identifier') || ('B: number' <= 'C: Identifier')) ? (('D: BinaryExpression' ? 'E: string' : 'F: string') + 'G: CallExpression') : 'H: CallExpression')": 1,
    "((0 >= 'A: Identifier') || ('B: number' <= 'C: Identifier'))": 1,
    "(0 >= 'A: Identifier')": 1,
    "(((0 > 'A: Identifier') ? 'B: string' : 'C: string') + 'D: CallExpression')": 1,
    "((0 > 'A: Identifier') ? 'B: string' : 'C: string')": 1,
    "((0 > 'A: Identifier') ? -('B: Identifier') : 'C: Identifier')": 1,
    "('A: Identifier' && 'B: AssignmentExpression')": 1,
    "((('A: Identifier' > 'B: BinaryExpression') && ('C: Identifier' < 'D: BinaryExpression')) ? (\"\" + 'E: Identifier') : \"null\")": 1,
    "(('A: Identifier' === 'B: Identifier') ? \"null\" : 'C: Identifier')": 1,
    "((('A: CallExpression' + 'B: string') + ('C: Identifier' ? 'D: string' : \"\")) + 'E: Identifier')": 1,
    "(('A: CallExpression' + 'B: string') + ('C: Identifier' ? 'D: string' : \"\"))": 1,
    "('A: Identifier' ? 'B: string' : \"\")": 1,
    "((typeof('A: Identifier') == \"function\") || (('B: UnaryExpression' == \"object\") && 'C: Identifier'))": 1,
    "('A: SequenceExpression' && 'B: AssignmentExpression')": 1,
    "(('A: string' == 'B: Identifier') || ('C: string' == 'D: Identifier'))": 1,
    "(0 < 'A: AssignmentExpression')": 1,
    "('A: Identifier' % 1)": 1,
    "(('A: number' < 'B: Identifier') && 'C: AssignmentExpression')": 1,
    "(('A: string' == 'B: Identifier') && 'C: AssignmentExpression')": 1,
    "(('A: number' >= 'B: MemberExpression') ? 'C: Identifier' : 'D: CallExpression')": 1,
    "('A: number' >= 'B: MemberExpression')": 1,
    "((('A: LogicalExpression' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: BinaryExpression')) || 'E: CallExpression')": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') || ('C: BinaryExpression' && 'D: BinaryExpression')) || (('E: number' <= 'F: Identifier') && ('G: number' >= 'H: Identifier')))": 1,
    "((('A: number' <= 'B: Identifier') && ('C: number' >= 'D: Identifier')) || (('E: number' <= 'F: Identifier') && ('G: number' >= 'H: Identifier')))": 1,
    "((('A: number' <= 'B: Identifier') && ('C: number' != 'D: Identifier')) && ('E: number' != 'F: Identifier'))": 1,
    "(('A: number' <= 'B: Identifier') && ('C: number' != 'D: Identifier'))": 1,
    "((('A: number' == 'B: Identifier') && 'C: SequenceExpression') && 'D: CallExpression')": 1,
    "(('A: number' == 'B: Identifier') || ('C: number' == 'D: Identifier'))": 1,
    "((('A: number' != 'B: Identifier') && ('C: number' != 'D: Identifier')) || 'E: UpdateExpression')": 1,
    "(('A: number' != 'B: Identifier') && ('C: number' != 'D: Identifier'))": 1,
    "+('A: CallExpression')": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: string' == 'D: CallExpression')) || 'E: CallExpression')": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: string' == 'D: ConditionalExpression')) && ('E: string' == 'F: CallExpression'))": 1,
    "((('A: string' != 'B: Identifier') && ('C: UnaryExpression' == \"string\")) && ('D: string' == ('E: Identifier' ? 'F: CallExpression' : 'G: MemberExpression')))": 1,
    "(('A: string' != 'B: Identifier') && (typeof('C: Identifier') == \"string\"))": 1,
    "(('A: Identifier' === 'B: Identifier') ? delete('C: MemberExpression') : 'D: AssignmentExpression')": 1,
    "(('A: string' != 'B: CallExpression') && 'C: CallExpression')": 1,
    "((!('A: Identifier') || ('B: BinaryExpression' && 'C: BinaryExpression')) || 'D: AssignmentExpression')": 1,
    "(!('A: Identifier') || (('B: MemberExpression' !== 'C: Identifier') && ('D: MemberExpression' !== 'E: Identifier')))": 1,
    "((('A: BinaryExpression' || 'B: UnaryExpression') || 'C: MemberExpression') || 'D: Identifier')": 1,
    "(((\"object\" != 'A: UnaryExpression') || !('B: Identifier')) || 'C: MemberExpression')": 1,
    "((\"object\" != typeof('A: Identifier')) || !('B: Identifier'))": 1,
    "(\"object\" != typeof('A: Identifier'))": 1,
    "((('A: MemberExpression' && 'B: Identifier') || ('C: MemberExpression' && 'D: Identifier')) || 'E: Identifier')": 1,
    "(('A: MemberExpression' && 'B: Identifier') || ('C: MemberExpression' && 'D: Identifier'))": 1,
    "(('A: Identifier' ? 'B: MemberExpression' : 0) - 'C: Identifier')": 1,
    "('A: Identifier' ? 'B: MemberExpression' : 0)": 1,
    "('A: Identifier' && (('B: MemberExpression' + 1) < 'C: Identifier'))": 1,
    "(('A: MemberExpression' + 1) < 'B: Identifier')": 1,
    "(('A: Identifier' && (0 <= 'B: Identifier')) && ('C: Identifier' < 'D: Identifier'))": 1,
    "('A: Identifier' && (0 <= 'B: Identifier'))": 1,
    "(!('A: Identifier') || ('B: Identifier' && ('C: MemberExpression' < 'D: MemberExpression')))": 1,
    "('A: Identifier' && ('B: MemberExpression' < 'C: MemberExpression'))": 1,
    "(('A: Identifier' && ('B: MemberExpression' === 'C: Identifier')) && ('D: MemberExpression' === 'E: Identifier'))": 1,
    "('A: Identifier' && ('B: MemberExpression' === 'C: Identifier'))": 1,
    "((('A: BinaryExpression' < 'B: Identifier') && ('C: BinaryExpression' < 'D: Identifier')) && 'E: CallExpression')": 1,
    "((('A: Identifier' + 1) < 'B: Identifier') && (('C: Identifier' + 1) < 'D: Identifier'))": 1,
    "(('A: MemberExpression' && !('B: CallExpression')) && !('C: CallExpression'))": 1,
    "('A: MemberExpression' && !('B: CallExpression'))": 1,
    "(('A: Identifier' === ('B: MemberExpression' - 'C: number')) && (('D: MemberExpression' !== 'E: MemberExpression') || ('F: MemberExpression' !== 'G: MemberExpression')))": 1,
    "(('A: MemberExpression' !== 'B: MemberExpression') || ('C: MemberExpression' !== 'D: MemberExpression'))": 1,
    "(!('A: CallExpression') && ('B: Identifier' || 'C: Identifier'))": 1,
    "(('A: MemberExpression' ? 'B: string' : 'C: string') + 'D: Identifier')": 1,
    "(('A: MemberExpression' <= 'B: number') && ('C: Identifier' < ('D: MemberExpression' - 'E: number')))": 1,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + (('D: Identifier' - 'E: Identifier') + 'F: Identifier'))": 1,
    "((('A: BinaryExpression' + 'B: BinaryExpression') + 'C: string') + 'D: Identifier')": 1,
    "((('A: string' + 'B: Identifier') + 'C: string') + (('D: Identifier' - 'E: Identifier') + 'F: Identifier'))": 1,
    "(('A: MemberExpression' === 'B: string') ? 'C: number' : 0)": 1,
    "(('A: MemberExpression' - 1) + 'B: Identifier')": 1,
    "+('A: MemberExpression')": 1,
    "('A: MemberExpression' ? 1 : ('B: MemberExpression' ? -(1) : 0))": 1,
    "('A: MemberExpression' ? -(1) : 0)": 1,
    "(typeof('A: Identifier') !== 'string')": 1,
    "(('A: MemberExpression' === 'B: Identifier') || ('C: MemberExpression' && ('D: MemberExpression' === 'E: Identifier')))": 1,
    "(('A: Identifier' === 'B: Identifier') || ('C: MemberExpression' && ('D: MemberExpression' === 'E: Identifier')))": 1,
    "(('A: MemberExpression' * 'B: number') * ('C: Identifier' / 'D: number'))": 1,
    "('A: MemberExpression' || (('B: Identifier' | 0) + 'C: string'))": 1,
    "(('A: Identifier' | 0) + 'B: string')": 1,
    "(('A: Identifier' - ('B: Identifier' / 'C: number')) + 1)": 1,
    "('A: Identifier' - ('B: Identifier' / 'C: number'))": 1,
    "(('A: Identifier' + ('B: Identifier' / 'C: number')) - 1)": 1,
    "('A: Identifier' + ('B: Identifier' / 'C: number'))": 1,
    "(typeof('A: MemberExpression') == 'function')": 1,
    "((typeof('A: Identifier') !== 'undefined') && (typeof('B: MemberExpression') === 'function'))": 1,
    "(null != 'A: MemberExpression')": 1,
    "(!('A: Identifier') && ('B: string' === 'C: Identifier'))": 1,
    "('A: UpdateExpression' || ('B: Identifier' && 'C: CallExpression'))": 1,
    "((typeof('A: Identifier') == 'string') ? 'B: NewExpression' : 'C: Identifier')": 1,
    "(('A: MemberExpression' && ('B: Identifier' != 'C: Identifier')) ? 'D: Identifier' : true)": 1,
    "(('A: MemberExpression' && ('B: Identifier' != 'C: Identifier')) ? 'D: Identifier' : false)": 1,
    "(('A: MemberExpression' && ('B: Identifier' !== 'C: Identifier')) ? 'D: Identifier' : true)": 1,
    "('A: MemberExpression' && ('B: Identifier' !== 'C: Identifier'))": 1,
    "(false !== 'A: MemberExpression')": 1,
    "((('A: LogicalExpression' || 'B: CallExpression') || 'C: CallExpression') || ('D: Identifier' + 'E: string'))": 1,
    "((('A: CallExpression' || 'B: CallExpression') || 'C: CallExpression') || 'D: CallExpression')": 1,
    "(('A: CallExpression' || 'B: CallExpression') || 'C: CallExpression')": 1,
    "('A: Identifier' < ('B: number' * 'C: Identifier'))": 1,
    "('A: Identifier' || ('B: MemberExpression' !== 'C: Identifier'))": 1,
    "('A: Identifier' ? ('B: MemberExpression' ? 'C: MemberExpression' : 'D: MemberExpression') : 'E: number')": 1,
    "(('A: MemberExpression' && ('B: UnaryExpression' == 'string')) && (typeof('C: Identifier') == 'string'))": 1,
    "('A: MemberExpression' && (typeof('B: Identifier') == 'string'))": 1,
    "('A: Identifier' ? ('B: Identifier' + 1) : 'C: Identifier')": 1,
    "('A: MemberExpression' || 'B: UpdateExpression')": 1,
    "(('A: MemberExpression' > 'B: CallExpression') ? 'C: string' : (('D: MemberExpression' > 'E: Identifier') ? 'F: string' : 'G: string'))": 1,
    "(('A: MemberExpression' > 'B: Identifier') ? 'C: string' : 'D: string')": 1,
    "(('A: Identifier' - 'B: MemberExpression') + 1)": 1,
    "((('A: CallExpression' + 'B: string') + 'C: string') + 'D: Identifier')": 1,
    "(('A: CallExpression' + 'B: string') + 'C: string')": 1,
    "(('A: number' * ('B: MemberExpression' / 'C: MemberExpression')) | 0)": 1,
    "((!('A: MemberExpression') && 'B: MemberExpression') && ('C: MemberExpression' !== 'D: Identifier'))": 1,
    "(('A: MemberExpression' == 'B: string') ? 'C: string' : 'D: string')": 1,
    "((('A: Identifier' ? 'B: BinaryExpression' : 'C: string') + 'D: string') + 'E: CallExpression')": 1,
    "(('A: Identifier' ? ('B: Identifier' + 'C: string') : 'D: string') + 'E: string')": 1,
    "('A: Identifier' ? ('B: Identifier' + 'C: string') : 'D: string')": 1,
    "(('A: MemberExpression' == 1) ? true : 'B: Identifier')": 1,
    "(('A: MemberExpression' === 'B: Identifier') ? '' : 'C: MemberExpression')": 1,
    "((-(1) == 'A: Identifier') ? (('B: BinaryExpression' / 'C: Identifier') | 0) : 'D: Identifier')": 1,
    "(-(1) == 'A: Identifier')": 1,
    "((('A: UpdateExpression' * 'B: Identifier') / 'C: Identifier') | 0)": 1,
    "(('A: UpdateExpression' * 'B: Identifier') / 'C: Identifier')": 1,
    "('A: UpdateExpression' * 'B: Identifier')": 1,
    "('A: MemberExpression' >= 'B: MemberExpression')": 1,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: CallExpression') + 'D: string')": 1,
    "((('A: Identifier' + 'B: string') + 'C: Identifier') + 'D: CallExpression')": 1,
    "('A: Identifier' < ('B: number' * 'C: number'))": 1,
    "('A: Identifier' * (1.0 / 'B: number'))": 1,
    "(1.0 / 'A: number')": 1,
    "((('A: BinaryExpression' + 'B: BinaryExpression') + 'C: Identifier') + 'D: number')": 1,
    "((('A: number' * 'B: Identifier') + ('C: number' * 'D: Identifier')) + 'E: Identifier')": 1,
    "(('A: number' * 'B: Identifier') + ('C: number' * 'D: Identifier'))": 1,
    "('A: MemberExpression' % 'B: MemberExpression')": 1,
    "(('A: Identifier' * 'B: Identifier') | 0)": 1,
    "(('A: Identifier' === 'B: Identifier') && !('C: MemberExpression'))": 1,
    "((('A: CallExpression' + 'B: CallExpression') + 'C: CallExpression') + 'D: CallExpression')": 1,
    "('A: string' + ('B: Identifier' + 'C: Identifier'))": 1,
    "(('A: MemberExpression' - 'B: MemberExpression') - 'C: MemberExpression')": 1,
    "((('A: string' + 'B: Identifier') + ('C: MemberExpression' ? 'D: BinaryExpression' : '')) + 'E: Identifier')": 1,
    "(('A: string' + 'B: Identifier') + ('C: MemberExpression' ? ('D: string' + 'E: CallExpression') : ''))": 1,
    "('A: MemberExpression' ? ('B: string' + 'C: CallExpression') : '')": 1,
    "((('A: Identifier' + 'B: string') + 'C: Identifier') + 'D: Identifier')": 1,
    "('A: CallExpression' || 'B: number')": 1,
    "('A: Identifier' || 'B: MemberExpression')": 1,
    "('A: NewExpression' - 'B: Identifier')": 1,
    "((!('A: Identifier') && ('B: MemberExpression' > 'C: Identifier')) && 'D: MemberExpression')": 1,
    "(!('A: Identifier') && ('B: MemberExpression' > 'C: Identifier'))": 1,
    "(('A: Identifier' instanceof 'B: Identifier') || ('C: string' === 'D: CallExpression'))": 1,
    "(null != 'A: Identifier')": 1,
    "('A: Identifier' && (typeof('B: MemberExpression') === 'function'))": 1,
    "('A: MemberExpression' == 'B: MemberExpression')": 1,
    "(('A: string' + 'B: CallExpression') + '')": 1,
    "(('A: Identifier' !== 'B: CallExpression') ? 'C: Identifier' : ('D: MemberExpression' || 'E: Identifier'))": 1,
    "('A: Identifier' || 'B: FunctionExpression')": 1,
    "(0 == 'A: CallExpression')": 1,
    "(('A: MemberExpression' == 0) && (!('B: MemberExpression') || ('C: string' !== 'D: Identifier')))": 1,
    "(!('A: MemberExpression') || ('B: string' !== 'C: Identifier'))": 1,
    "('A: string' !== 'B: Identifier')": 1,
    "((typeof('A: Identifier') === 'object') && (typeof('B: MemberExpression') === 'string'))": 1,
    "(typeof('A: MemberExpression') === 'string')": 1,
    "(('A: Identifier' << 'B: number') | 'C: Identifier')": 1,
    "('A: Identifier' << 'B: number')": 1,
    "((('A: BinaryExpression' + 'B: string') + ('C: Identifier' ? 'D: Identifier' : 'E: Identifier')) + 'F: string')": 1,
    "((('A: string' + 'B: ConditionalExpression') + 'C: string') + ('D: Identifier' ? 'E: Identifier' : 'F: Identifier'))": 1,
    "(('A: string' + ('B: Identifier' ? 'C: string' : 'D: string')) + 'E: string')": 1,
    "('A: string' + ('B: Identifier' ? 'C: string' : 'D: string'))": 1,
    "((typeof('A: Identifier') === 'object') && ('B: Identifier' !== null))": 1,
    "((!('A: CallExpression') || !('B: CallExpression')) || ('C: MemberExpression' === 'D: string'))": 1,
    "(!('A: CallExpression') || !('B: CallExpression'))": 1,
    "('A: Identifier' != -(1))": 1,
    "('A: MemberExpression' && (('B: CallExpression' - 'C: Identifier') < 'D: number'))": 1,
    "(('A: CallExpression' - 'B: Identifier') < 'C: number')": 1,
    "(('A: Identifier' && 'B: CallExpression') && ('C: MemberExpression' !== true))": 1,
    "('A: Identifier' && 'B: Identifier')": 1,
    "((void(0) === 'A: Identifier') ? 'B: CallExpression' : 'C: CallExpression')": 1,
    "(typeof('A: MemberExpression') !== \"function\")": 1,
    "(+('A: ThisExpression') === 1)": 1,
    "(+('A: Identifier') === 'B: number')": 1,
    "(('A: MemberExpression' === 'B: number') || ('C: MemberExpression' === 'D: number'))": 1,
    "('A: UpdateExpression' <= 0)": 1,
    "((void(0) === 'A: Identifier') && ('B: Identifier' != null))": 1,
    "('A: Identifier' === ('B: number' * 'C: Identifier'))": 1,
    "((0 === 'A: Identifier') && ('B: Identifier' > 0))": 1,
    "((typeof('A: Identifier') === \"number\") ? ('B: Identifier' + \"\") : (('C: MemberExpression' + 'D: string') + 'E: MemberExpression'))": 1,
    "((('A: string' + 'B: BinaryExpression') + 'C: string') + 'D: Identifier')": 1,
    "('A: Identifier' > ('B: MemberExpression' + 1))": 1,
    "((('A: BinaryExpression' + 'B: string') + ('C: Identifier' - 1)) + 'D: string')": 1,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + ('D: Identifier' - 1))": 1,
    "((('A: string' + 'B: string') + 'C: string') + 'D: MemberExpression')": 1,
    "((('A: UnaryExpression' === 'B: Identifier') ? ('C: BinaryExpression' + 'D: string') : ('E: BinaryExpression' + 'F: string')) + 'G: string')": 1,
    "((void(0) === 'A: Identifier') ? (('B: BinaryExpression' + 'C: Identifier') + 'D: string') : (('E: BinaryExpression' + 'F: Identifier') + 'G: string'))": 1,
    "((('A: BinaryExpression' + 'B: string') + 'C: string') + \"\")": 1,
    "((('A: BinaryExpression' + 'B: CallExpression') + 'C: string') + 'D: string')": 1,
    "((('A: BinaryExpression' + 'B: string') + 'C: string') + 'D: CallExpression')": 1,
    "((('A: BinaryExpression' + \"\") + 'B: string') + 'C: string')": 1,
    "((('A: string' + 'B: string') + 'C: string') + \"\")": 1,
    "('A: CallExpression' || (('B: Identifier' > 0) && !('C: CallExpression')))": 1,
    "(('A: Identifier' > 0) && !('B: CallExpression'))": 1,
    "((typeof('A: Identifier') === \"string\") ? 'B: Identifier' : (('C: MemberExpression' + 'D: string') + 'E: MemberExpression'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && 'C: CallExpression') && ('D: MemberExpression' === 'E: string'))": 1,
    "((('A: UnaryExpression' === \"string\") && ('B: UnaryExpression' === \"function\")) && 'C: CallExpression')": 1,
    "((typeof('A: MemberExpression') === \"string\") && (typeof('B: MemberExpression') === \"function\"))": 1,
    "((typeof('A: Identifier') === \"string\") ? (('B: BinaryExpression' + 'C: string') + 'D: Identifier') : (('E: MemberExpression' + 'F: string') + 'G: MemberExpression'))": 1,
    "(('A: Identifier' + 'B: number') < 'C: MemberExpression')": 1,
    "((typeof('A: Identifier') !== \"undefined\") ? (('B: UnaryExpression' !== \"undefined\") ? 'C: FunctionExpression' : 'D: FunctionExpression') : (('E: UnaryExpression' !== \"undefined\") ? 'F: FunctionExpression' : 'G: FunctionExpression'))": 1,
    "((typeof('A: MemberExpression') !== \"undefined\") ? 'B: FunctionExpression' : 'C: FunctionExpression')": 1,
    "((typeof('A: Identifier') !== \"undefined\") ? 'B: FunctionExpression' : 'C: FunctionExpression')": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: UnaryExpression' === \"boolean\")) || (typeof('D: Identifier') === \"number\"))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: UnaryExpression' === \"string\")) || (typeof('D: Identifier') === \"boolean\"))": 1,
    "(((null === 'A: Identifier') || ('B: UnaryExpression' === \"undefined\")) || (typeof('C: Identifier') === \"string\"))": 1,
    "((null === 'A: Identifier') || (typeof('B: Identifier') === \"undefined\"))": 1,
    "(('A: MemberExpression' > 'B: MemberExpression') && !('C: MemberExpression'))": 1,
    "('A: MemberExpression' > 'B: MemberExpression')": 1,
    "('A: Identifier' === ('B: Identifier' | 0))": 1,
    "(-(1) === 'A: Identifier')": 1,
    "((null === 'A: Identifier') || (typeof('B: Identifier') !== \"object\"))": 1,
    "('A: CallExpression' && (false === 'B: Identifier'))": 1,
    "((typeof('A: Identifier') === \"function\") && (('B: MemberExpression' instanceof 'C: Identifier') || ('D: Identifier' === 'E: Identifier')))": 1,
    "(('A: MemberExpression' instanceof 'B: Identifier') || ('C: Identifier' === 'D: Identifier'))": 1,
    "(!('A: CallExpression') && 'B: CallExpression')": 1,
    "(('A: Identifier' > 0) ? 'B: MemberExpression' : void(0))": 1,
    "((typeof('A: Identifier') === \"function\") ? 'B: Identifier' : 'C: MemberExpression')": 1,
    "(('A: MemberExpression' & -('B: number')) | ('C: Identifier' & 'D: number'))": 1,
    "('A: MemberExpression' | -('B: number'))": 1,
    "(('A: MemberExpression' & -('B: number')) === -('C: number'))": 1,
    "('A: MemberExpression' & ~(-('B: number')))": 1,
    "~(-('A: number'))": 1,
    "('A: MemberExpression' & ~('B: number'))": 1,
    "~('A: number')": 1,
    "(('A: Identifier' + 0) - 'B: number')": 1,
    "(('A: Identifier' + 1) - 'B: number')": 1,
    "(('A: Identifier' - 'B: number') + 0)": 1,
    "(('A: Identifier' - 'B: number') + 1)": 1,
    "(('A: Identifier' instanceof 'B: Identifier') || ('C: Identifier' === 'D: Identifier'))": 1,
    "(('A: Identifier' !== 'B: Identifier') || (('C: Identifier' instanceof 'D: Identifier') && ('E: Identifier' !== 'F: Identifier')))": 1,
    "(('A: Identifier' instanceof 'B: Identifier') && ('C: Identifier' !== 'D: Identifier'))": 1,
    "(!('A: CallExpression') || 'B: CallExpression')": 1,
    "(('A: Identifier' != null) && ('B: MemberExpression' != null))": 1,
    "((!('A: Identifier') && 'B: CallExpression') && ('C: MemberExpression' !== void(0)))": 1,
    "(('A: MemberExpression' != null) && ('B: MemberExpression' === 'C: string'))": 1,
    "((null === 'A: Identifier') ? void(0) : 'B: Identifier')": 1,
    "((void(0) === 'A: Identifier') && !('B: CallExpression'))": 1,
    "(('A: MemberExpression' - 'B: MemberExpression') + ('C: CallExpression' - 'D: MemberExpression'))": 1,
    "('A: CallExpression' - 'B: MemberExpression')": 1,
    "(('A: Identifier' + 1) === 'B: MemberExpression')": 1,
    "('A: CallExpression' ? 'B: MemberExpression' : void(0))": 1,
    "(0 === ('A: MemberExpression' & 'B: number'))": 1,
    "('A: Identifier' ? 'B: FunctionExpression' : 'C: MemberExpression')": 1,
    "(!('A: Identifier') && (false === 'B: Identifier'))": 1,
    "('A: Identifier' != 0)": 1,
    "((typeof('A: Identifier') === \"number\") ? 'B: Identifier' : 1)": 1,
    "('A: Identifier' > 'B: MemberExpression')": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && 'C: MemberExpression') && (typeof('D: MemberExpression') === \"function\"))": 1,
    "((('A: UnaryExpression' === \"function\") && ('B: UnaryExpression' !== \"undefined\")) && 'C: MemberExpression')": 1,
    "((typeof('A: Identifier') === \"function\") && (typeof('B: Identifier') !== \"undefined\"))": 1,
    "((('A: UnaryExpression' !== \"undefined\") && ('B: UnaryExpression' === \"string\")) ? 'C: CallExpression' : 'D: ArrayExpression')": 1,
    "(!('A: CallExpression') || 'B: MemberExpression')": 1,
    "(((1 + 1) + 1) + 1)": 1,
    "((1 + 1) + 1)": 1,
    "(('A: Identifier' < 'B: number') ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "(1 === 0)": 1,
    "((typeof('A: Identifier') !== \"undefined\") ? 'B: Identifier' : 'C: Identifier')": 1,
    "(typeof('A: CallExpression') === 'undefined')": 1,
    "(1 == 1)": 1,
    "('A: CallExpression' !== 'B: MemberExpression')": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' === \"string\")) && ('D: Identifier' === 'E: Identifier'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' !== null)) && (typeof('D: MemberExpression') === \"string\"))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' !== \"undefined\")) && ('D: Identifier' !== null))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' !== \"undefined\")) && (typeof('D: Identifier') !== \"undefined\"))": 1,
    "((('A: UnaryExpression' !== \"undefined\") && ('B: Identifier' !== null)) && (typeof('C: MemberExpression') !== \"undefined\"))": 1,
    "((typeof('A: Identifier') !== \"undefined\") && ('B: Identifier' !== null))": 1,
    "(('A: MemberExpression' === 'B: number') && 'C: Identifier')": 1,
    "(-(0) / 0)": 1,
    "-(0)": 1,
    "((typeof('A: Identifier') !== \"undefined\") ? 'B: Identifier' : 'C: CallExpression')": 1,
    "(('A: CallExpression' * 'B: MemberExpression') | 0)": 1,
    "('A: CallExpression' * 'B: MemberExpression')": 1,
    "((('A: UnaryExpression' !== \"undefined\") && ('B: UnaryExpression' === \"string\")) && (typeof('C: Identifier') === \"undefined\"))": 1,
    "((null == 'A: Identifier') || (typeof('B: Identifier') !== \"object\"))": 1,
    "((('A: MemberExpression' === 'B: string') || ('C: MemberExpression' === 'D: string')) || ('E: MemberExpression' === 'F: string'))": 1,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + 'D: CallExpression')": 1,
    "((0 === 'A: Identifier') ? (('B: BinaryExpression' + 'C: Identifier') + 'D: string') : (('E: BinaryExpression' + 'F: Identifier') + 'G: string'))": 1,
    "((('A: string' + 'B: Identifier') + 'C: string') + 'D: MemberExpression')": 1,
    "((typeof('A: Identifier') === \"number\") ? 'B: Identifier' : 0)": 1,
    "('A: CallExpression' ? \"\" : (('B: string' + 'C: CallExpression') + 'D: string'))": 1,
    "(('A: Identifier' > 0) ? 'B: CallExpression' : 'C: string')": 1,
    "(('A: Identifier' > 0) ? ('B: string' + 'C: Identifier') : \"\")": 1,
    "(('A: Identifier' < 0) ? ('B: string' + 'C: CallExpression') : \"\")": 1,
    "(('A: MemberExpression' === 'B: MemberExpression') && ('C: MemberExpression' === 'D: MemberExpression'))": 1,
    "!((('A: number' <= 'B: MemberExpression') && ('C: MemberExpression' <= 'D: number')))": 1,
    "(('A: number' <= 'B: MemberExpression') && ('C: MemberExpression' <= 'D: number'))": 1,
    "('A: number' <= 'B: MemberExpression')": 1,
    "((typeof('A: MemberExpression') === \"function\") && ('B: CallExpression' === -(1)))": 1,
    "(('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 1))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 'D: Identifier')) && ('E: MemberExpression' === 'F: number'))": 1,
    "((('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: Identifier')) && ('E: MemberExpression' === 'F: Identifier'))": 1,
    "(('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: Identifier'))": 1,
    "(!('A: CallExpression') && ('B: CallExpression' === -(1)))": 1,
    "(('A: MemberExpression' && ('B: CallExpression' >= 0)) && ('C: string' === 'D: CallExpression'))": 1,
    "('A: MemberExpression' && ('B: CallExpression' >= 0))": 1,
    "(('A: MemberExpression' || 'B: string') + 'C: string')": 1,
    "('A: Identifier' && ('B: MemberExpression' !== 'C: Identifier'))": 1,
    "('A: CallExpression' !== 0)": 1,
    "((('A: string' + 'B: string') + 'C: CallExpression') + 'D: string')": 1,
    "((('A: UnaryExpression' !== \"boolean\") ? false : 'B: MemberExpression') || !(!('C: MemberExpression')))": 1,
    "((typeof('A: MemberExpression') !== \"boolean\") ? false : 'B: MemberExpression')": 1,
    "('A: Identifier' && (('B: UnaryExpression' !== \"boolean\") ? true : 'C: MemberExpression'))": 1,
    "('A: MemberExpression' || null)": 1,
    "((('A: string' + 'B: string') + 'C: Identifier') + 'D: string')": 1,
    "(('A: string' + 'B: string') + 'C: Identifier')": 1,
    "('A: Identifier' ? 'B: CallExpression' : null)": 1,
    "(('A: CallExpression' / 'B: number') - 'C: number')": 1,
    "(('A: MemberExpression' === 'B: string') || (0 === 'C: CallExpression'))": 1,
    "('A: Identifier' / 'B: MemberExpression')": 1,
    "('A: CallExpression' || ('B: MemberExpression' && 'C: CallExpression'))": 1,
    "('A: CallExpression' || !(!('B: MemberExpression')))": 1,
    "((!('A: UnaryExpression') || !('B: UnaryExpression')) || !(!('C: MemberExpression')))": 1,
    "((!('A: UnaryExpression') || !('B: UnaryExpression')) || (('C: UnaryExpression' === \"boolean\") ? 'D: MemberExpression' : !('E: UnaryExpression')))": 1,
    "((typeof('A: MemberExpression') === \"boolean\") ? 'B: MemberExpression' : !(!('C: MemberExpression')))": 1,
    "('A: MemberExpression' && (typeof('B: MemberExpression') === \"string\"))": 1,
    "(('A: CallExpression' >= 0) && ('B: string' === 'C: Identifier'))": 1,
    "(('A: Identifier' && 'B: MemberExpression') || 'C: MemberExpression')": 1,
    "(!('A: Identifier') || !('B: MemberExpression'))": 1,
    "('A: CallExpression' + 1)": 1,
    "((('A: MemberExpression' + 'B: string') + 'C: CallExpression') + 'D: string')": 1,
    "('A: Identifier' ? 'B: NewExpression' : 'C: ObjectExpression')": 1,
    "(('A: Identifier' / 'B: Identifier') | 0)": 1,
    "('A: MemberExpression' + 'B: number')": 1
}