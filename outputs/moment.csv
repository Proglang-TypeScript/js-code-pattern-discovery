Found 57524 patterns and 1476 unique patterns, 3 files could not be parsed:
{
    "('A: string' + 'B: Identifier')": 4899,
    "(('A: string' + 'B: Identifier') + 'C: string')": 3787,
    "('A: Identifier' < 'B: number')": 2762,
    "('A: Identifier' + 'B: string')": 2511,
    "('A: string' === 'B: Identifier')": 1972,
    "typeof('A: Identifier')": 1511,
    "('A: Identifier' < 'B: MemberExpression')": 1306,
    "((('A: string' + 'B: Identifier') + 'C: string') + 'D: Identifier')": 1215,
    "-(1)": 1045,
    "((('A: BinaryExpression' + 'B: string') + 'C: Identifier') + 'D: string')": 846,
    "('A: number' === 'B: Identifier')": 788,
    "('A: Identifier' % 'B: number')": 770,
    "!('A: CallExpression')": 711,
    "('A: Identifier' + 1)": 691,
    "-('A: number')": 667,
    "(typeof('A: Identifier') === 'function')": 656,
    "('A: string' + 'B: CallExpression')": 614,
    "+('A: Identifier')": 565,
    "('A: Identifier' !== 'B: string')": 549,
    "('A: Identifier' ? 'B: string' : 'C: string')": 532,
    "('A: Identifier' != null)": 526,
    "('A: Identifier' <= 'B: number')": 488,
    "('A: Identifier' || 'B: Identifier')": 478,
    "('A: Identifier' + 'B: number')": 428,
    "('A: Identifier' && 'B: MemberExpression')": 383,
    "(1 === 'A: Identifier')": 362,
    "(typeof('A: Identifier') !== 'undefined')": 362,
    "('A: string' + 'B: MemberExpression')": 358,
    "(typeof('A: Identifier') === 'object')": 347,
    "(('A: Identifier' || 'B: Identifier') ? 'C: string' : 'D: string')": 343,
    "('A: MemberExpression' + 'B: string')": 332,
    "('A: MemberExpression' != null)": 331,
    "((typeof('A: Identifier') === 'object') && (typeof('B: Identifier') !== 'undefined'))": 327,
    "((typeof('A: Identifier') === 'function') && 'B: MemberExpression')": 327,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' === 'function')) ? 'D: CallExpression' : (('E: BinaryExpression' && 'F: MemberExpression') ? 'G: CallExpression' : 'H: CallExpression'))": 324,
    "((('A: UnaryExpression' === 'object') && ('B: UnaryExpression' !== 'undefined')) && (typeof('C: Identifier') === 'function'))": 324,
    "((('A: UnaryExpression' === 'function') && 'B: MemberExpression') ? 'C: CallExpression' : 'D: CallExpression')": 324,
    "('A: number' + 'B: Identifier')": 306,
    "(('A: MemberExpression' + 'B: string') + 'C: MemberExpression')": 300,
    "(('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier'))": 299,
    "!(0)": 298,
    "(('A: Identifier' + 'B: string') + 'C: Identifier')": 288,
    "(null == 'A: Identifier')": 285,
    "(('A: string' + 'B: CallExpression') + 'C: string')": 284,
    "((('A: Identifier' + 'B: string') + 'C: Identifier') + 'D: string')": 272,
    "(('A: Identifier' + 'B: string') + ('C: Identifier' + 1))": 270,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + ('D: Identifier' + 1))": 250,
    "('A: CallExpression' !== 1)": 222,
    "('A: MemberExpression' === 'B: Identifier')": 221,
    "('A: Identifier' < 'B: Identifier')": 207,
    "('A: MemberExpression' !== 0)": 203,
    "(-(1) === 'A: Identifier')": 201,
    "('A: Identifier' + 'B: Identifier')": 191,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 191,
    "('A: MemberExpression' !== 1)": 188,
    "(('A: Identifier' != null) && ('B: MemberExpression' === 'C: Identifier'))": 187,
    "(('A: Identifier' != null) && ('B: CallExpression' === 'C: MemberExpression'))": 187,
    "('A: CallExpression' === 'B: MemberExpression')": 187,
    "('A: Identifier' >= 'B: number')": 180,
    "!('A: Identifier')": 177,
    "('A: number' * 'B: Identifier')": 165,
    "('A: Identifier' / 'B: number')": 165,
    "('A: CallExpression' ? 'B: string' : 'C: string')": 161,
    "!('A: MemberExpression')": 160,
    "(('A: string' + ('B: BinaryExpression' ? 'C: string' : '')) + 'D: string')": 154,
    "('A: string' + (('B: CallExpression' !== 1) ? 'C: string' : ''))": 148,
    "(('A: CallExpression' !== 1) ? 'B: string' : '')": 148,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 144,
    "!(!(~('A: CallExpression')))": 141,
    "!(~('A: CallExpression'))": 141,
    "~('A: CallExpression')": 141,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 137,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + 'D: CallExpression')": 137,
    "((('A: string' + 'B: CallExpression') + 'C: string') + 'D: Identifier')": 137,
    "('A: Identifier' + ('B: CallExpression' ? 'C: string' : 'D: string'))": 126,
    "('A: Identifier' ? 'B: MemberExpression' : 'C: MemberExpression')": 122,
    "(('A: Identifier' < 'B: number') ? 'C: string' : 'D: string')": 116,
    "!(1)": 112,
    "(0 === 'A: Identifier')": 108,
    "(('A: Identifier' >= 'B: number') ? 'C: Identifier' : ('D: Identifier' + 'E: number'))": 100,
    "(0 === 'A: CallExpression')": 100,
    "(('A: Identifier' % 'B: number') / 'C: number')": 98,
    "void(0)": 97,
    "('A: Identifier' - 'B: Identifier')": 97,
    "(('A: string' + ('B: BinaryExpression' ? 'C: string' : 'D: string')) + 'E: string')": 96,
    "('A: CallExpression' && 'B: CallExpression')": 91,
    "('A: Identifier' !== -(1))": 90,
    "(('A: number' === 'B: Identifier') || ('C: number' === 'D: Identifier'))": 89,
    "('A: MemberExpression' || 'B: MemberExpression')": 86,
    "('A: number' * 'B: CallExpression')": 82,
    "('A: string' === 'B: CallExpression')": 81,
    "('A: CallExpression' !== 'B: CallExpression')": 81,
    "('A: number' <= 'B: Identifier')": 79,
    "('A: CallExpression' - 1)": 78,
    "(('A: Identifier' < 'B: number') ? 'C: Identifier' : ('D: Identifier' + 'E: number'))": 77,
    "((('A: number' === 'B: Identifier') || ('C: number' === 'D: Identifier')) || ('E: number' === 'F: Identifier'))": 77,
    "~(~(('A: BinaryExpression' / 'B: number')))": 77,
    "~((('A: Identifier' % 'B: number') / 'C: number'))": 77,
    "(('A: Identifier' % 'B: number') >= 'C: number')": 75,
    "('A: MemberExpression' === 0)": 74,
    "('A: string' + (('B: CallExpression' !== 1) ? 'C: string' : 'D: string'))": 74,
    "(('A: CallExpression' !== 1) ? 'B: string' : 'C: string')": 74,
    "(('A: number' === 'B: Identifier') ? 'C: string' : (('D: number' === 'E: Identifier') ? 'F: string' : 'G: string'))": 74,
    "(('A: number' === 'B: Identifier') ? 'C: string' : 'D: string')": 74,
    "('A: CallExpression' % 'B: number')": 71,
    "('A: Identifier' > 'B: number')": 70,
    "('A: Identifier' + (('B: Identifier' || 'C: Identifier') ? 'D: string' : 'E: string'))": 70,
    "('A: Identifier' + ('B: Identifier' ? 'C: string' : 'D: string'))": 70,
    "('A: number' === 'B: CallExpression')": 70,
    "('A: MemberExpression' || 0)": 70,
    "('A: Identifier' === 'B: Identifier')": 68,
    "((0 === 'A: CallExpression') ? 'B: string' : 'C: string')": 67,
    "('A: CallExpression' - 'B: CallExpression')": 67,
    "(-('A: number') * 'B: number')": 66,
    "('A: CallExpression' + 'B: string')": 65,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: Identifier' < 'E: number') ? 'F: string' : 'G: string'))": 65,
    "('A: Identifier' < 0)": 64,
    "('A: Identifier' <= 'B: MemberExpression')": 63,
    "('A: CallExpression' + 1)": 61,
    "((1 === 'A: Identifier') ? 'B: string' : (('C: number' === 'D: Identifier') ? 'E: string' : ('F: BinaryExpression' ? 'G: string' : 'H: string')))": 60,
    "(('A: string' + ('B: BinaryExpression' ? 'C: string' : 'D: ConditionalExpression')) + 'E: string')": 60,
    "('A: MemberExpression' == null)": 60,
    "(1 !== 'A: CallExpression')": 60,
    "('A: Identifier' instanceof 'B: Identifier')": 59,
    "('A: CallExpression' || 'B: CallExpression')": 59,
    "('A: number' * 'B: number')": 59,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: Identifier' < 'E: number') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: string')))": 58,
    "('A: number' == 'B: Identifier')": 58,
    "(null != 'A: MemberExpression')": 58,
    "(('A: Identifier' % 'B: number') <= 'C: number')": 56,
    "('A: CallExpression' ? 'B: MemberExpression' : 'C: MemberExpression')": 56,
    "(('A: MemberExpression' <= 'B: Identifier') && ('C: Identifier' <= 'D: MemberExpression'))": 56,
    "('A: MemberExpression' <= 'B: Identifier')": 56,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: Identifier' < 'E: number') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: ConditionalExpression')))": 56,
    "('A: Identifier' >= 0)": 55,
    "((~('A: UnaryExpression') === 1) ? 'B: string' : ((1 === 'C: Identifier') ? 'D: string' : ('E: BinaryExpression' ? 'F: string' : 'G: ConditionalExpression')))": 55,
    "(~(~('A: BinaryExpression')) === 1)": 55,
    "((1 === 'A: Identifier') ? 'B: string' : 'C: string')": 53,
    "(typeof('A: Identifier') === 'string')": 52,
    "(('A: Identifier' + 'B: Identifier') + 'C: string')": 51,
    "('A: CallExpression' / 'B: number')": 51,
    "(('A: Identifier' !== -(1)) ? 'B: Identifier' : null)": 50,
    "('A: MemberExpression' - 'B: number')": 50,
    "(('A: number' === 'B: Identifier') && 'C: AssignmentExpression')": 50,
    "('A: MemberExpression' === 'B: string')": 49,
    "('A: MemberExpression' < 0)": 49,
    "('A: string' + (('B: CallExpression' > 1) ? 'C: string' : ('D: BinaryExpression' ? 'E: string' : 'F: string')))": 48,
    "(('A: CallExpression' > 1) ? 'B: string' : ((0 === 'C: CallExpression') ? 'D: string' : 'E: string'))": 48,
    "('A: CallExpression' > 1)": 48,
    "('A: Identifier' - 1)": 47,
    "(null != 'A: Identifier')": 46,
    "(1 === ('A: Identifier' % 'B: number'))": 45,
    "('A: Identifier' * 'B: CallExpression')": 45,
    "(('A: string' + 'B: MemberExpression') + 'C: string')": 45,
    "('A: Identifier' > 0)": 44,
    "('A: Identifier' + ((1 === 'B: Identifier') ? 'C: string' : 'D: string'))": 44,
    "(('A: Identifier' + 'B: string') + 'C: CallExpression')": 43,
    "('A: Identifier' + (('B: MemberExpression' || 'C: MemberExpression') || 'D: MemberExpression'))": 42,
    "(('A: MemberExpression' || 'B: MemberExpression') || 'C: MemberExpression')": 42,
    "(('A: Identifier' % 'B: number') < 'C: number')": 42,
    "-('A: Identifier')": 42,
    "((('A: LogicalExpression' && 'B: UnaryExpression') && !('C: MemberExpression')) && !('D: MemberExpression'))": 42,
    "('A: MemberExpression' && 'B: Identifier')": 42,
    "('A: ThisExpression' - 'B: Identifier')": 42,
    "(('A: Identifier' < 'B: MemberExpression') && 'C: ArrayExpression')": 42,
    "(('A: Identifier' <= 1) && 'B: ArrayExpression')": 42,
    "('A: Identifier' <= 1)": 42,
    "(true === 'A: Identifier')": 40,
    "(('A: number' * 'B: Identifier') + 'C: Identifier')": 40,
    "(('A: string' + ('B: BinaryExpression' ? 'C: string' : \"\")) + 'D: string')": 40,
    "('A: string' + ((1 !== 'B: CallExpression') ? 'C: string' : \"\"))": 40,
    "((1 !== 'A: CallExpression') ? 'B: string' : \"\")": 40,
    "(0 === ('A: Identifier' % 'B: number'))": 39,
    "delete('A: MemberExpression')": 36,
    "('A: MemberExpression' ? 'B: string' : '')": 36,
    "('A: CallExpression' || 'B: AssignmentExpression')": 36,
    "(-(1) !== 'A: AssignmentExpression')": 36,
    "(('A: Identifier' % 'B: number') !== 'C: number')": 35,
    "('A: Identifier' && 'B: CallExpression')": 35,
    "('A: string' + (('B: Identifier' || 'C: Identifier') ? 'D: string' : 'E: string'))": 35,
    "('A: MemberExpression' === 1)": 35,
    "('A: CallExpression' !== -(1))": 35,
    "typeof('A: MemberExpression')": 35,
    "(('A: Identifier' && ('B: string' === 'C: Identifier')) && 'D: CallExpression')": 35,
    "('A: Identifier' && ('B: string' === 'C: Identifier'))": 35,
    "(('A: MemberExpression' && 'B: Identifier') ? 'C: MemberExpression' : 'D: MemberExpression')": 35,
    "('A: CallExpression' ? 'B: Identifier' : 'C: CallExpression')": 35,
    "('A: Identifier' ? 'B: string' : ('C: Identifier' ? 'D: string' : 'E: string'))": 34,
    "('' + 'A: Identifier')": 34,
    "(('A: number' <= 'B: Identifier') ? 'C: Identifier' : ('D: Identifier' + 'E: number'))": 34,
    "('' + 'A: CallExpression')": 32,
    "(('' + 'A: Identifier') + 'B: string')": 32,
    "('A: CallExpression' && !('B: CallExpression'))": 32,
    "('A: Identifier' && 'B: Identifier')": 31,
    "('A: Identifier' - 'B: CallExpression')": 31,
    "((('A: Identifier' % 'B: number') >= 'C: number') && (('D: Identifier' % 'E: number') <= 'F: number'))": 30,
    "(('A: Identifier' >= 'B: number') ? 'C: number' : null)": 30,
    "('A: CallExpression' - 'B: Identifier')": 30,
    "(('A: MemberExpression' < 0) || ('B: MemberExpression' > 'C: number'))": 30,
    "('A: MemberExpression' > 'B: number')": 30,
    "('A: Identifier' || '')": 30,
    "('A: Identifier' ? (('B: Identifier' + 'C: Identifier') + 'D: string') : '')": 30,
    "('A: number' <= ('B: Identifier' % 'C: number'))": 30,
    "(1 == 'A: Identifier')": 30,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + 'D: Identifier')": 30,
    "('A: CallExpression' instanceof 'B: Identifier')": 30,
    "('A: Identifier' + (('B: LogicalExpression' || 'C: BinaryExpression') ? 'D: string' : 'E: string'))": 28,
    "((1 === 'A: Identifier') || ('B: number' === 'C: Identifier'))": 28,
    "(('A: string' === 'B: Identifier') && 'C: Identifier')": 28,
    "('A: MemberExpression' - 'B: MemberExpression')": 28,
    "('A: Identifier' <= 0)": 28,
    "('A: CallExpression' + 'B: Identifier')": 28,
    "('A: Identifier' < 1)": 28,
    "((null == 'A: Identifier') ? 'B: Identifier' : 'C: CallExpression')": 28,
    "('A: MemberExpression' * 'B: number')": 28,
    "(null === 'A: Identifier')": 28,
    "('A: Identifier' || 'B: CallExpression')": 28,
    "('A: CallExpression' || 'B: string')": 28,
    "('A: CallExpression' < 'B: CallExpression')": 28,
    "+(1)": 28,
    "('A: number' < 'B: Identifier')": 28,
    "(((0 === 'A: CallExpression') || ('B: number' === 'C: CallExpression')) ? 'D: string' : 'E: string')": 26,
    "((0 === 'A: CallExpression') || ('B: number' === 'C: CallExpression'))": 26,
    "((1 === ('A: Identifier' % 'B: number')) && (('C: Identifier' % 'D: number') !== 'E: number'))": 25,
    "((('A: Identifier' % 'B: number') < 'C: number') || (('D: Identifier' % 'E: number') >= 'F: number'))": 25,
    "('A: number' === ('B: Identifier' % 'C: number'))": 25,
    "+('A: CallExpression')": 25,
    "(('' + 'A: CallExpression') + 'B: CallExpression')": 24,
    "(('A: Identifier' || 'B: Identifier') ? ('C: Identifier' + ('D: CallExpression' ? 'E: string' : 'F: string')) : ('G: Identifier' + 'H: string'))": 24,
    "('A: number' * ('B: number' * 'C: number'))": 24,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: Identifier')": 23,
    "('A: CallExpression' > 'B: number')": 23,
    "('A: Identifier' ? 'B: MemberExpression' : 'C: Identifier')": 23,
    "('A: MemberExpression' ? 'B: Identifier' : 'C: Identifier')": 23,
    "-('A: CallExpression')": 23,
    "('A: Identifier' + 'B: CallExpression')": 22,
    "('A: MemberExpression' === 'B: number')": 22,
    "('A: Identifier' !== null)": 22,
    "((1 == 'A: Identifier') ? 'B: string' : (('C: number' == 'D: Identifier') ? 'E: string' : ('F: BinaryExpression' ? 'G: string' : 'H: string')))": 22,
    "(('A: number' == 'B: Identifier') ? 'C: string' : (('D: number' == 'E: Identifier') ? 'F: string' : 'G: string'))": 22,
    "(('A: number' == 'B: Identifier') ? 'C: string' : 'D: string')": 22,
    "((0 === 'A: Identifier') ? 0 : ((1 === 'B: Identifier') ? 1 : ('C: BinaryExpression' ? 'D: number' : 'E: ConditionalExpression')))": 21,
    "((1 === 'A: Identifier') ? 1 : (('B: number' === 'C: Identifier') ? 'D: number' : ('E: LogicalExpression' ? 'F: number' : 'G: ConditionalExpression')))": 21,
    "(('A: number' === 'B: Identifier') ? 'C: number' : (('D: BinaryExpression' && 'E: BinaryExpression') ? 'F: number' : ('G: BinaryExpression' ? 'H: number' : 'I: number')))": 21,
    "('A: Identifier' ? 0 : 1)": 21,
    "(('A: Identifier' % 'B: number') - 'C: Identifier')": 21,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: BinaryExpression' || 'D: BinaryExpression')) ? 'E: MemberExpression' : 'F: MemberExpression')": 21,
    "('A: MemberExpression' + 'B: CallExpression')": 21,
    "~(~(('A: Identifier' / 'B: number')))": 21,
    "~(('A: Identifier' / 'B: number'))": 21,
    "('A: MemberExpression' || 'B: Identifier')": 21,
    "('A: Identifier' > 'B: CallExpression')": 21,
    "('A: CallExpression' || 'B: ArrayExpression')": 21,
    "('A: MemberExpression' <= 'B: number')": 21,
    "(+('A: Identifier') + ('B: number' * 'C: Identifier'))": 21,
    "('A: CallExpression' < 'B: number')": 21,
    "('A: CallExpression' > 'B: CallExpression')": 21,
    "('A: number' * ('B: CallExpression' - 'C: CallExpression'))": 21,
    "('A: CallExpression' + ('B: Identifier' * 'C: Identifier'))": 21,
    "('A: Identifier' * 'B: Identifier')": 21,
    "('A: CallExpression' === 'B: CallExpression')": 21,
    "(('A: ThisExpression' - 'B: Identifier') / 'C: number')": 21,
    "('A: MemberExpression' * 'B: Identifier')": 21,
    "(('A: number' * 'B: Identifier') + ('C: Identifier' / 'D: number'))": 21,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: Identifier' >= 'D: number')) ? 'E: string' : 'F: string')": 20,
    "(((1 === 'A: Identifier') || ('B: number' === 'C: Identifier')) || ('D: Identifier' >= 'E: number'))": 20,
    "('A: string' + ('B: MemberExpression' ? 'C: string' : ''))": 20,
    "(('A: Identifier' < 'B: number') && ('C: Identifier' >= 0))": 20,
    "(('A: Identifier' != null) ? 'B: ThisExpression' : 'C: Identifier')": 20,
    "!(('A: CallExpression' && 'B: CallExpression'))": 20,
    "('A: string' + ((1 !== 'B: CallExpression') ? 'C: string' : 'D: string'))": 20,
    "((1 !== 'A: CallExpression') ? 'B: string' : 'C: string')": 20,
    "(typeof('A: Identifier') == \"string\")": 20,
    "('A: Identifier' + (('B: UnaryExpression' == 1) ? 'C: string' : ('D: BinaryExpression' ? 'E: string' : 'F: ConditionalExpression')))": 20,
    "((~('A: UnaryExpression') == 1) ? 'B: string' : ((1 == 'C: Identifier') ? 'D: string' : ('E: BinaryExpression' ? 'F: string' : 'G: ConditionalExpression')))": 20,
    "(~(~('A: BinaryExpression')) == 1)": 20,
    "(0 <= 'A: Identifier')": 20,
    "(void(0) === 'A: Identifier')": 19,
    "('A: MemberExpression' ? 'B: CallExpression' : 'C: CallExpression')": 19,
    "((('A: LogicalExpression' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || (('E: Identifier' < 'F: MemberExpression') && 'G: ArrayExpression'))": 19,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: CallExpression')": 18,
    "((('A: string' + 'B: CallExpression') + 'C: string') + 'D: CallExpression')": 18,
    "('A: CallExpression' ? 'B: Identifier' : 'C: Identifier')": 18,
    "(('A: string' === 'B: Identifier') ? (('C: Identifier' < 'D: number') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: string' === 'I: Identifier') ? 'J: Identifier' : ('K: BinaryExpression' ? 'L: ConditionalExpression' : 'M: ConditionalExpression')))": 18,
    "(('A: string' === 'B: Identifier') ? 'C: Identifier' : (('D: string' === 'E: Identifier') ? ('F: BinaryExpression' ? 'G: Identifier' : 'H: BinaryExpression') : ('I: BinaryExpression' ? 'J: BinaryExpression' : 'K: UnaryExpression')))": 18,
    "(('A: string' === 'B: Identifier') ? ('C: Identifier' + 'D: number') : void(0))": 18,
    "('A: MemberExpression' === false)": 17,
    "('A: Identifier' - 'B: MemberExpression')": 16,
    "(('A: Identifier' || 'B: Identifier') ? 'C: MemberExpression' : 'D: MemberExpression')": 16,
    "(1 === 'A: CallExpression')": 16,
    "(1 == ('A: Identifier' % 'B: number'))": 16,
    "(('A: string' === 'B: Identifier') ? (('C: number' <= 'D: Identifier') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: BinaryExpression' || 'I: BinaryExpression') ? ('J: Identifier' + 'K: number') : void(0)))": 16,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) ? ('E: Identifier' + 'F: number') : void(0))": 16,
    "('A: string' !== 'B: Identifier')": 16,
    "(0 < 'A: Identifier')": 16,
    "((('A: BinaryExpression' >= 'B: number') && ('C: BinaryExpression' <= 'D: number')) ? 'E: number' : (('F: BinaryExpression' >= 'G: number') ? 'H: number' : 'I: number'))": 15,
    "((('A: Identifier' % 'B: number') >= 'C: number') ? 'D: number' : 'E: number')": 15,
    "(((1 === 'A: BinaryExpression') && ('B: BinaryExpression' !== 'C: number')) ? 'D: MemberExpression' : (('E: LogicalExpression' && 'F: LogicalExpression') ? 'G: MemberExpression' : 'H: MemberExpression'))": 15,
    "((('A: BinaryExpression' >= 'B: number') && ('C: BinaryExpression' <= 'D: number')) && (('E: BinaryExpression' < 'F: number') || ('G: BinaryExpression' >= 'H: number')))": 15,
    "(('A: Identifier' > 'B: number') && ('C: Identifier' < 'D: number'))": 15,
    "(('A: string' === 'B: Identifier') && ('C: Identifier' >= 'D: number'))": 15,
    "('A: Identifier' + '')": 15,
    "(('A: Identifier' instanceof 'B: Identifier') || ('C: string' === 'D: CallExpression'))": 15,
    "(false === 'A: Identifier')": 15,
    "('A: MemberExpression' || 'B: CallExpression')": 15,
    "(('A: string' + ('B: MemberExpression' ? 'C: string' : '')) + 'D: Identifier')": 15,
    "('A: CallExpression' ? 'B: number' : 'C: number')": 15,
    "(('A: CallExpression' % 'B: number') || 'C: number')": 15,
    "('A: CallExpression' || 'B: number')": 15,
    "('A: MemberExpression' !== 'B: MemberExpression')": 15,
    "('A: MemberExpression' > 0)": 15,
    "('A: string' in 'B: Identifier')": 15,
    "(('A: number' * 'B: number') + 'C: number')": 15,
    "(('A: Identifier' - 'B: CallExpression') - 1)": 15,
    "(('A: CallExpression' !== 'B: CallExpression') ? 'C: string' : '')": 15,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: Identifier' ? 'D: BinaryExpression' : '')) + ('E: Identifier' ? ('F: BinaryExpression' + 'G: string') : ''))": 15,
    "(\"undefined\" != typeof('A: Identifier'))": 15,
    "((('A: BinaryExpression' && 'B: BinaryExpression') || ('C: BinaryExpression' && 'D: BinaryExpression')) || ('E: string' === 'F: Identifier'))": 14,
    "(('A: string' === 'B: Identifier') && ('C: Identifier' < 'D: number'))": 14,
    "((1 === 'A: Identifier') ? 'B: string' : (('C: number' === 'D: Identifier') ? 'E: string' : ('F: BinaryExpression' ? 'G: string' : 'H: ConditionalExpression')))": 14,
    "(('A: number' === 'B: Identifier') ? 'C: string' : (('D: number' === 'E: Identifier') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: string')))": 14,
    "('A: CallExpression' ? 'B: string' : ('C: CallExpression' ? 'D: string' : 'E: string'))": 14,
    "('A: Identifier' + ('B: CallExpression' ? 'C: MemberExpression' : 'D: MemberExpression'))": 14,
    "((('A: string' === 'B: Identifier') && 'C: Identifier') && ('D: string' === 'E: Identifier'))": 14,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: MemberExpression')": 14,
    "(('A: Identifier' || 'B: Identifier') || 'C: Identifier')": 14,
    "('A: Identifier' && !('B: MemberExpression'))": 14,
    "(!('A: Identifier') && 'B: CallExpression')": 14,
    "(('A: number' + 'B: Identifier') - 'C: Identifier')": 14,
    "('A: number' * ('B: Identifier' - 1))": 14,
    "('A: number' * ('B: Identifier' - 'C: Identifier'))": 14,
    "('A: MemberExpression' > 'B: CallExpression')": 14,
    "('A: MemberExpression' && (-(1) === 'B: Identifier'))": 14,
    "('A: CallExpression' - 'B: MemberExpression')": 14,
    "('A: MemberExpression' === 'B: MemberExpression')": 14,
    "((+('A: Identifier') + ('B: number' * 'C: Identifier')) + ('D: number' * 'E: Identifier'))": 14,
    "('A: MemberExpression' - 1)": 14,
    "(('A: MemberExpression' === 'B: string') ? -(1) : 1)": 14,
    "-('A: MemberExpression')": 14,
    "((('A: LogicalExpression' || 'B: CallExpression') || 'C: CallExpression') || 'D: CallExpression')": 14,
    "(('A: MemberExpression' === 'B: string') ? 'C: CallExpression' : !('D: CallExpression'))": 14,
    "((('A: ThisExpression' - 'B: Identifier') - 'C: Identifier') / 'D: number')": 14,
    "(('A: ThisExpression' - 'B: Identifier') - 'C: Identifier')": 14,
    "('A: CallExpression' && (('B: CallExpression' && 'C: CallExpression') || 'D: CallExpression'))": 14,
    "(('A: CallExpression' && 'B: CallExpression') || 'C: CallExpression')": 14,
    "('A: CallExpression' - ('B: CallExpression' % 'C: number'))": 14,
    "('A: CallExpression' - ('B: CallExpression' - 1))": 14,
    "('A: MemberExpression' <= 'B: MemberExpression')": 14,
    "~(~(('A: CallExpression' / 'B: number')))": 14,
    "~(('A: CallExpression' / 'B: number'))": 14,
    "(('A: Identifier' + 'B: Identifier') % 'C: number')": 14,
    "(('A: number' * 'B: Identifier') / 'C: number')": 14,
    "(('A: Identifier' % 'B: number') != 'C: number')": 14,
    "(('A: string' === 'B: Identifier') ? (('C: number' <= 'D: Identifier') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: string' === 'I: Identifier') ? ('J: Identifier' + 'K: number') : void(0)))": 14,
    "(0 == ('A: Identifier' % 'B: number'))": 14,
    "('A: CallExpression' && 'B: AssignmentExpression')": 14,
    "('A: MemberExpression' ? 'B: string' : \"\")": 14,
    "((('A: Identifier' + 'B: string') + ('C: Identifier' + 1)) + 'D: string')": 14,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + 'D: MemberExpression')": 14,
    "+('A: number')": 14,
    "((('A: Identifier' % 'B: Identifier') + 'C: Identifier') % 'D: Identifier')": 13,
    "(('A: Identifier' % 'B: Identifier') + 'C: Identifier')": 13,
    "('A: Identifier' % 'B: Identifier')": 13,
    "(('A: Identifier' - 'B: Identifier') / 'C: number')": 13,
    "('A: Identifier' ? 'B: MemberExpression' : ('C: Identifier' ? 'D: MemberExpression' : 'E: MemberExpression'))": 12,
    "(typeof('A: Identifier') === 'number')": 12,
    "((('' + 'A: CallExpression') + 'B: CallExpression') + 'C: CallExpression')": 12,
    "('A: string' + 'B: string')": 12,
    "('A: Identifier' !== 'B: Identifier')": 12,
    "((('A: LogicalExpression' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || (('E: Identifier' <= 1) && 'F: ArrayExpression'))": 12,
    "(('A: Identifier' || ('B: BinaryExpression' && 'C: ArrayExpression')) || (('D: Identifier' < 'E: MemberExpression') && 'F: ArrayExpression'))": 12,
    "('A: Identifier' || (('B: Identifier' <= 1) && 'C: ArrayExpression'))": 12,
    "(('A: number' <= ('B: Identifier' % 'C: number')) && (('D: Identifier' % 'E: number') <= 'F: number'))": 12,
    "(('A: number' <= 'B: Identifier') ? 'C: number' : null)": 12,
    "((1 === 'A: Identifier') ? 'B: string' : (('C: LogicalExpression' || 'D: BinaryExpression') ? 'E: string' : 'F: string'))": 12,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: number' === 'D: Identifier')) ? 'E: string' : 'F: string')": 12,
    "(!(0) === 'A: Identifier')": 12,
    "('A: string' + ((1 < 'B: CallExpression') ? 'C: string' : ('D: BinaryExpression' ? 'E: string' : 'F: string')))": 12,
    "((1 < 'A: CallExpression') ? 'B: string' : ((0 === 'C: CallExpression') ? 'D: string' : 'E: string'))": 12,
    "(1 < 'A: CallExpression')": 12,
    "(-(1) !== 'A: CallExpression')": 12,
    "('A: MemberExpression' || 'B: SequenceExpression')": 12,
    "('A: Identifier' && 'B: AssignmentExpression')": 12,
    "(('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression'))": 12,
    "('A: number' < 'B: MemberExpression')": 12,
    "('A: Identifier' ? (('B: Identifier' + 'C: Identifier') + 'D: string') : \"\")": 12,
    "((('A: BinaryExpression' + 'B: BinaryExpression') + 'C: string') + 'D: CallExpression')": 12,
    "((('A: MemberExpression' + 'B: string') + 'C: MemberExpression') + 'D: string')": 12,
    "('A: number' / 'B: number')": 12,
    "((('A: UnaryExpression' !== 'undefined') && ('B: Identifier' instanceof 'C: Identifier')) || ('D: string' === 'E: CallExpression'))": 11,
    "((typeof('A: Identifier') !== 'undefined') && ('B: Identifier' instanceof 'C: Identifier'))": 11,
    "(('A: number' === 'B: CallExpression') ? 'C: string' : '')": 11,
    "(('A: string' + 'B: string') + 'C: string')": 11,
    "+('A: NewExpression')": 11,
    "(typeof('A: Identifier') == \"object\")": 11,
    "((('A: string' === 'B: Identifier') && ('C: Identifier' >= 'D: number')) || (('E: string' === 'F: Identifier') && ('G: Identifier' < 'H: number')))": 10,
    "(('A: Identifier' > 1) && ('B: Identifier' < 'C: number'))": 10,
    "('A: Identifier' > 1)": 10,
    "(('A: CallExpression' + 'B: string') + 'C: Identifier')": 10,
    "((1 === 'A: Identifier') ? 'B: string' : (('C: number' === 'D: BinaryExpression') ? 'E: string' : 'F: string'))": 10,
    "(('A: number' === ('B: Identifier' % 'C: number')) ? 'D: string' : 'E: string')": 10,
    "(('A: Identifier' > 'B: number') ? 'C: Identifier' : ('D: Identifier' + 'E: number'))": 10,
    "((true === 'A: Identifier') ? 'B: string' : 'C: string')": 10,
    "(((1 === 'A: BinaryExpression') && ('B: BinaryExpression' !== 'C: number')) ? 'D: MemberExpression' : 'E: MemberExpression')": 10,
    "((('A: BinaryExpression' >= 1) && ('B: BinaryExpression' <= 'C: number')) && (('D: BinaryExpression' < 'E: number') || ('F: BinaryExpression' >= 'G: number')))": 10,
    "((('A: Identifier' % 'B: number') >= 1) && (('C: Identifier' % 'D: number') <= 'E: number'))": 10,
    "(('A: Identifier' % 'B: number') >= 1)": 10,
    "((1 === ('A: Identifier' % 'B: number')) ? 'C: MemberExpression' : 'D: MemberExpression')": 10,
    "(('A: CallExpression' !== -(1)) ? ('B: CallExpression' + 'C: string') : (('D: CallExpression' !== 'E: UnaryExpression') ? ('F: CallExpression' + 'G: string') : ('H: BinaryExpression' ? 'I: BinaryExpression' : 'J: BinaryExpression')))": 10,
    "(('A: CallExpression' !== -(1)) ? ('B: CallExpression' + 'C: string') : (('D: CallExpression' !== 'E: UnaryExpression') ? ('F: CallExpression' + 'G: string') : ('H: Identifier' + 'I: string')))": 10,
    "(('A: CallExpression' !== -(1)) ? ('B: CallExpression' + 'C: string') : ('D: Identifier' + 'E: string'))": 10,
    "((('A: Identifier' !== '') ? 'B: string' : '') + 'C: MemberExpression')": 10,
    "(('A: Identifier' !== '') ? 'B: string' : '')": 10,
    "('A: Identifier' !== '')": 10,
    "('' === 'A: Identifier')": 10,
    "(('A: MemberExpression' == null) || !('B: CallExpression'))": 10,
    "(typeof('A: Identifier') !== 'string')": 10,
    "('A: Identifier' !== true)": 10,
    "((true === 'A: Identifier') ? 'B: CallExpression' : ('C: Identifier' ? 'D: MemberExpression' : 'E: MemberExpression'))": 10,
    "('A: Identifier' > 'B: Identifier')": 10,
    "((true === 'A: Identifier') || (false === 'B: Identifier'))": 10,
    "(('A: Identifier' - 'B: Identifier') / ('C: Identifier' - 'D: Identifier'))": 10,
    "((('A: Identifier' === 'B: Identifier') || ('C: string' === 'D: Identifier')) || !('E: CallExpression'))": 10,
    "(('A: Identifier' === 'B: Identifier') || ('C: string' === 'D: Identifier'))": 10,
    "('A: Identifier' + ('B: MemberExpression' ? 0 : ('C: Identifier' * 'D: CallExpression')))": 10,
    "('A: MemberExpression' ? 0 : ('B: Identifier' * 'C: CallExpression'))": 10,
    "(('A: MemberExpression' <= 'B: MemberExpression') ? +(1) : -(1))": 10,
    "(typeof('A: Identifier') === 'boolean')": 10,
    "((1 == ('A: Identifier' % 'B: number')) && (('C: Identifier' % 'D: number') != 'E: number'))": 10,
    "((('A: Identifier' % 'B: number') < 'C: number') || ('D: number' <= ('E: Identifier' % 'F: number')))": 10,
    "('A: number' == ('B: Identifier' % 'C: number'))": 10,
    "(('A: number' < 'B: Identifier') ? ('C: Identifier' ? 'D: string' : 'E: string') : ('F: Identifier' ? 'G: string' : 'H: string'))": 10,
    "((null != 'A: MemberExpression') && 'B: CallExpression')": 10,
    "(\"\" + 'A: CallExpression')": 10,
    "('A: Identifier' || \"\")": 10,
    "('A: CallExpression' && 'B: SequenceExpression')": 10,
    "((-(1) !== 'A: AssignmentExpression') ? 'B: Identifier' : null)": 10,
    "((-(1) !== 'A: AssignmentExpression') || (-(1) !== 'B: AssignmentExpression'))": 10,
    "('A: MemberExpression' ? 'B: SequenceExpression' : 'C: SequenceExpression')": 10,
    "('A: number' * ('B: number' * ('C: number' * 'D: number')))": 10,
    "('A: number' + 'B: MemberExpression')": 10,
    "(('A: number' <= 'B: Identifier') && ('C: Identifier' <= 'D: number'))": 9,
    "((('A: Identifier' + 'B: string') + 'C: MemberExpression') + 'D: string')": 9,
    "(('A: Identifier' + 'B: string') + 'C: MemberExpression')": 9,
    "((('A: BinaryExpression' + 'B: CallExpression') + 'C: string') + 'D: MemberExpression')": 9,
    "((('A: Identifier' + 'B: string') + 'C: CallExpression') + 'D: string')": 9,
    "('A: Identifier' === 'B: CallExpression')": 9,
    "(!('A: CallExpression') && 'B: CallExpression')": 9,
    "(('A: Identifier' < -(1)) ? 'B: string' : (('C: Identifier' < 0) ? 'D: string' : ('E: BinaryExpression' ? 'F: string' : 'G: ConditionalExpression')))": 9,
    "('A: Identifier' < -(1))": 9,
    "(('A: Identifier' < 0) ? 'B: string' : (('C: Identifier' < 1) ? 'D: string' : ('E: BinaryExpression' ? 'F: string' : 'G: ConditionalExpression')))": 9,
    "(0 <= 'A: CallExpression')": 9,
    "('A: Identifier' <= 'B: Identifier')": 9,
    "('A: Identifier' ? ('B: Identifier' ? 'C: string' : '') : 'D: string')": 8,
    "('A: Identifier' ? 'B: string' : '')": 8,
    "('A: Identifier' in 'B: Identifier')": 8,
    "('A: CallExpression' || 0)": 8,
    "('A: CallExpression' ? 'B: Identifier' : 'C: FunctionExpression')": 8,
    "(('A: Identifier' && 'B: Identifier') ? 'C: Identifier' : 'D: Identifier')": 8,
    "('A: MemberExpression' || 'B: ObjectExpression')": 8,
    "('A: number' - (('B: Identifier' % 'C: number') % 'D: number'))": 8,
    "(('A: Identifier' % 'B: number') % 'C: number')": 8,
    "(('A: Identifier' <= 'B: number') ? 'C: CallExpression' : ('D: string' + 'E: Identifier'))": 8,
    "(('A: MemberExpression' === 'B: number') ? 'C: CallExpression' : 'D: CallExpression')": 8,
    "(('A: number' === 'B: Identifier') ? 0 : 'C: Identifier')": 8,
    "('A: MemberExpression' || 'B: string')": 8,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: number' <= 'D: Identifier')) ? 'E: string' : 'F: string')": 8,
    "(((1 === 'A: Identifier') || ('B: number' === 'C: Identifier')) || ('D: number' <= 'E: Identifier'))": 8,
    "(('A: Identifier' + 'B: string') + 'C: SequenceExpression')": 8,
    "(('A: string' === 'B: Identifier') && ('C: number' <= 'D: Identifier'))": 8,
    "(((1 !== 'A: Identifier') && ('B: LogicalExpression' || 'C: BinaryExpression')) ? 'D: string' : 'E: string')": 8,
    "((1 !== 'A: Identifier') && (('B: BinaryExpression' || 'C: BinaryExpression') || ('D: number' === 'E: Identifier')))": 8,
    "(1 !== 'A: Identifier')": 8,
    "(('A: string' !== 'B: Identifier') && ('C: string' !== 'D: Identifier'))": 8,
    "((0 < 'A: Identifier') && 'B: AssignmentExpression')": 8,
    "('A: Identifier' ? ('B: Identifier' + 'C: string') : ('D: Identifier' + ('E: Identifier' ? 'F: string' : 'G: string')))": 8,
    "(('A: string' === 'B: Identifier') ? 'C: Identifier' : (('D: string' === 'E: Identifier') ? ('F: BinaryExpression' ? 'G: Identifier' : 'H: BinaryExpression') : ('I: LogicalExpression' ? 'J: BinaryExpression' : 'K: UnaryExpression')))": 8,
    "(('A: CallExpression' !== 'B: CallExpression') ? 'C: string' : 'D: string')": 8,
    "(('A: number' === 'B: Identifier') ? (('C: Identifier' || 'D: Identifier') ? 'E: string' : 'F: string') : (('G: Identifier' < 'H: number') ? ('I: LogicalExpression' ? 'J: string' : 'K: string') : ('L: LogicalExpression' ? 'M: string' : 'N: string')))": 8,
    "(('A: Identifier' < 'B: number') ? (('C: Identifier' || 'D: Identifier') ? 'E: string' : 'F: string') : (('G: Identifier' || 'H: Identifier') ? 'I: string' : 'J: string'))": 8,
    "('A: string' + ('B: MemberExpression' ? 'C: string' : \"\"))": 8,
    "(('A: Identifier' < 'B: number') && (0 <= 'C: Identifier'))": 8,
    "((\"\" + 'A: CallExpression') + 'B: CallExpression')": 8,
    "(null != 'A: AssignmentExpression')": 8,
    "(!(0) !== 'A: Identifier')": 8,
    "!(!('A: CallExpression'))": 8,
    "(!('A: CallExpression') || !('B: CallExpression'))": 8,
    "('A: string' === 'B: AssignmentExpression')": 8,
    "((null != 'A: Identifier') ? 'B: ThisExpression' : 'C: Identifier')": 8,
    "('A: number' / ('B: number' * 'C: number'))": 8,
    "('A: number' / ('B: number' * ('C: number' * 'D: number')))": 8,
    "(('A: CallExpression' > 'B: number') && ('C: CallExpression' < 'D: number'))": 8,
    "((('A: Identifier' ? 'B: ConditionalExpression' : 'C: string') + 'D: CallExpression') + 'E: Identifier')": 7,
    "(('A: Identifier' ? ('B: Identifier' ? 'C: string' : '') : 'D: string') + 'E: CallExpression')": 7,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: number' === 'D: Identifier')) || ('E: number' === 'F: Identifier'))": 7,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: number' === 'D: Identifier')) || ('E: number' === 'F: Identifier'))": 7,
    "('A: Identifier' !== 'B: number')": 7,
    "(('A: Identifier' + ('B: Identifier' || 'C: Identifier')) ? 'D: string' : 'E: string')": 7,
    "('A: Identifier' + ('B: Identifier' || 'C: Identifier'))": 7,
    "((('A: ConditionalExpression' + 'B: string') + 'C: MemberExpression') + 'D: string')": 7,
    "((('A: CallExpression' ? 'B: string' : 'C: string') + 'D: string') + 'E: Identifier')": 7,
    "(('A: CallExpression' ? 'B: string' : 'C: string') + 'D: string')": 7,
    "(('A: MemberExpression' === 'B: string') ? 1 : 'C: CallExpression')": 7,
    "((1 === 'A: Identifier') ? 'B: string' : ('C: Identifier' + 'D: string'))": 7,
    "(('A: string' === 'B: Identifier') ? ('C: Identifier' + 'D: string') : (('E: Identifier' + 'F: Identifier') + 'G: string'))": 7,
    "('A: Identifier' + 'B: MemberExpression')": 7,
    "((1 === 'A: Identifier') ? 'B: MemberExpression' : (('C: BinaryExpression' && 'D: BinaryExpression') ? 'E: MemberExpression' : 'F: MemberExpression'))": 7,
    "((('A: BinaryExpression' && 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 7,
    "(~(~('A: BinaryExpression')) % 'B: number')": 7,
    "((typeof('A: Identifier') === 'number') || ('B: string' === 'C: CallExpression'))": 7,
    "('A: MemberExpression' >>> 0)": 7,
    "(('A: Identifier' in 'B: Identifier') && 'C: CallExpression')": 7,
    "((('A: LogicalExpression' && 'B: UnaryExpression') && !('C: MemberExpression')) && (!('D: MemberExpression') || ('E: MemberExpression' && 'F: Identifier')))": 7,
    "((('A: UnaryExpression' && 'B: BinaryExpression') && !('C: MemberExpression')) && !('D: MemberExpression'))": 7,
    "((!('A: CallExpression') && ('B: MemberExpression' < 0)) && !('C: MemberExpression'))": 7,
    "(!('A: CallExpression') && ('B: MemberExpression' < 0))": 7,
    "(!('A: MemberExpression') || ('B: MemberExpression' && 'C: Identifier'))": 7,
    "(('A: Identifier' && ('B: MemberExpression' === 0)) && ('C: MemberExpression' === 0))": 7,
    "('A: Identifier' && ('B: MemberExpression' === 0))": 7,
    "((('A: MemberExpression' === false) && ('B: UnaryExpression' !== 'undefined')) && 'C: MemberExpression')": 7,
    "(('A: MemberExpression' === false) && (typeof('B: Identifier') !== 'undefined'))": 7,
    "(typeof('A: MemberExpression') === 'object')": 7,
    "((('A: MemberExpression' || 'B: MemberExpression') + 'C: string') + 'D: MemberExpression')": 7,
    "(('A: MemberExpression' || 'B: MemberExpression') + 'C: string')": 7,
    "(('A: CallExpression' && !('B: CallExpression')) && 'C: CallExpression')": 7,
    "('A: CallExpression' || 'B: Identifier')": 7,
    "('A: Identifier' || !('B: Identifier'))": 7,
    "(((0 === 'A: BinaryExpression') && ('B: BinaryExpression' !== 0)) || (0 === ('C: Identifier' % 'D: number')))": 7,
    "((0 === ('A: Identifier' % 'B: number')) && (('C: Identifier' % 'D: number') !== 0))": 7,
    "(('A: Identifier' % 'B: number') !== 0)": 7,
    "((('A: BinaryExpression' && 'B: CallExpression') && (1 === 'C: CallExpression')) && ('D: number' === 'E: CallExpression'))": 7,
    "((('A: string' === 'B: Identifier') && 'C: CallExpression') && (1 === 'D: CallExpression'))": 7,
    "(('A: string' === 'B: Identifier') && 'C: CallExpression')": 7,
    "((('A: Identifier' || 'B: Identifier') || 'C: Identifier') || 'D: Identifier')": 7,
    "((('A: number' + 'B: CallExpression') - 'C: Identifier') % 'D: number')": 7,
    "(('A: number' + 'B: CallExpression') - 'C: Identifier')": 7,
    "('A: number' + 'B: CallExpression')": 7,
    "((('A: number' + 'B: Identifier') - 'C: Identifier') % 'D: number')": 7,
    "(1 + ('A: number' * ('B: Identifier' - 1)))": 7,
    "((('A: CallExpression' - 'B: Identifier') - 1) / 'C: number')": 7,
    "(('A: CallExpression' - 'B: Identifier') - 1)": 7,
    "((('A: CallExpression' - 'B: Identifier') + 'C: Identifier') / 'D: number')": 7,
    "(('A: CallExpression' - 'B: Identifier') + 'C: Identifier')": 7,
    "('A: CallExpression' ? null : 'B: Identifier')": 7,
    "((('A: Identifier' && 'B: BinaryExpression') && 'C: CallExpression') ? 'D: string' : 'E: string')": 7,
    "((('A: BinaryExpression' + 'B: CallExpression') + 'C: string') + 'D: CallExpression')": 7,
    "((('A: BinaryExpression' + 'B: string') + 'C: CallExpression') + 'D: string')": 7,
    "((('A: CallExpression' + 'B: number') - 'C: MemberExpression') % 'D: number')": 7,
    "(('A: CallExpression' + 'B: number') - 'C: MemberExpression')": 7,
    "('A: CallExpression' + 'B: number')": 7,
    "(('A: CallExpression' % 'B: number') ? 'C: Identifier' : ('D: Identifier' - 'E: number'))": 7,
    "('A: Identifier' - 'B: number')": 7,
    "(('A: Identifier' && ('B: MemberExpression' >= 'C: Identifier')) && ('D: CallExpression' >= ('E: Identifier' - 1)))": 7,
    "('A: Identifier' && ('B: MemberExpression' >= 'C: Identifier'))": 7,
    "('A: MemberExpression' >= 'B: Identifier')": 7,
    "('A: CallExpression' >= ('B: Identifier' - 1))": 7,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && 'C: Identifier') && 'D: MemberExpression')": 7,
    "((typeof('A: Identifier') !== 'undefined') && 'B: MemberExpression')": 7,
    "(('A: Identifier' && 'B: MemberExpression') && 'C: MemberExpression')": 7,
    "((('A: MemberExpression' < 1) || ('B: MemberExpression' > 'C: CallExpression')) ? 'D: Identifier' : (('E: LogicalExpression' || 'F: LogicalExpression') ? 'G: Identifier' : ('H: LogicalExpression' ? 'I: Identifier' : 'J: ConditionalExpression')))": 7,
    "(('A: MemberExpression' < 1) || ('B: MemberExpression' > 'C: CallExpression'))": 7,
    "('A: MemberExpression' < 1)": 7,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: BinaryExpression' && 'D: LogicalExpression')) ? 'E: Identifier' : (('F: BinaryExpression' || 'G: BinaryExpression') ? 'H: Identifier' : ('I: LogicalExpression' ? 'J: Identifier' : 'K: ConditionalExpression')))": 7,
    "(('A: MemberExpression' || 'B: string') + 'C: MemberExpression')": 7,
    "+('A: MemberExpression')": 7,
    "(('A: MemberExpression' && ('B: MemberExpression' == null)) && ('C: MemberExpression' == null))": 7,
    "('A: MemberExpression' && ('B: MemberExpression' == null))": 7,
    "(('A: MemberExpression' > 'B: CallExpression') || ('C: MemberExpression' === 0))": 7,
    "(('A: Identifier' < 'B: number') && ('C: MemberExpression' == null))": 7,
    "(('A: MemberExpression' == null) ? (('B: number' === 'C: Identifier') ? 1 : 0) : 'D: MemberExpression')": 7,
    "(('A: number' === 'B: Identifier') ? 1 : 0)": 7,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 0)) && ('D: MemberExpression' === 0))": 7,
    "((('A: MemberExpression' === 'B: number') && ('C: MemberExpression' === 0)) && ('D: MemberExpression' === 0))": 7,
    "(('A: MemberExpression' === 'B: number') && ('C: MemberExpression' === 0))": 7,
    "('A: MemberExpression' !== 'B: Identifier')": 7,
    "('A: MemberExpression' + 'B: Identifier')": 7,
    "(('A: Identifier' < 1) || ('B: Identifier' > 'C: CallExpression'))": 7,
    "('A: CallExpression' + 'B: MemberExpression')": 7,
    "('A: MemberExpression' && !('B: Identifier'))": 7,
    "('A: MemberExpression' === true)": 7,
    "(((null == 'A: Identifier') || ('B: Identifier' < 'C: Identifier')) || 'D: Identifier')": 7,
    "((null == 'A: Identifier') || ('B: Identifier' < 'C: Identifier'))": 7,
    "(('A: CallExpression' && 'B: CallExpression') || ('C: CallExpression' && ('D: MemberExpression' === 0)))": 7,
    "('A: CallExpression' && ('B: MemberExpression' === 0))": 7,
    "(('A: Identifier' < 'B: ThisExpression') ? 'C: ThisExpression' : 'D: Identifier')": 7,
    "('A: Identifier' < 'B: ThisExpression')": 7,
    "(('A: MemberExpression' === 1) && 'B: CallExpression')": 7,
    "('A: MemberExpression' ? 'B: CallExpression' : +('C: NewExpression'))": 7,
    "(('A: MemberExpression' || 'B: MemberExpression') || 0)": 7,
    "((('A: UnaryExpression' + 'B: BinaryExpression') + ('C: number' * 'D: Identifier')) + ('E: number' * ('F: number' * 'G: BinaryExpression')))": 7,
    "('A: number' * ('B: number' * ('C: number' * 'D: Identifier')))": 7,
    "('A: number' * ('B: number' * 'C: Identifier'))": 7,
    "(-(1) * 'A: Identifier')": 7,
    "(('A: Identifier' && ('B: MemberExpression' !== 'C: MemberExpression')) || (!('D: Identifier') && ('E: CallExpression' !== 'F: CallExpression')))": 7,
    "('A: Identifier' && ('B: MemberExpression' !== 'C: MemberExpression'))": 7,
    "(!('A: Identifier') && ('B: CallExpression' !== 'C: CallExpression'))": 7,
    "((('A: Identifier' + 'B: CallExpression') + 'C: Identifier') + 'D: CallExpression')": 7,
    "(('A: Identifier' + 'B: CallExpression') + 'C: Identifier')": 7,
    "(~(~('A: Identifier')) % 'B: number')": 7,
    "~(~('A: Identifier'))": 7,
    "~('A: Identifier')": 7,
    "('A: MemberExpression' || 'B: ArrayExpression')": 7,
    "(('A: MemberExpression' === 'B: string') ? 'C: Identifier' : -('D: Identifier'))": 7,
    "(('A: CallExpression' < 'B: number') && !('C: Identifier'))": 7,
    "(!('A: MemberExpression') && 'B: Identifier')": 7,
    "(!('A: Identifier') || 'B: MemberExpression')": 7,
    "('A: MemberExpression' ? 'B: Identifier' : 'C: CallExpression')": 7,
    "('A: Identifier' ? 'B: CallExpression' : 0)": 7,
    "(('A: CallExpression' - 'B: Identifier') % 'C: number')": 7,
    "(('A: CallExpression' > 'B: CallExpression') || ('C: CallExpression' > 'D: CallExpression'))": 7,
    "('A: MemberExpression' && ('B: MemberExpression' === 0))": 7,
    "('A: CallExpression' || !('B: CallExpression'))": 7,
    "(('A: string' in 'B: Identifier') || ('C: string' in 'D: Identifier'))": 7,
    "('A: Identifier' * ('B: CallExpression' ? 0 : 'C: Identifier'))": 7,
    "('A: CallExpression' ? 0 : 'B: Identifier')": 7,
    "(('A: CallExpression' - 'B: CallExpression') + ('C: number' * ('D: CallExpression' - 'E: CallExpression')))": 7,
    "(+('A: Identifier') - +('B: CallExpression'))": 7,
    "((('A: CallExpression' || 'B: CallExpression') || 'C: CallExpression') || 'D: CallExpression')": 7,
    "(('A: CallExpression' || 'B: CallExpression') || 'C: CallExpression')": 7,
    "(('A: Identifier' < -('B: number')) ? 'C: string' : (('D: Identifier' < 'E: UnaryExpression') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: ConditionalExpression')))": 7,
    "('A: Identifier' < -('B: number'))": 7,
    "(('A: Identifier' < 1) ? 'B: string' : (('C: Identifier' < 'D: number') ? 'E: string' : ('F: BinaryExpression' ? 'G: string' : 'H: string')))": 7,
    "('A: Identifier' && ('B: CallExpression' ? 'C: CallExpression' : 'D: MemberExpression'))": 7,
    "!((('A: CallExpression' && 'B: CallExpression') && 'C: CallExpression'))": 7,
    "(('A: CallExpression' && 'B: CallExpression') && 'C: CallExpression')": 7,
    "('A: Identifier' || 'B: string')": 7,
    "((('A: MemberExpression' === 'B: string') ? 'C: CallExpression' : !('D: CallExpression')) && (('E: MemberExpression' === 'F: string') ? 'G: CallExpression' : !('H: CallExpression')))": 7,
    "(('A: CallExpression' <= 'B: Identifier') && ('C: Identifier' <= 'D: CallExpression'))": 7,
    "('A: CallExpression' <= 'B: Identifier')": 7,
    "('A: Identifier' <= 'B: CallExpression')": 7,
    "('A: Identifier' ? 'B: Identifier' : 'C: CallExpression')": 7,
    "(('A: number' * ('B: CallExpression' - 'C: CallExpression')) + ('D: CallExpression' - 'E: CallExpression'))": 7,
    "(('A: Identifier' - 'B: Identifier') < 0)": 7,
    "(-(('A: Identifier' + 'B: Identifier')) || 0)": 7,
    "-(('A: Identifier' + 'B: Identifier'))": 7,
    "('A: CallExpression' < 0)": 7,
    "('A: CallExpression' + ('B: number' * ('C: number' * 'D: CallExpression')))": 7,
    "('A: number' * ('B: number' * 'C: CallExpression'))": 7,
    "(((0 <= 'A: CallExpression') && ('B: CallExpression' <= 'C: number')) ? 'D: string' : 'E: string')": 7,
    "((0 <= 'A: CallExpression') && ('B: CallExpression' <= 'C: number'))": 7,
    "('A: CallExpression' <= 'B: number')": 7,
    "('A: NewExpression' - 'B: Identifier')": 7,
    "(('A: CallExpression' - ('B: CallExpression' % 'C: number')) + 'D: number')": 7,
    "(('A: CallExpression' - 'B: CallExpression') + 'C: number')": 7,
    "(('A: CallExpression' - ('B: CallExpression' - 1)) + 'C: number')": 7,
    "('A: CallExpression' - (('B: MemberExpression' || 0) * 'C: number'))": 7,
    "(('A: MemberExpression' || 0) * 'B: number')": 7,
    "('A: CallExpression' ? 'B: CallExpression' : null)": 7,
    "('A: CallExpression' + ('B: Identifier' * ('C: Identifier' - 'D: MemberExpression')))": 7,
    "('A: Identifier' * ('B: Identifier' - 'C: MemberExpression'))": 7,
    "((('A: MemberExpression' <= 'B: Identifier') && ('C: Identifier' <= 'D: MemberExpression')) || (('E: MemberExpression' <= 'F: Identifier') && ('G: Identifier' <= 'H: MemberExpression')))": 7,
    "(('A: Identifier' * ('B: CallExpression' - 'C: CallExpression')) + 'D: MemberExpression')": 7,
    "('A: Identifier' * ('B: CallExpression' - 'C: CallExpression'))": 7,
    "('A: number' * ('B: CallExpression' - 1))": 7,
    "((null == 'A: Identifier') ? 'B: CallExpression' : 'C: CallExpression')": 7,
    "(('A: CallExpression' + 1) / 'B: number')": 7,
    "(('A: number' * ('B: Identifier' - 1)) + ('C: CallExpression' % 'D: number'))": 7,
    "('A: Identifier' ? ('B: MemberExpression' || 'C: MemberExpression') : 'D: MemberExpression')": 7,
    "(('A: CallExpression' - 'B: CallExpression') / 'C: number')": 7,
    "('A: number' * ('B: string' + 'C: Identifier'))": 7,
    "('A: Identifier' ? 'B: MemberExpression' : 0)": 7,
    "((('A: Identifier' <= 0) && ('B: Identifier' <= 0)) && ('C: Identifier' <= 0))": 7,
    "(('A: Identifier' <= 0) && ('B: Identifier' <= 0))": 7,
    "('A: MemberExpression' + ('B: Identifier' / 'C: number'))": 7,
    "(('A: Identifier' / 'B: number') + ('C: Identifier' / 'D: number'))": 7,
    "('A: Identifier' + ('B: Identifier' / 'C: number'))": 7,
    "((('A: MemberExpression' + 'B: BinaryExpression') + ('C: number' * 'D: BinaryExpression')) + ('E: number' * 'F: CallExpression'))": 7,
    "(('A: MemberExpression' + ('B: MemberExpression' * 'C: number')) + ('D: number' * ('E: MemberExpression' % 'F: number')))": 7,
    "('A: MemberExpression' + ('B: MemberExpression' * 'C: number'))": 7,
    "('A: number' * ('B: MemberExpression' % 'C: number'))": 7,
    "('A: MemberExpression' % 'B: number')": 7,
    "('A: MemberExpression' / 'B: number')": 7,
    "('A: CallExpression' ? 'B: MemberExpression' : 'C: Identifier')": 7,
    "('A: Identifier' || 1)": 7,
    "!(!('A: Identifier'))": 7,
    "((('A: LogicalExpression' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || 'E: ArrayExpression')": 7,
    "+('A: ThisExpression')": 7,
    "(('A: number' * 'B: CallExpression') | 0)": 6,
    "(('A: Identifier' !== 0) && 'B: CallExpression')": 6,
    "('A: Identifier' !== 0)": 6,
    "((1 === 'A: Identifier') ? ('B: CallExpression' ? 'C: number' : 'D: number') : ('E: number' - ('F: BinaryExpression' % 'G: number')))": 6,
    "('A: CallExpression' + (('B: CallExpression' > 'C: number') ? 'D: number' : 'E: number'))": 6,
    "(('A: CallExpression' > 'B: number') ? 'C: number' : 'D: number')": 6,
    "('A: CallExpression' != null)": 6,
    "('A: MemberExpression' + ('B: MemberExpression' ? 'C: string' : ''))": 6,
    "(typeof('A: Identifier') == \"function\")": 6,
    "(('A: Identifier' < 'B: number') ? ('C: Identifier' ? 'D: string' : 'E: string') : ('F: Identifier' ? 'G: string' : 'H: string'))": 6,
    "((('A: number' <= 'B: BinaryExpression') && ('C: BinaryExpression' <= 'D: number')) ? 'E: number' : (('F: number' <= 'G: BinaryExpression') ? 'H: number' : 'I: number'))": 6,
    "(('A: number' <= ('B: Identifier' % 'C: number')) ? 'D: number' : 'E: number')": 6,
    "(('A: number' === 'B: Identifier') ? 'C: MemberExpression' : 'D: Identifier')": 6,
    "(('A: string' === 'B: Identifier') ? ('C: Identifier' ? 'D: string' : 'E: string') : (('F: Identifier' + 'G: string') + 'H: SequenceExpression'))": 6,
    "(((1 == 'A: BinaryExpression') && ('B: BinaryExpression' != 'C: number')) ? 'D: MemberExpression' : (('E: LogicalExpression' && 'F: LogicalExpression') ? 'G: MemberExpression' : 'H: MemberExpression'))": 6,
    "((('A: number' <= 'B: BinaryExpression') && ('C: BinaryExpression' <= 'D: number')) && (('E: BinaryExpression' < 'F: number') || ('G: number' <= 'H: BinaryExpression')))": 6,
    "(('A: number' < 'B: Identifier') && ('C: Identifier' < 'D: number'))": 6,
    "(void(0) !== 'A: MemberExpression')": 6,
    "(('A: number' === 'B: Identifier') ? 'C: string' : ('D: Identifier' + 'E: string'))": 6,
    "(('A: number' === 'B: CallExpression') ? 'C: string' : 'D: string')": 6,
    "((!(0) === 'A: Identifier') ? 'B: CallExpression' : ('C: Identifier' ? 'D: MemberExpression' : 'E: MemberExpression'))": 6,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) ? 'E: Identifier' : (('F: string' === 'G: Identifier') ? ('H: BinaryExpression' ? 'I: Identifier' : 'J: BinaryExpression') : ('K: LogicalExpression' ? 'L: BinaryExpression' : 'M: UnaryExpression')))": 6,
    "('A: MemberExpression' && 'B: AssignmentExpression')": 6,
    "(void(0) === 'A: MemberExpression')": 6,
    "('A: MemberExpression' || 'B: FunctionExpression')": 6,
    "(!(1) === 'A: MemberExpression')": 6,
    "(('A: string' + ('B: MemberExpression' ? 'C: string' : \"\")) + 'D: Identifier')": 6,
    "(0 !== 'A: MemberExpression')": 6,
    "(0 < 'A: MemberExpression')": 6,
    "(('A: number' - 'B: CallExpression') - 1)": 6,
    "('A: number' - 'B: CallExpression')": 6,
    "!((!('A: CallExpression') || !('B: CallExpression')))": 6,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: UnaryExpression' !== 'D: AssignmentExpression')) ? 'E: Identifier' : null)": 6,
    "((('A: UnaryExpression' !== 'B: AssignmentExpression') || ('C: UnaryExpression' !== 'D: AssignmentExpression')) || (-(1) !== 'E: AssignmentExpression'))": 6,
    "(('A: CallExpression' !== 'B: CallExpression') ? 'C: string' : \"\")": 6,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: Identifier' ? 'D: BinaryExpression' : \"\")) + ('E: Identifier' ? ('F: BinaryExpression' + 'G: string') : \"\"))": 6,
    "((0 === 'A: Identifier') ? (('B: string' + 'C: ConditionalExpression') + 'D: string') : (('E: string' + 'F: ConditionalExpression') + 'G: string'))": 6,
    "('A: string' + (('B: number' === 'C: CallExpression') ? 'D: string' : ''))": 6,
    "(+('A: Identifier') > 'B: number')": 6,
    "('A: number' * ('B: number' + 'C: MemberExpression'))": 6,
    "(('A: number' / 'B: number') / 'C: number')": 6,
    "('A: number' * ('B: number' * ('C: number' * 'D: BinaryExpression')))": 5,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: BinaryExpression' !== 'D: number')) ? ('E: Identifier' + 'F: string') : ('G: Identifier' + 'H: string'))": 5,
    "((('A: BinaryExpression' || 'B: BinaryExpression') && ('C: BinaryExpression' !== 'D: number')) && (('E: Identifier' % 'F: number') !== 'G: number'))": 5,
    "((('A: number' === 'B: BinaryExpression') || ('C: number' === 'D: BinaryExpression')) && (('E: Identifier' % 'F: number') !== 'G: number'))": 5,
    "(('A: number' === ('B: Identifier' % 'C: number')) || ('D: number' === ('E: Identifier' % 'F: number')))": 5,
    "((('A: Identifier' > 1) && ('B: Identifier' < 'C: number')) && (~('D: UnaryExpression') !== 1))": 5,
    "(~(~('A: BinaryExpression')) !== 1)": 5,
    "((typeof('A: Identifier') === 'string') && 'B: CallExpression')": 5,
    "((1 === ('A: Identifier' % 'B: number')) ? 'C: string' : 'D: string')": 5,
    "('A: MemberExpression' ? 'B: MemberExpression' : 'C: MemberExpression')": 5,
    "(('A: Identifier' < 'B: number') ? ('C: Identifier' ? 'D: MemberExpression' : 'E: MemberExpression') : 'F: Identifier')": 5,
    "('A: Identifier' + ((1 === 'B: Identifier') ? 'C: string' : ''))": 5,
    "((1 === 'A: Identifier') ? 'B: string' : '')": 5,
    "((0 === ('A: Identifier' % 'B: number')) && ('C: Identifier' !== 'D: number'))": 5,
    "((('A: Identifier' ? '' : 'B: string') + 'C: string') + 'D: MemberExpression')": 5,
    "(('A: Identifier' ? '' : 'B: string') + 'C: string')": 5,
    "('A: Identifier' ? '' : 'B: string')": 5,
    "((('A: Identifier' < 'B: number') || ('C: BinaryExpression' && 'D: BinaryExpression')) || (0 === ('E: Identifier' % 'F: number')))": 5,
    "(('A: Identifier' < 'B: number') || (('C: Identifier' <= 'D: number') && (0 === 'E: BinaryExpression')))": 5,
    "(('A: Identifier' <= 'B: number') && (0 === ('C: Identifier' % 'D: number')))": 5,
    "((0 === ('A: Identifier' % 'B: number')) || (('C: Identifier' > 'D: number') && ('E: Identifier' < 'F: number')))": 5,
    "((('A: Identifier' >= 'B: number') && ('C: Identifier' <= 'D: number')) ? 'E: MemberExpression' : 'F: MemberExpression')": 5,
    "(('A: Identifier' >= 'B: number') && ('C: Identifier' <= 'D: number'))": 5,
    "((('A: string' === 'B: Identifier') && ('C: Identifier' >= 'D: number')) || ('E: string' === 'F: Identifier'))": 5,
    "(('A: Identifier' >= 0) && ('B: Identifier' < 'C: number'))": 5,
    "((('A: BinaryExpression' < 'B: number') && ('C: BinaryExpression' > 1)) && (('D: UnaryExpression' % 'E: number') !== 1))": 5,
    "((('A: Identifier' % 'B: number') < 'C: number') && (('D: Identifier' % 'E: number') > 1))": 5,
    "(('A: Identifier' % 'B: number') > 1)": 5,
    "((~('A: UnaryExpression') % 'B: number') !== 1)": 5,
    "((('A: Identifier' % 'B: number') >= 'C: number') || (('D: Identifier' >= 'E: number') && (0 === 'F: BinaryExpression')))": 5,
    "(('A: Identifier' >= 'B: number') && (0 === ('C: Identifier' % 'D: number')))": 5,
    "(('A: Identifier' + 'B: Identifier') + 'C: MemberExpression')": 5,
    "((('A: BinaryExpression' ? 'B: string' : '') + 'C: MemberExpression') + 'D: string')": 5,
    "(('' === 'A: Identifier') ? 'B: string' : 'C: Identifier')": 5,
    "((('A: Identifier' + 'B: string') + ('C: BinaryExpression' ? 'D: string' : '')) + 'E: string')": 5,
    "(('A: Identifier' + 'B: string') + (('C: number' === 'D: CallExpression') ? 'E: string' : ''))": 5,
    "(('A: Identifier' != null) && ('B: string' === 'C: CallExpression'))": 5,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: MemberExpression' === 0)) && ('D: MemberExpression' === 'E: Identifier'))": 5,
    "(('A: MemberExpression' != null) ? 'B: CallExpression' : 'C: Identifier')": 5,
    "(('A: Identifier' instanceof 'B: Identifier') || (('C: Identifier' != null) && ('D: MemberExpression' != null)))": 5,
    "(('A: Identifier' != null) && ('B: MemberExpression' != null))": 5,
    "(('A: Identifier' >= 0) && 'B: CallExpression')": 5,
    "(('A: Identifier' > 0) ? 'B: string' : 'C: string')": 5,
    "((typeof('A: Identifier') === 'string') ? ('B: MemberExpression' || 'C: MemberExpression') : 'D: Identifier')": 5,
    "(('A: Identifier' != null) && 'B: CallExpression')": 5,
    "(!('A: Identifier') && !('B: MemberExpression'))": 5,
    "(('A: string' + ('B: MemberExpression' ? 'C: string' : '')) + 'D: string')": 5,
    "((-('A: Identifier') + 'B: Identifier') - 1)": 5,
    "(-('A: Identifier') + 'B: Identifier')": 5,
    "(((1 + 'A: BinaryExpression') + 'B: Identifier') + 'C: Identifier')": 5,
    "((1 + ('A: number' * 'B: BinaryExpression')) + 'C: Identifier')": 5,
    "(('A: Identifier' && ('B: Identifier' !== true)) && 'C: CallExpression')": 5,
    "('A: Identifier' && ('B: Identifier' !== true))": 5,
    "((true === 'A: Identifier') ? 'B: CallExpression' : ('C: Identifier' ? 'D: MemberExpression' : 'E: Identifier'))": 5,
    "('A: Identifier' ? 'B: CallExpression' : 'C: Identifier')": 5,
    "('A: Identifier' ? 'B: CallExpression' : null)": 5,
    "((('A: LogicalExpression' && 'B: Identifier') && 'C: MemberExpression') && 'D: CallExpression')": 5,
    "((('A: MemberExpression' === 'B: Identifier') && ('C: UnaryExpression' !== 'undefined')) && 'D: Identifier')": 5,
    "(('A: MemberExpression' === 'B: Identifier') && (typeof('C: Identifier') !== 'undefined'))": 5,
    "((('A: string' + 'B: string') + 'C: string') + 'D: string')": 5,
    "(('A: MemberExpression' != null) && ('B: MemberExpression' != null))": 5,
    "('A: Identifier' && ('B: MemberExpression' === -('C: number')))": 5,
    "('A: MemberExpression' === -('B: number'))": 5,
    "((('A: MemberExpression' < 0) || ('B: MemberExpression' > 'C: number')) ? 'D: Identifier' : (('E: BinaryExpression' || 'F: BinaryExpression') ? 'G: Identifier' : ('H: LogicalExpression' ? 'I: Identifier' : 'J: ConditionalExpression')))": 5,
    "((('A: MemberExpression' < 0) || ('B: MemberExpression' > 'C: number')) || (('D: MemberExpression' === 'E: number') && ('F: LogicalExpression' || 'G: BinaryExpression')))": 5,
    "(('A: MemberExpression' === 'B: number') && (('C: BinaryExpression' || 'D: BinaryExpression') || ('E: MemberExpression' !== 0)))": 5,
    "((('A: MemberExpression' !== 0) || ('B: MemberExpression' !== 0)) || ('C: MemberExpression' !== 0))": 5,
    "(('A: MemberExpression' !== 0) || ('B: MemberExpression' !== 0))": 5,
    "((('A: MemberExpression' < 0) || ('B: MemberExpression' > 'C: number')) ? 'D: Identifier' : (('E: BinaryExpression' || 'F: BinaryExpression') ? 'G: Identifier' : ('H: LogicalExpression' ? 'I: Identifier' : 'J: UnaryExpression')))": 5,
    "((('A: MemberExpression' < 0) || ('B: MemberExpression' > 'C: number')) ? 'D: Identifier' : (('E: BinaryExpression' || 'F: BinaryExpression') ? 'G: Identifier' : -(1)))": 5,
    "((('A: MemberExpression' < 0) || ('B: MemberExpression' > 'C: number')) ? 'D: Identifier' : -(1))": 5,
    "('A: MemberExpression' && (('B: Identifier' < 'C: Identifier') || ('D: Identifier' > 'E: Identifier')))": 5,
    "(('A: Identifier' < 'B: Identifier') || ('C: Identifier' > 'D: Identifier'))": 5,
    "('A: MemberExpression' !== false)": 5,
    "(!('A: Identifier') && ('B: Identifier' != null))": 5,
    "(('A: Identifier' + ('B: Identifier' || '')) + ('C: Identifier' || ''))": 5,
    "('A: Identifier' + ('B: Identifier' || ''))": 5,
    "(('A: MemberExpression' && ('B: UnaryExpression' !== 'undefined')) && ('C: MemberExpression' !== 'D: Identifier'))": 5,
    "('A: MemberExpression' && (typeof('B: MemberExpression') !== 'undefined'))": 5,
    "(typeof('A: MemberExpression') !== 'undefined')": 5,
    "((('A: MemberExpression' != null) || ('B: MemberExpression' != null)) || ('C: MemberExpression' != null))": 5,
    "(('A: MemberExpression' != null) || ('B: MemberExpression' != null))": 5,
    "(('A: Identifier' < 1) || ('B: Identifier' > 'C: number'))": 5,
    "(('A: Identifier' < 0) || ('B: Identifier' > 'C: number'))": 5,
    "('' + 'A: MemberExpression')": 5,
    "((('A: MemberExpression' <= 'B: number') && ('C: MemberExpression' === true)) && ('D: MemberExpression' > 0))": 5,
    "(('A: MemberExpression' <= 'B: number') && ('C: MemberExpression' === true))": 5,
    "('A: Identifier' && ('B: Identifier' < 'C: number'))": 5,
    "(!('A: Identifier') && ('B: number' === 'C: Identifier'))": 5,
    "(('A: MemberExpression' === 'B: Identifier') ? 'C: MemberExpression' : 'D: MemberExpression')": 5,
    "((null === 'A: Identifier') || (('B: Identifier' === 'C: Identifier') && ('' === 'D: Identifier')))": 5,
    "(('A: Identifier' === 'B: Identifier') && ('' === 'C: Identifier'))": 5,
    "(('A: Identifier' > 'B: ThisExpression') ? 'C: ThisExpression' : 'D: Identifier')": 5,
    "('A: Identifier' > 'B: ThisExpression')": 5,
    "(!('A: CallExpression') || 'B: CallExpression')": 5,
    "('A: CallExpression' && !(('B: BinaryExpression' && 'C: LogicalExpression')))": 5,
    "!((('A: CallExpression' !== 'B: UnaryExpression') && ('C: BinaryExpression' || 'D: UnaryExpression')))": 5,
    "(('A: CallExpression' !== -(1)) && (('B: MemberExpression' == null) || !('C: CallExpression')))": 5,
    "('A: CallExpression' * -(1))": 5,
    "(+(('A: MemberExpression' * 'B: number')) + 'C: CallExpression')": 5,
    "+(('A: MemberExpression' * 'B: number'))": 5,
    "((0 === 'A: Identifier') ? 0 : (('B: MemberExpression' === 'C: string') ? 'D: Identifier' : -('E: Identifier')))": 5,
    "((('A: CallExpression' || 'B: CallExpression') ? 'C: CallExpression' : 'D: CallExpression') - 'E: CallExpression')": 5,
    "(('A: CallExpression' || 'B: CallExpression') ? 'C: CallExpression' : 'D: CallExpression')": 5,
    "(typeof('A: MemberExpression') === 'string')": 5,
    "(0 === (('A: CallExpression' - 'B: Identifier') % 'C: number'))": 5,
    "('A: CallExpression' && ('B: CallExpression' > 0))": 5,
    "('A: CallExpression' > 0)": 5,
    "('A: CallExpression' ? !('B: MemberExpression') : false)": 5,
    "('A: CallExpression' ? 'B: MemberExpression' : false)": 5,
    "('A: CallExpression' ? ('B: MemberExpression' && ('C: MemberExpression' === 0)) : false)": 5,
    "((typeof('A: Identifier') === 'object') && (('B: string' in 'C: Identifier') || ('D: string' in 'E: Identifier')))": 5,
    "(('A: Identifier' !== null) && !('B: CallExpression'))": 5,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + 'D: string')": 5,
    "((null == 'A: Identifier') ? true : 'B: Identifier')": 5,
    "((typeof('A: Identifier') === 'string') || ('B: Identifier' instanceof 'C: Identifier'))": 5,
    "((('A: LogicalExpression' || 'B: CallExpression') || (null === 'C: Identifier')) || ('D: Identifier' === 'E: Identifier'))": 5,
    "((('A: LogicalExpression' || 'B: CallExpression') || 'C: CallExpression') || (null === 'D: Identifier'))": 5,
    "('A: Identifier' ? 'B: CallExpression' : 'C: ThisExpression')": 5,
    "(('A: CallExpression' < 0) || ('B: CallExpression' > 'C: number'))": 5,
    "((('A: Identifier' + 'B: Identifier') + 'C: Identifier') + 'D: Identifier')": 5,
    "(('A: Identifier' + 'B: Identifier') + 'C: Identifier')": 5,
    "('A: Identifier' * ('B: number' * ('C: BinaryExpression' + 'D: number')))": 5,
    "('A: number' * (('B: number' * 'C: number') + 'D: number'))": 5,
    "('A: CallExpression' >= 0)": 5,
    "((typeof('A: Identifier') !== 'undefined') && ('B: MemberExpression' != null))": 5,
    "((1 === 'A: CallExpression') ? 'B: string' : ((1 === 'C: Identifier') ? 'D: string' : ('E: BinaryExpression' ? 'F: string' : 'G: ConditionalExpression')))": 5,
    "!((('A: LogicalExpression' && 'B: BinaryExpression') || ('C: LogicalExpression' && 'D: BinaryExpression')))": 5,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: Identifier' >= 0)) || (('D: BinaryExpression' && 'E: BinaryExpression') && ('F: Identifier' <= 0)))": 5,
    "((('A: Identifier' >= 0) && ('B: Identifier' >= 0)) && ('C: Identifier' >= 0))": 5,
    "(('A: Identifier' >= 0) && ('B: Identifier' >= 0))": 5,
    "((('A: BinaryExpression' && 'B: ArrayExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || (('E: Identifier' <= 1) && 'F: ArrayExpression'))": 5,
    "((('A: Identifier' <= 'B: MemberExpression') && 'C: ArrayExpression') || (('D: Identifier' < 'E: MemberExpression') && 'F: ArrayExpression'))": 5,
    "(('A: Identifier' <= 'B: MemberExpression') && 'C: ArrayExpression')": 5,
    "((('A: Identifier' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || (('E: Identifier' <= 1) && 'F: ArrayExpression'))": 5,
    "(+('A: Identifier') > 0)": 5,
    "(('A: MemberExpression' != null) && ('B: MemberExpression' == null))": 5,
    "((('A: Identifier' > 0) - ('B: Identifier' < 0)) || +('C: Identifier'))": 5,
    "(('A: Identifier' > 0) - ('B: Identifier' < 0))": 5,
    "('A: Identifier' ? 'B: CallExpression' : '')": 5,
    "(('A: Identifier' < 0) ? 'B: string' : '')": 5,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: LogicalExpression' ? 'D: string' : '')) + ('E: Identifier' ? ('F: BinaryExpression' + 'G: string') : ''))": 5,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: Identifier' ? 'D: BinaryExpression' : '')) + (('E: LogicalExpression' || 'F: Identifier') ? 'G: string' : ''))": 5,
    "((('A: Identifier' + 'B: string') + ('C: Identifier' ? 'D: BinaryExpression' : '')) + ('E: Identifier' ? ('F: BinaryExpression' + 'G: string') : ''))": 5,
    "(('A: Identifier' + 'B: string') + ('C: Identifier' ? ('D: BinaryExpression' + 'E: string') : ''))": 5,
    "((('A: Identifier' || 'B: Identifier') || 'C: Identifier') ? 'D: string' : '')": 5,
    "(('A: string' === 'B: Identifier') ? ('C: Identifier' ? 'D: string' : 'E: string') : (('F: string' === 'G: Identifier') ? ('H: Identifier' ? 'I: string' : 'J: string') : ('K: BinaryExpression' + 'L: SequenceExpression')))": 4,
    "((0 === 'A: Identifier') ? ('B: Identifier' + 'C: string') : ((0 == 'D: Identifier') ? ('E: Identifier' + 'F: string') : ('G: LogicalExpression' ? 'H: BinaryExpression' : 'I: ConditionalExpression')))": 4,
    "((0 == 'A: Identifier') ? ('B: Identifier' + 'C: string') : (('D: BinaryExpression' && 'E: BinaryExpression') ? ('F: Identifier' + 'G: string') : ('H: BinaryExpression' ? 'I: BinaryExpression' : 'J: ConditionalExpression')))": 4,
    "(0 == 'A: Identifier')": 4,
    "((('A: number' < 'B: Identifier') && ('C: Identifier' < 'D: number')) ? ('E: Identifier' + 'F: string') : ((1 == 'G: Identifier') ? ('H: Identifier' + 'I: string') : ('J: BinaryExpression' ? 'K: BinaryExpression' : 'L: ConditionalExpression')))": 4,
    "((1 == 'A: Identifier') ? ('B: Identifier' + 'C: string') : (('D: number' == 'E: Identifier') ? ('F: Identifier' + 'G: string') : ('H: LogicalExpression' ? 'I: BinaryExpression' : 'J: BinaryExpression')))": 4,
    "(('A: number' == 'B: Identifier') ? ('C: Identifier' + 'D: string') : (('E: BinaryExpression' || 'F: BinaryExpression') ? ('G: Identifier' + 'H: string') : ('I: Identifier' + 'J: string')))": 4,
    "((('A: number' == 'B: Identifier') || ('C: number' == 'D: Identifier')) ? ('E: Identifier' + 'F: string') : ('G: Identifier' + 'H: string'))": 4,
    "(('A: number' == 'B: Identifier') || ('C: number' == 'D: Identifier'))": 4,
    "((('A: LogicalExpression' || 'B: LogicalExpression') || ('C: string' === 'D: Identifier')) ? ('E: Identifier' + 'F: number') : 'G: Identifier')": 4,
    "((('A: string' === 'B: Identifier') && ('C: number' <= 'D: Identifier')) || (('E: string' === 'F: Identifier') && ('G: Identifier' < 'H: number')))": 4,
    "('A: Identifier' + (('B: BinaryExpression' && 'C: BinaryExpression') ? ('D: BinaryExpression' ? 'E: string' : 'F: ConditionalExpression') : 'G: string'))": 4,
    "((('A: string' !== 'B: Identifier') && ('C: string' !== 'D: Identifier')) ? ((1 === 'E: Identifier') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: ConditionalExpression')) : 'J: string')": 4,
    "((1 < 'A: Identifier') && ('B: Identifier' < 'C: number'))": 4,
    "(1 < 'A: Identifier')": 4,
    "(1 != ~(~('A: BinaryExpression')))": 4,
    "('A: Identifier' + \"\")": 4,
    "(((\"undefined\" != 'A: UnaryExpression') && ('B: Identifier' instanceof 'C: Identifier')) || ('D: string' === 'E: CallExpression'))": 4,
    "((\"undefined\" != typeof('A: Identifier')) && ('B: Identifier' instanceof 'C: Identifier'))": 4,
    "('A: Identifier' + ((1 === 'B: Identifier') ? 'C: string' : ('D: BinaryExpression' ? 'E: string' : 'F: string')))": 4,
    "((1 === 'A: Identifier') ? 'B: string' : (('C: number' == 'D: BinaryExpression') ? 'E: string' : 'F: string'))": 4,
    "(('A: number' == ('B: Identifier' % 'C: number')) ? 'D: string' : 'E: string')": 4,
    "(('A: string' === 'B: Identifier') ? (('C: number' < 'D: Identifier') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: string' === 'I: Identifier') ? ('J: Identifier' + 'K: number') : void(0)))": 4,
    "(('A: number' < 'B: Identifier') ? 'C: Identifier' : ('D: Identifier' + 'E: number'))": 4,
    "('A: number' !== 'B: Identifier')": 4,
    "('A: CallExpression' ? ('B: Identifier' + ('C: LogicalExpression' ? 'D: string' : 'E: string')) : ('F: Identifier' + 'G: string'))": 4,
    "('A: CallExpression' ? ('B: Identifier' ? ('C: Identifier' + 'D: string') : ('E: Identifier' + 'F: ConditionalExpression')) : ('G: Identifier' ? ('H: Identifier' + 'I: string') : ('J: Identifier' + 'K: ConditionalExpression')))": 4,
    "((!(0) === 'A: Identifier') ? 'B: string' : 'C: string')": 4,
    "(-(1) / 0)": 4,
    "('A: CallExpression' ? ('B: string' + 'C: Identifier') : ('D: string' + 'E: Identifier'))": 4,
    "(((1 == 'A: BinaryExpression') && ('B: BinaryExpression' != 'C: number')) ? 'D: MemberExpression' : 'E: MemberExpression')": 4,
    "((1 === 'A: Identifier') ? ('B: Identifier' ? 'C: string' : 'D: string') : (('E: number' === 'F: Identifier') ? ('G: LogicalExpression' ? 'H: string' : 'I: string') : ('J: BinaryExpression' ? 'K: ConditionalExpression' : 'L: ConditionalExpression')))": 4,
    "((1 === 'A: Identifier') ? (('B: Identifier' || 'C: Identifier') ? 'D: string' : 'E: string') : (('F: number' === 'G: Identifier') ? ('H: LogicalExpression' ? 'I: string' : 'J: string') : ('K: BinaryExpression' ? 'L: ConditionalExpression' : 'M: ConditionalExpression')))": 4,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: BinaryExpression' || 'D: BinaryExpression')) ? ((1 == 'E: BinaryExpression') ? 'F: MemberExpression' : 'G: MemberExpression') : 'H: MemberExpression')": 4,
    "(((1 <= 'A: BinaryExpression') && ('B: BinaryExpression' <= 'C: number')) && (('D: BinaryExpression' < 'E: number') || ('F: number' <= 'G: BinaryExpression')))": 4,
    "((1 <= ('A: Identifier' % 'B: number')) && (('C: Identifier' % 'D: number') <= 'E: number'))": 4,
    "(1 <= ('A: Identifier' % 'B: number'))": 4,
    "((1 == ('A: Identifier' % 'B: number')) ? 'C: MemberExpression' : 'D: MemberExpression')": 4,
    "(('A: MemberExpression' === 1) ? (('B: BinaryExpression' && 'C: Identifier') ? 'D: string' : ('E: LogicalExpression' ? 'F: MemberExpression' : 'G: MemberExpression')) : 'H: SequenceExpression')": 4,
    "((('A: string' === 'B: Identifier') && 'C: Identifier') ? 'D: string' : (('E: Identifier' || 'F: Identifier') ? 'G: MemberExpression' : 'H: MemberExpression'))": 4,
    "((('A: BinaryExpression' && 'B: Identifier') && ('C: string' === 'D: Identifier')) ? ('E: Identifier' + 'F: string') : (('G: Identifier' + 'H: string') + 'I: Identifier'))": 4,
    "(((\"\" !== 'A: Identifier') ? 'B: string' : \"\") + 'C: MemberExpression')": 4,
    "((\"\" !== 'A: Identifier') ? 'B: string' : \"\")": 4,
    "(\"\" !== 'A: Identifier')": 4,
    "(\"\" === 'A: Identifier')": 4,
    "((-(1) !== 'A: CallExpression') ? ('B: CallExpression' + 'C: string') : (('D: UnaryExpression' !== 'E: CallExpression') ? ('F: CallExpression' + 'G: string') : ('H: BinaryExpression' ? 'I: BinaryExpression' : 'J: BinaryExpression')))": 4,
    "((-(1) !== 'A: CallExpression') ? ('B: CallExpression' + 'C: string') : (('D: UnaryExpression' !== 'E: CallExpression') ? ('F: CallExpression' + 'G: string') : ('H: Identifier' + 'I: string')))": 4,
    "((-(1) !== 'A: CallExpression') ? ('B: CallExpression' + 'C: string') : ('D: Identifier' + 'E: string'))": 4,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: LogicalExpression' && 'D: BinaryExpression')) ? 'E: Identifier' : ('F: Identifier' + 'G: number'))": 4,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) || (('E: BinaryExpression' && 'F: BinaryExpression') && ('G: number' <= 'H: Identifier')))": 4,
    "((('A: string' !== 'B: Identifier') && ('C: string' !== 'D: Identifier')) && ('E: number' <= 'F: Identifier'))": 4,
    "((null != 'A: Identifier') && 'B: CallExpression')": 4,
    "('A: MemberExpression' ? 'B: AssignmentExpression' : 'C: AssignmentExpression')": 4,
    "((null != 'A: Identifier') ? 'B: SequenceExpression' : 'C: CallExpression')": 4,
    "((typeof('A: Identifier') == \"string\") && 'B: AssignmentExpression')": 4,
    "((null != 'A: Identifier') ? 'B: AssignmentExpression' : 'C: AssignmentExpression')": 4,
    "('A: number' < 'B: CallExpression')": 4,
    "((('A: Identifier' < 'B: number') && (0 <= 'C: Identifier')) ? 'D: SequenceExpression' : 'E: AssignmentExpression')": 4,
    "(('A: Identifier' > 'B: CallExpression') ? 'C: SequenceExpression' : 'D: SequenceExpression')": 4,
    "(((\"\" + 'A: CallExpression') + 'B: CallExpression') + 'C: CallExpression')": 4,
    "(('A: MemberExpression' && ('B: UnaryExpression' === 'C: Identifier')) && 'D: AssignmentExpression')": 4,
    "void('A: AssignmentExpression')": 4,
    "((0 < 'A: MemberExpression') && 'B: CallExpression')": 4,
    "(null !== 'A: AssignmentExpression')": 4,
    "((!(1) === 'A: MemberExpression') && 'B: SequenceExpression')": 4,
    "((('A: UnaryExpression' !== 'B: Identifier') && ('C: UnaryExpression' !== 'D: Identifier')) || 'E: SequenceExpression')": 4,
    "((!(0) !== 'A: Identifier') && (!(1) !== 'B: Identifier'))": 4,
    "(!(1) !== 'A: Identifier')": 4,
    "('A: MemberExpression' && 'B: SequenceExpression')": 4,
    "('A: Identifier' ? 'B: AssignmentExpression' : 'C: AssignmentExpression')": 4,
    "(('A: CallExpression' && 'B: CallExpression') && 'C: AssignmentExpression')": 4,
    "((void(0) === 'A: Identifier') ? 'B: MemberExpression' : 'C: SequenceExpression')": 4,
    "((('A: UnaryExpression' === 'B: AssignmentExpression') || ('C: string' === 'D: Identifier')) || !('E: CallExpression'))": 4,
    "((void(0) === 'A: AssignmentExpression') || ('B: string' === 'C: Identifier'))": 4,
    "(void(0) === 'A: AssignmentExpression')": 4,
    "('A: Identifier' + ('B: MemberExpression' ? 0 : ('C: number' * 'D: CallExpression')))": 4,
    "('A: MemberExpression' ? 0 : ('B: number' * 'C: CallExpression'))": 4,
    "(('A: CallExpression' && ('B: LogicalExpression' || 'C: CallExpression')) ? 'D: CallExpression' : 'E: CallExpression')": 4,
    "(('A: MemberExpression' <= 'B: MemberExpression') ? 1 : -(1))": 4,
    "(\"string\" != typeof('A: Identifier'))": 4,
    "(0 < 'A: CallExpression')": 4,
    "(typeof('A: Identifier') == \"boolean\")": 4,
    "(1 / 0)": 4,
    "('A: Identifier' ? 'B: MemberExpression' : ('C: CallExpression' ? 'D: MemberExpression' : 'E: MemberExpression'))": 4,
    "(('A: string' === 'B: Identifier') ? (('C: UnaryExpression' !== 'D: AssignmentExpression') ? 'E: Identifier' : null) : (('F: UnaryExpression' !== 'G: AssignmentExpression') ? 'H: Identifier' : null))": 4,
    "((('A: UnaryExpression' !== 'B: AssignmentExpression') || ('C: UnaryExpression' !== 'D: AssignmentExpression')) ? 'E: Identifier' : null)": 4,
    "(('A: Identifier' && !('B: MemberExpression')) && 'C: SequenceExpression')": 4,
    "((typeof('A: Identifier') == \"object\") && 'B: SequenceExpression')": 4,
    "(('A: CallExpression' + 'B: string') + 'C: CallExpression')": 4,
    "((1 === ('A: CallExpression' % 'B: number')) ? 'C: string' : 'D: string')": 4,
    "(1 === ('A: CallExpression' % 'B: number'))": 4,
    "((('A: BinaryExpression' + 'B: string') + 'C: MemberExpression') + 'D: string')": 4,
    "(('A: CallExpression' === 'B: CallExpression') && ('C: CallExpression' === 'D: CallExpression'))": 4,
    "(('A: Identifier' < 'B: number') ? ('C: string' + 'D: CallExpression') : 'E: Identifier')": 4,
    "-(0)": 4,
    "(('A: Identifier' > 0) ? 'B: CallExpression' : 'C: CallExpression')": 4,
    "('A: Identifier' - ('B: number' * 'C: Identifier'))": 4,
    "((('A: CallExpression' + 'B: string') + 'C: Identifier') + 'D: string')": 4,
    "(('A: number' - 'B: MemberExpression') / 'C: number')": 4,
    "('A: number' - 'B: MemberExpression')": 4,
    "(('A: number' / ('B: number' * 'C: number')) < 'D: CallExpression')": 4,
    "('A: CallExpression' < ('B: number' / ('C: number' * 'D: number')))": 4,
    "(('A: number' / ('B: number' * 'C: BinaryExpression')) < 'D: CallExpression')": 4,
    "('A: CallExpression' < ('B: number' / ('C: number' * 'D: BinaryExpression')))": 4,
    "('A: number' * ('B: number' * ('C: number' + 'D: MemberExpression')))": 4,
    "(-('A: number') / 'B: number')": 4,
    "('A: Identifier' === ('B: Identifier' + 1))": 4,
    "((('A: UnaryExpression' === 'object') && ('B: UnaryExpression' !== 'undefined')) ? 'C: AssignmentExpression' : (('D: BinaryExpression' && 'E: MemberExpression') ? 'F: CallExpression' : 'G: AssignmentExpression'))": 3,
    "((('A: UnaryExpression' === 'function') && 'B: MemberExpression') ? 'C: CallExpression' : 'D: AssignmentExpression')": 3,
    "((typeof('A: Identifier') == \"object\") && (\"undefined\" != typeof('B: Identifier')))": 3,
    "((typeof('A: Identifier') == \"function\") && 'B: MemberExpression')": 3,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: number' == 'D: BinaryExpression')) ? ('E: Identifier' + 'F: string') : ('G: Identifier' + 'H: string'))": 2,
    "((('A: BinaryExpression' && 'B: BinaryExpression') || ('C: number' == 'D: BinaryExpression')) || ('E: number' == ('F: Identifier' % 'G: number')))": 2,
    "((('A: BinaryExpression' != 'B: number') && ('C: BinaryExpression' != 'D: number')) || ('E: number' == ('F: Identifier' % 'G: number')))": 2,
    "((('A: Identifier' % 'B: number') != 'C: number') && (('D: Identifier' % 'E: number') != 'F: number'))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: Identifier' < 'D: number') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: BinaryExpression' || 'I: BinaryExpression') ? 'J: Identifier' : ('K: BinaryExpression' ? 'L: ConditionalExpression' : 'M: ConditionalExpression')))": 2,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) ? 'E: Identifier' : (('F: string' === 'G: Identifier') ? ('H: BinaryExpression' ? 'I: Identifier' : 'J: BinaryExpression') : ('K: LogicalExpression' ? 'L: BinaryExpression' : 'M: UnaryExpression')))": 2,
    "(('A: number' !== 'B: AssignmentExpression') ? 'C: Identifier' : (('D: UnaryExpression' !== 'E: MemberExpression') ? ('F: MemberExpression' + 'G: CallExpression') : 'H: Identifier'))": 2,
    "('A: number' !== 'B: AssignmentExpression')": 2,
    "((void(0) !== 'A: MemberExpression') ? ('B: MemberExpression' + 'C: CallExpression') : 'D: Identifier')": 2,
    "(((1 < 'A: Identifier') && ('B: Identifier' < 'C: number')) && (1 != ~('D: UnaryExpression')))": 2,
    "('A: Identifier' + ('B: CallExpression' ? 'C: string' : ('D: CallExpression' ? 'E: string' : 'F: string')))": 2,
    "(('A: number' < 'B: Identifier') ? 'C: AssignmentExpression' : ((0 < 'D: Identifier') && 'E: AssignmentExpression'))": 2,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: number' === 'D: Identifier')) ? 'E: string' : 'F: string')": 2,
    "((('A: UnaryExpression' == \"string\") && 'B: CallExpression') ? 'C: MemberExpression' : 'D: MemberExpression')": 2,
    "((typeof('A: Identifier') == \"string\") && 'B: CallExpression')": 2,
    "((('A: BinaryExpression' && 'B: BinaryExpression') || ('C: string' === 'D: CallExpression')) ? 'E: CallExpression' : 'F: Identifier')": 2,
    "((1 == ('A: Identifier' % 'B: number')) ? 'C: string' : 'D: string')": 2,
    "('A: Identifier' ? ('B: MemberExpression' || 'C: MemberExpression') : ('D: Identifier' ? 'E: MemberExpression' : 'F: MemberExpression'))": 2,
    "((('A: BinaryExpression' ? 'B: MemberExpression' : 'C: Identifier') + 'D: string') + 'E: Identifier')": 2,
    "((('A: AssignmentExpression' < 'B: number') ? 'C: MemberExpression' : 'D: Identifier') + 'E: string')": 2,
    "(('A: AssignmentExpression' < 'B: number') ? 'C: MemberExpression' : 'D: Identifier')": 2,
    "('A: AssignmentExpression' < 'B: number')": 2,
    "('A: Identifier' ? 'B: Identifier' : 'C: Identifier')": 2,
    "('A: Identifier' + ((1 === 'B: Identifier') ? 'C: string' : \"\"))": 2,
    "((1 === 'A: Identifier') ? 'B: string' : \"\")": 2,
    "((0 === 'A: CallExpression') ? ('B: string' + 'C: Identifier') : ('D: string' + 'E: Identifier'))": 2,
    "(('A: number' === 'B: Identifier') ? 'C: string' : (('D: BinaryExpression' && 'E: BinaryExpression') ? ('F: Identifier' + 'G: string') : ('H: Identifier' + 'I: string')))": 2,
    "(((0 == 'A: BinaryExpression') && ('B: number' !== 'C: Identifier')) ? ('D: Identifier' + 'E: string') : ('F: Identifier' + 'G: string'))": 2,
    "((0 == ('A: Identifier' % 'B: number')) && ('C: number' !== 'D: Identifier'))": 2,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: Identifier' < 'E: number') ? 'F: string' : ('G: BinaryExpression' ? 'H: ConditionalExpression' : 'I: ConditionalExpression')))": 2,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: Identifier' < 'E: number') ? ('F: Identifier' ? 'G: string' : 'H: string') : ('I: BinaryExpression' ? 'J: ConditionalExpression' : 'K: string')))": 2,
    "(('A: Identifier' < 'B: number') ? ('C: Identifier' ? 'D: string' : 'E: string') : (('F: Identifier' < 'G: number') ? ('H: Identifier' ? 'I: string' : 'J: string') : 'K: string'))": 2,
    "(('A: Identifier' < 'B: number') ? ('C: Identifier' ? 'D: string' : 'E: string') : 'F: string')": 2,
    "((('A: Identifier' ? \"\" : 'B: string') + 'C: string') + 'D: MemberExpression')": 2,
    "(('A: Identifier' ? \"\" : 'B: string') + 'C: string')": 2,
    "('A: Identifier' ? \"\" : 'B: string')": 2,
    "(('A: number' == ('B: Identifier' % 'C: number')) || (('D: Identifier' % 'E: number') != 1))": 2,
    "(('A: Identifier' % 'B: number') != 1)": 2,
    "('A: CallExpression' ? ('B: Identifier' + ('C: LogicalExpression' ? 'D: string' : 'E: string')) : ('F: Identifier' ? ('G: Identifier' + 'H: string') : ('I: Identifier' + 'J: string')))": 2,
    "('A: Identifier' ? ('B: Identifier' + 'C: string') : ('D: Identifier' + 'E: string'))": 2,
    "('A: CallExpression' ? ('B: Identifier' + ('C: LogicalExpression' ? 'D: string' : 'E: string')) : ('F: Identifier' + ('G: LogicalExpression' ? 'H: string' : 'I: string')))": 2,
    "(('A: Identifier' < 'B: number') ? (('C: UnaryExpression' === 'D: Identifier') ? 'E: string' : 'F: string') : (('G: UnaryExpression' === 'H: Identifier') ? 'I: string' : 'J: string'))": 2,
    "((1 === 'A: Identifier') ? ('B: Identifier' + 'C: string') : ('D: Identifier' + 'E: string'))": 2,
    "('A: CallExpression' ? 'B: CallExpression' : ('C: CallExpression' ? 'D: CallExpression' : 'E: Identifier'))": 2,
    "((0 === 'A: Identifier') ? 'B: Identifier' : ((1 === 'C: Identifier') ? ('D: Identifier' + 'E: string') : ('F: LogicalExpression' ? 'G: BinaryExpression' : 'H: BinaryExpression')))": 2,
    "((1 === 'A: Identifier') ? ('B: Identifier' + 'C: string') : (('D: LogicalExpression' || 'E: BinaryExpression') ? ('F: string' + 'G: Identifier') : ('H: Identifier' + 'I: string')))": 2,
    "((('A: BinaryExpression' || 'B: LogicalExpression') || (0 == 'C: BinaryExpression')) ? ('D: string' + 'E: Identifier') : ('F: Identifier' + 'G: string'))": 2,
    "((('A: Identifier' < 'B: number') || ('C: BinaryExpression' && 'D: BinaryExpression')) || (0 == ('E: Identifier' % 'F: number')))": 2,
    "(('A: Identifier' < 'B: number') || (('C: Identifier' <= 'D: number') && (0 == 'E: BinaryExpression')))": 2,
    "(('A: Identifier' <= 'B: number') && (0 == ('C: Identifier' % 'D: number')))": 2,
    "((0 == 'A: AssignmentExpression') ? ('B: Identifier' / 'C: number') : 'D: Identifier')": 2,
    "(0 == 'A: AssignmentExpression')": 2,
    "((0 == ('A: Identifier' % 'B: number')) || (('C: number' < 'D: Identifier') && ('E: Identifier' < 'F: number')))": 2,
    "((1 === 'A: Identifier') ? ('B: Identifier' + 'C: CallExpression') : ('D: Identifier' ? ('E: Identifier' + 'F: ConditionalExpression') : ('G: Identifier' ? 'H: BinaryExpression' : 'I: BinaryExpression')))": 2,
    "('A: Identifier' ? ('B: Identifier' + ('C: CallExpression' ? 'D: MemberExpression' : 'E: MemberExpression')) : ('F: Identifier' ? ('G: Identifier' + 'H: MemberExpression') : ('I: Identifier' + 'J: ConditionalExpression')))": 2,
    "('A: Identifier' ? ('B: Identifier' + 'C: MemberExpression') : ('D: Identifier' + ('E: CallExpression' ? 'F: MemberExpression' : 'G: MemberExpression')))": 2,
    "('A: Identifier' ? (('B: BinaryExpression' && 'C: BinaryExpression') ? 'D: MemberExpression' : 'E: MemberExpression') : (('F: BinaryExpression' && 'G: BinaryExpression') ? 'H: MemberExpression' : 'I: MemberExpression'))": 2,
    "((('A: number' <= 'B: Identifier') && ('C: Identifier' <= 'D: number')) ? 'E: MemberExpression' : 'F: MemberExpression')": 2,
    "(('A: MemberExpression' === 1) ? ('B: Identifier' ? 'C: MemberExpression' : 'D: MemberExpression') : (('E: Identifier' + 'F: string') + 'G: CallExpression'))": 2,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) ? ('E: Identifier' + 'F: number') : 'G: Identifier')": 2,
    "((('A: string' === 'B: Identifier') && ('C: number' <= 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 2,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) ? 'E: Identifier' : (('F: LogicalExpression' || 'G: BinaryExpression') ? ('H: BinaryExpression' ? 'I: Identifier' : 'J: BinaryExpression') : void(0)))": 2,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) ? (('E: number' <= 'F: Identifier') ? 'G: Identifier' : ('H: Identifier' + 'I: number')) : void(0))": 2,
    "(((0 <= 'A: Identifier') && ('B: Identifier' < 'C: number')) ? 'D: string' : (('E: Identifier' < 'F: number') ? 'G: string' : ('H: BinaryExpression' ? 'I: string' : 'J: ConditionalExpression')))": 2,
    "((0 <= 'A: Identifier') && ('B: Identifier' < 'C: number'))": 2,
    "((('A: BinaryExpression' < 'B: number') && (1 < 'C: BinaryExpression')) && (('D: UnaryExpression' % 'E: number') != 1))": 2,
    "((('A: Identifier' % 'B: number') < 'C: number') && (1 < ('D: Identifier' % 'E: number')))": 2,
    "(1 < ('A: Identifier' % 'B: number'))": 2,
    "((~('A: UnaryExpression') % 'B: number') != 1)": 2,
    "(('A: Identifier' + ('B: LogicalExpression' ? 'C: string' : 'D: string')) + 'E: MemberExpression')": 2,
    "('A: Identifier' + (('B: BinaryExpression' || 'C: LogicalExpression') ? 'D: string' : 'E: string'))": 2,
    "((('A: number' <= 'B: BinaryExpression') || ('C: BinaryExpression' && 'D: BinaryExpression')) ? 'E: string' : 'F: string')": 2,
    "(('A: number' <= ('B: Identifier' % 'C: number')) || (('D: number' <= 'E: Identifier') && (0 == 'F: BinaryExpression')))": 2,
    "(('A: number' <= 'B: Identifier') && (0 == ('C: Identifier' % 'D: number')))": 2,
    "((1 === 'A: Identifier') ? ('B: Identifier' ? 'C: string' : 'D: string') : (('E: number' === 'F: Identifier') ? ('G: LogicalExpression' ? 'H: string' : 'I: string') : ('J: BinaryExpression' ? 'K: ConditionalExpression' : 'L: string')))": 2,
    "(('A: number' === 'B: Identifier') ? (('C: Identifier' || 'D: Identifier') ? 'E: string' : 'F: string') : (('G: Identifier' < 'H: number') ? ('I: LogicalExpression' ? 'J: string' : 'K: string') : 'L: string'))": 2,
    "(('A: Identifier' < 'B: number') ? (('C: Identifier' || 'D: Identifier') ? 'E: string' : 'F: string') : 'G: string')": 2,
    "((1 === 'A: Identifier') ? (('B: Identifier' || 'C: Identifier') ? 'D: string' : 'E: string') : (('F: number' === 'G: Identifier') ? ('H: LogicalExpression' ? 'I: string' : 'J: string') : ('K: LogicalExpression' ? 'L: string' : 'M: string')))": 2,
    "(('A: number' === 'B: Identifier') ? (('C: Identifier' || 'D: Identifier') ? 'E: string' : 'F: string') : (('G: Identifier' || 'H: Identifier') ? 'I: string' : 'J: string'))": 2,
    "(('A: string' === 'B: Identifier') ? 'C: Identifier' : (('D: string' === 'E: Identifier') ? ('F: BinaryExpression' ? 'G: Identifier' : 'H: BinaryExpression') : ('I: LogicalExpression' ? 'J: ConditionalExpression' : 'K: UnaryExpression')))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: number' <= 'D: Identifier') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: BinaryExpression' || 'I: BinaryExpression') ? ('J: BinaryExpression' ? 0 : 'K: BinaryExpression') : void(0)))": 2,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) ? ((0 === 'E: Identifier') ? 0 : ('F: Identifier' + 'G: number')) : void(0))": 2,
    "((0 === 'A: Identifier') ? 0 : ('B: Identifier' + 'C: number'))": 2,
    "('A: Identifier' + (('B: BinaryExpression' && 'C: LogicalExpression') ? 'D: string' : 'E: string'))": 2,
    "(((1 != 'A: UnaryExpression') && ('B: BinaryExpression' || 'C: BinaryExpression')) ? 'D: string' : 'E: string')": 2,
    "((1 != ~('A: UnaryExpression')) && ((1 == 'B: Identifier') || ('C: number' == 'D: Identifier')))": 2,
    "((1 == 'A: Identifier') || ('B: number' == 'C: Identifier'))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: Identifier' < 'D: number') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: LogicalExpression' || 'I: LogicalExpression') ? 'J: Identifier' : ('K: Identifier' + 'L: number')))": 2,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: BinaryExpression' && 'D: BinaryExpression')) ? 'E: Identifier' : ('F: Identifier' + 'G: number'))": 2,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) || (('E: string' === 'F: Identifier') && ('G: number' <= 'H: Identifier')))": 2,
    "((('A: BinaryExpression' ? 'B: string' : \"\") + 'C: MemberExpression') + 'D: string')": 2,
    "((\"\" === 'A: Identifier') ? 'B: string' : 'C: Identifier')": 2,
    "((('A: Identifier' + 'B: string') + ('C: BinaryExpression' ? 'D: string' : \"\")) + 'E: string')": 2,
    "(('A: Identifier' + 'B: string') + (('C: number' === 'D: CallExpression') ? 'E: string' : \"\"))": 2,
    "(('A: number' === 'B: CallExpression') ? 'C: string' : \"\")": 2,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: number' === 'E: Identifier') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: string')))": 2,
    "(('A: number' === 'B: Identifier') ? 'C: string' : (('D: Identifier' < 'E: number') ? 'F: string' : 'G: string'))": 2,
    "((('A: UnaryExpression' == \"object\") && (\"undefined\" != 'B: UnaryExpression')) ? 'C: AssignmentExpression' : (('D: BinaryExpression' && 'E: MemberExpression') ? 'F: CallExpression' : 'G: AssignmentExpression'))": 2,
    "((('A: UnaryExpression' == \"function\") && 'B: MemberExpression') ? 'C: CallExpression' : 'D: AssignmentExpression')": 2,
    "((null != 'A: Identifier') && ('B: string' === 'C: CallExpression'))": 2,
    "((typeof('A: Identifier') == \"number\") || ('B: string' === 'C: CallExpression'))": 2,
    "(typeof('A: Identifier') == \"number\")": 2,
    "(('A: MemberExpression' == null) && 'B: AssignmentExpression')": 2,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: MemberExpression' === 0)) && (void(0) === 'D: MemberExpression'))": 2,
    "((null != 'A: Identifier') ? 'B: CallExpression' : 'C: AssignmentExpression')": 2,
    "((null != 'A: MemberExpression') ? 'B: CallExpression' : 'C: Identifier')": 2,
    "((!(1) === 'A: Identifier') && 'B: SequenceExpression')": 2,
    "(!(1) === 'A: Identifier')": 2,
    "(('A: Identifier' instanceof 'B: Identifier') || ((null != 'C: Identifier') && (null != 'D: MemberExpression')))": 2,
    "((null != 'A: Identifier') && (null != 'B: MemberExpression'))": 2,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && 'C: MemberExpression') && 'D: CallExpression')": 2,
    "((('A: UnaryExpression' === 'B: MemberExpression') && (\"undefined\" != 'C: UnaryExpression')) && 'D: MemberExpression')": 2,
    "((!(1) === 'A: MemberExpression') && (\"undefined\" != typeof('B: Identifier')))": 2,
    "(typeof('A: MemberExpression') == \"object\")": 2,
    "('A: CallExpression' && (('B: CallExpression' && 'C: CallExpression') ? 'D: SequenceExpression' : ('E: BinaryExpression' ? 'F: AssignmentExpression' : 'G: UnaryExpression')))": 2,
    "(('A: CallExpression' && 'B: CallExpression') ? 'C: SequenceExpression' : ((null != 'D: MemberExpression') ? 'E: AssignmentExpression' : delete('F: MemberExpression')))": 2,
    "((null != 'A: MemberExpression') ? 'B: AssignmentExpression' : delete('C: MemberExpression'))": 2,
    "((('A: CallExpression' && 'B: UnaryExpression') && 'C: CallExpression') && 'D: AssignmentExpression')": 2,
    "((('A: BinaryExpression' ? 'B: ConditionalExpression' : 'C: string') + 'D: CallExpression') + 'E: Identifier')": 2,
    "(((0 <= 'A: Identifier') ? ('B: Identifier' ? 'C: string' : \"\") : 'D: string') + 'E: CallExpression')": 2,
    "((0 <= 'A: Identifier') ? ('B: Identifier' ? 'C: string' : \"\") : 'D: string')": 2,
    "('A: Identifier' ? 'B: string' : \"\")": 2,
    "((typeof('A: Identifier') == \"string\") ? 'B: FunctionExpression' : 'C: Identifier')": 2,
    "('A: CallExpression' ? 'B: SequenceExpression' : 'C: CallExpression')": 2,
    "((0 <= 'A: Identifier') && 'B: CallExpression')": 2,
    "((typeof('A: Identifier') == \"string\") ? ('B: MemberExpression' || 'C: MemberExpression') : void(0))": 2,
    "(('A: CallExpression' && 'B: AssignmentExpression') && 'C: AssignmentExpression')": 2,
    "(((0 == 'A: BinaryExpression') && ('B: BinaryExpression' != 0)) || (0 == ('C: Identifier' % 'D: number')))": 2,
    "((0 == ('A: Identifier' % 'B: number')) && (('C: Identifier' % 'D: number') != 0))": 2,
    "(('A: Identifier' % 'B: number') != 0)": 2,
    "(('A: Identifier' < 0) ? ('B: CallExpression' || 0) : 'C: CallExpression')": 2,
    "(((0 != 'A: Identifier') && 'B: CallExpression') ? 'C: CallExpression' : 'D: Identifier')": 2,
    "((0 != 'A: Identifier') && 'B: CallExpression')": 2,
    "(0 != 'A: Identifier')": 2,
    "(('A: CallExpression' && !('B: CallExpression')) && (('C: LogicalExpression' && 'D: BinaryExpression') ? 'E: SequenceExpression' : 'F: CallExpression'))": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: number' === 'D: CallExpression')) ? 'E: SequenceExpression' : 'F: CallExpression')": 2,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: NewExpression')": 2,
    "((('A: Identifier' % 'B: AssignmentExpression') + 'C: Identifier') % 'D: Identifier')": 2,
    "(('A: Identifier' % 'B: AssignmentExpression') + 'C: Identifier')": 2,
    "('A: Identifier' % 'B: AssignmentExpression')": 2,
    "((1 == 'A: Identifier') ? ('B: CallExpression' ? 'C: number' : 'D: number') : ('E: number' - ('F: BinaryExpression' % 'G: number')))": 2,
    "(('A: string' + ('B: MemberExpression' ? 'C: string' : \"\")) + 'D: string')": 2,
    "('A: CallExpression' + (('B: number' < 'C: CallExpression') ? 'D: number' : 'E: number'))": 2,
    "(('A: number' < 'B: CallExpression') ? 'C: number' : 'D: number')": 2,
    "(('A: Identifier' - ('B: BinaryExpression' % 'C: number')) - 1)": 2,
    "('A: Identifier' - (('B: BinaryExpression' - 'C: Identifier') % 'D: number'))": 2,
    "(((1 + 'A: BinaryExpression') + ('B: BinaryExpression' % 'C: number')) + 'D: CallExpression')": 2,
    "((1 + ('A: number' * 'B: BinaryExpression')) + (('C: BinaryExpression' - 'D: Identifier') % 'E: number'))": 2,
    "(('A: Identifier' <= 0) ? ('B: CallExpression' + 'C: Identifier') : (('D: Identifier' > 'E: CallExpression') ? 'F: SequenceExpression' : 'G: SequenceExpression'))": 2,
    "(('A: Identifier' < 1) ? 'B: AssignmentExpression' : (('C: Identifier' > 'D: CallExpression') ? 'E: SequenceExpression' : 'F: SequenceExpression'))": 2,
    "('A: AssignmentExpression' ? 'B: CallExpression' : null)": 2,
    "((('A: LogicalExpression' && 'B: Identifier') && 'C: MemberExpression') && (null != 'D: CallExpression'))": 2,
    "((('A: UnaryExpression' === 'B: MemberExpression') && (\"undefined\" != 'C: UnaryExpression')) && 'D: Identifier')": 2,
    "((void(0) === 'A: MemberExpression') && (\"undefined\" != typeof('B: Identifier')))": 2,
    "(null != 'A: CallExpression')": 2,
    "('A: Identifier' && ('B: AssignmentExpression' ? 'C: AssignmentExpression' : ('D: LogicalExpression' && 'E: CallExpression')))": 2,
    "('A: AssignmentExpression' ? 'B: AssignmentExpression' : (('C: BinaryExpression' && 'D: MemberExpression') && 'E: CallExpression'))": 2,
    "(((\"undefined\" != 'A: UnaryExpression') && 'B: MemberExpression') && 'C: CallExpression')": 2,
    "((\"undefined\" != typeof('A: Identifier')) && 'B: MemberExpression')": 2,
    "(null == 'A: AssignmentExpression')": 2,
    "('A: MemberExpression' || 'B: AssignmentExpression')": 2,
    "('A: MemberExpression' && 'B: CallExpression')": 2,
    "!('A: AssignmentExpression')": 2,
    "((('A: Identifier' && 'B: MemberExpression') && 'C: MemberExpression') ? 'D: MemberExpression' : 'E: Identifier')": 2,
    "(('A: Identifier' && ('B: UnaryExpression' === 'C: MemberExpression')) && 'D: SequenceExpression')": 2,
    "('A: Identifier' && (-('B: number') === 'C: MemberExpression'))": 2,
    "(-('A: number') === 'B: MemberExpression')": 2,
    "((('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression')) ? 'D: Identifier' : (('E: BinaryExpression' || 'F: BinaryExpression') ? 'G: Identifier' : ('H: LogicalExpression' ? 'I: Identifier' : 'J: ConditionalExpression')))": 2,
    "((('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression')) || (('D: MemberExpression' === 'E: number') && ('F: LogicalExpression' || 'G: BinaryExpression')))": 2,
    "(('A: MemberExpression' === 'B: number') && (('C: BinaryExpression' || 'D: BinaryExpression') || (0 !== 'E: MemberExpression')))": 2,
    "(((0 !== 'A: MemberExpression') || (0 !== 'B: MemberExpression')) || (0 !== 'C: MemberExpression'))": 2,
    "((0 !== 'A: MemberExpression') || (0 !== 'B: MemberExpression'))": 2,
    "((('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression')) ? 'D: Identifier' : (('E: BinaryExpression' || 'F: BinaryExpression') ? 'G: Identifier' : ('H: LogicalExpression' ? 'I: Identifier' : 'J: UnaryExpression')))": 2,
    "((('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression')) ? 'D: Identifier' : (('E: BinaryExpression' || 'F: BinaryExpression') ? 'G: Identifier' : -(1)))": 2,
    "((('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression')) ? 'D: Identifier' : -(1))": 2,
    "(('A: MemberExpression' && ('B: BinaryExpression' || 'C: BinaryExpression')) && 'D: AssignmentExpression')": 2,
    "('A: MemberExpression' && (('B: Identifier' < 'C: Identifier') || ('D: Identifier' < 'E: Identifier')))": 2,
    "(('A: Identifier' < 'B: Identifier') || ('C: Identifier' < 'D: Identifier'))": 2,
    "(!(1) !== 'A: MemberExpression')": 2,
    "('A: Identifier' || (null == 'B: Identifier'))": 2,
    "(('A: Identifier' + ('B: Identifier' || \"\")) + ('C: Identifier' || \"\"))": 2,
    "('A: Identifier' + ('B: Identifier' || \"\"))": 2,
    "('A: Identifier' ? 'B: SequenceExpression' : 'C: AssignmentExpression')": 2,
    "(('A: Identifier' && ('B: CallExpression' !== 'C: CallExpression')) ? 'D: SequenceExpression' : 'E: SequenceExpression')": 2,
    "('A: Identifier' && ('B: CallExpression' !== 'C: CallExpression'))": 2,
    "('A: Identifier' ? 'B: MemberExpression' : ('C: Identifier' ? 0 : ('D: BinaryExpression' + 'E: Identifier')))": 2,
    "('A: Identifier' ? 0 : (('B: number' * 'C: BinaryExpression') + 'D: Identifier'))": 2,
    "(('A: number' * ('B: BinaryExpression' / 'C: number')) + 'D: Identifier')": 2,
    "('A: number' * (('B: AssignmentExpression' - 'C: AssignmentExpression') / 'D: number'))": 2,
    "(('A: AssignmentExpression' - 'B: AssignmentExpression') / 'C: number')": 2,
    "('A: AssignmentExpression' - 'B: AssignmentExpression')": 2,
    "((null != 'A: Identifier') ? 'B: Identifier' : ((null != 'C: Identifier') ? 'D: Identifier' : 'E: Identifier'))": 2,
    "((null != 'A: Identifier') ? 'B: Identifier' : 'C: Identifier')": 2,
    "('A: MemberExpression' ? 'B: ArrayExpression' : 'C: ArrayExpression')": 2,
    "((('A: MemberExpression' && 'B: BinaryExpression') && ('C: MemberExpression' == null)) && 'D: SequenceExpression')": 2,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || (null != 'C: MemberExpression')) ? 'D: SequenceExpression' : 'E: SequenceExpression')": 2,
    "(((null != 'A: MemberExpression') || (null != 'B: MemberExpression')) || (null != 'C: MemberExpression'))": 2,
    "((null != 'A: MemberExpression') || (null != 'B: MemberExpression'))": 2,
    "((('A: AssignmentExpression' < 1) || ('B: number' < 'C: Identifier')) && 'D: AssignmentExpression')": 2,
    "(('A: AssignmentExpression' < 1) || ('B: number' < 'C: Identifier'))": 2,
    "('A: AssignmentExpression' < 1)": 2,
    "((null != 'A: MemberExpression') ? (('B: BinaryExpression' || 'C: BinaryExpression') && 'D: AssignmentExpression') : ((null != 'E: MemberExpression') ? 'F: SequenceExpression' : 'G: AssignmentExpression'))": 2,
    "((('A: AssignmentExpression' < 0) || ('B: number' < 'C: Identifier')) && 'D: AssignmentExpression')": 2,
    "(('A: AssignmentExpression' < 0) || ('B: number' < 'C: Identifier'))": 2,
    "('A: AssignmentExpression' < 0)": 2,
    "((null != 'A: MemberExpression') ? 'B: SequenceExpression' : 'C: AssignmentExpression')": 2,
    "((('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression')) && 'D: AssignmentExpression')": 2,
    "((('A: Identifier' < 1) || ('B: Identifier' > 'C: CallExpression')) ? 'D: AssignmentExpression' : ((null != 'E: Identifier') ? 'F: AssignmentExpression' : 'G: SequenceExpression'))": 2,
    "((null != 'A: Identifier') ? 'B: AssignmentExpression' : 'C: SequenceExpression')": 2,
    "((null != 'A: MemberExpression') && 'B: SequenceExpression')": 2,
    "((('A: MemberExpression' > 'B: CallExpression') || ('C: MemberExpression' === 0)) && 'D: AssignmentExpression')": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 0)) && 'D: SequenceExpression')": 2,
    "((('A: MemberExpression' && 'B: BinaryExpression') && ('C: MemberExpression' !== 'D: Identifier')) && 'E: AssignmentExpression')": 2,
    "(('A: MemberExpression' && ('B: UnaryExpression' !== 'C: MemberExpression')) && ('D: MemberExpression' !== 'E: Identifier'))": 2,
    "('A: MemberExpression' && (void(0) !== 'B: MemberExpression'))": 2,
    "(\"\" + 'A: MemberExpression')": 2,
    "('A: AssignmentExpression' && 'B: SequenceExpression')": 2,
    "('A: MemberExpression' ? 'B: SequenceExpression' : (('C: MemberExpression' && 'D: UnaryExpression') && 'E: CallExpression'))": 2,
    "('A: Identifier' ? 'B: AssignmentExpression' : 'C: CallExpression')": 2,
    "(((null != 'A: AssignmentExpression') && 'B: CallExpression') && 'C: CallExpression')": 2,
    "((null != 'A: AssignmentExpression') && 'B: CallExpression')": 2,
    "(('A: MemberExpression' && !('B: Identifier')) && 'C: CallExpression')": 2,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && (0 < 'C: MemberExpression')) && 'D: AssignmentExpression')": 2,
    "((('A: MemberExpression' <= 'B: number') && ('C: UnaryExpression' === 'D: MemberExpression')) && (0 < 'E: MemberExpression'))": 2,
    "(('A: MemberExpression' <= 'B: number') && (!(0) === 'C: MemberExpression'))": 2,
    "(!(0) === 'A: MemberExpression')": 2,
    "((null != 'A: MemberExpression') ? 'B: CallExpression' : ((null != 'C: MemberExpression') ? 'D: SequenceExpression' : 'E: Identifier'))": 2,
    "((null != 'A: MemberExpression') ? 'B: SequenceExpression' : 'C: Identifier')": 2,
    "(('A: AssignmentExpression' && ('B: Identifier' < 'C: number')) && 'D: AssignmentExpression')": 2,
    "('A: AssignmentExpression' && ('B: Identifier' < 'C: number'))": 2,
    "(('A: Identifier' || ('B: number' !== 'C: Identifier')) ? 'D: Identifier' : 0)": 2,
    "('A: Identifier' || ('B: number' !== 'C: Identifier'))": 2,
    "((null !== 'A: AssignmentExpression') && 'B: AssignmentExpression')": 2,
    "((null === 'A: Identifier') || (('B: UnaryExpression' === 'C: Identifier') && (\"\" === 'D: Identifier')))": 2,
    "((void(0) === 'A: Identifier') && (\"\" === 'B: Identifier'))": 2,
    "((null != 'A: MemberExpression') && 'B: AssignmentExpression')": 2,
    "('A: AssignmentExpression' + ('B: MemberExpression' * 'C: number'))": 2,
    "('A: Identifier' ? (('B: Identifier' < 'C: Identifier') && 'D: SequenceExpression') : (('E: LogicalExpression' || 'F: Identifier') && 'G: SequenceExpression'))": 2,
    "(('A: Identifier' < 'B: Identifier') && 'C: SequenceExpression')": 2,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || 'C: Identifier') && 'D: SequenceExpression')": 2,
    "('A: CallExpression' ? 'B: AssignmentExpression' : (('C: UnaryExpression' == \"string\") ? 'D: SequenceExpression' : ('E: CallExpression' ? 'F: SequenceExpression' : 'G: ConditionalExpression')))": 2,
    "((typeof('A: Identifier') == \"string\") ? 'B: SequenceExpression' : ('C: CallExpression' ? 'D: SequenceExpression' : ('E: CallExpression' ? 'F: LogicalExpression' : 'G: ConditionalExpression')))": 2,
    "((null !== 'A: AssignmentExpression') ? 'B: AssignmentExpression' : 'C: SequenceExpression')": 2,
    "('A: MemberExpression' ? 'B: AssignmentExpression' : 'C: CallExpression')": 2,
    "('A: CallExpression' ? 'B: SequenceExpression' : ('C: CallExpression' ? ('D: MemberExpression' || 'E: SequenceExpression') : ('F: CallExpression' ? 'G: AssignmentExpression' : 'H: CallExpression')))": 2,
    "('A: CallExpression' ? ('B: MemberExpression' || 'C: SequenceExpression') : ('D: CallExpression' ? 'E: AssignmentExpression' : 'F: CallExpression'))": 2,
    "((void(0) === 'A: MemberExpression') ? 'B: MemberExpression' : 'C: MemberExpression')": 2,
    "('A: CallExpression' ? 'B: AssignmentExpression' : 'C: CallExpression')": 2,
    "((('A: CallExpression' && 'B: CallExpression') || ('C: CallExpression' && 'D: BinaryExpression')) && 'E: AssignmentExpression')": 2,
    "('A: MemberExpression' + ('B: MemberExpression' ? 'C: string' : \"\"))": 2,
    "(('A: CallExpression' && 'B: CallExpression') ? (('C: Identifier' < 'D: ThisExpression') ? 'E: ThisExpression' : 'F: Identifier') : 'G: CallExpression')": 2,
    "(('A: CallExpression' && 'B: CallExpression') ? (('C: ThisExpression' < 'D: Identifier') ? 'E: ThisExpression' : 'F: Identifier') : 'G: CallExpression')": 2,
    "(('A: ThisExpression' < 'B: Identifier') ? 'C: ThisExpression' : 'D: Identifier')": 2,
    "('A: ThisExpression' < 'B: Identifier')": 2,
    "((('A: MemberExpression' === 1) && 'B: CallExpression') ? 'C: MemberExpression' : 'D: Identifier')": 2,
    "(('A: CallExpression' && !('B: CallExpression')) || 'C: AssignmentExpression')": 2,
    "('A: CallExpression' && (('B: UnaryExpression' === 'C: CallExpression') || ('D: BinaryExpression' && 'E: CallExpression')))": 2,
    "((-(1) === 'A: CallExpression') || ((null != 'B: MemberExpression') && 'C: CallExpression'))": 2,
    "(-(1) === 'A: CallExpression')": 2,
    "(('A: CallExpression' !== 'B: CallExpression') && 'C: AssignmentExpression')": 2,
    "(('A: Identifier' < 0) ? (-(1) * 'B: CallExpression') : 'C: CallExpression')": 2,
    "(-(1) * 'A: CallExpression')": 2,
    "(('A: Identifier' < 0) && 'B: SequenceExpression')": 2,
    "((null === 'A: Identifier') ? null : ((0 === 'B: AssignmentExpression') ? 0 : ('C: BinaryExpression' ? 'D: Identifier' : 'E: UnaryExpression')))": 2,
    "((0 === 'A: AssignmentExpression') ? 0 : (('B: MemberExpression' === 'C: string') ? 'D: Identifier' : -('E: Identifier')))": 2,
    "(0 === 'A: AssignmentExpression')": 2,
    "(('A: MemberExpression' * 'B: number') + 'C: CallExpression')": 2,
    "(('A: MemberExpression' || 'B: ArrayExpression') + \"\")": 2,
    "('A: MemberExpression' ? 'B: SequenceExpression' : 'C: CallExpression')": 2,
    "(('A: CallExpression' || 'B: CallExpression') ? 'C: Identifier' : 'D: CallExpression')": 2,
    "(!(!('A: CallExpression')) && ('B: MemberExpression' && ('C: MemberExpression' === 0)))": 2,
    "('A: CallExpression' ? 'B: AssignmentExpression' : (('C: CallExpression' || 'D: UnaryExpression') ? 'E: SequenceExpression' : ('F: AssignmentExpression' ? 'G: SequenceExpression' : 'H: ConditionalExpression')))": 2,
    "(('A: CallExpression' || !('B: CallExpression')) ? 'C: SequenceExpression' : ('D: AssignmentExpression' ? 'E: SequenceExpression' : ('F: AssignmentExpression' ? 'G: SequenceExpression' : 'H: ConditionalExpression')))": 2,
    "('A: AssignmentExpression' ? 'B: SequenceExpression' : ('C: AssignmentExpression' ? 'D: SequenceExpression' : ('E: BinaryExpression' ? 'F: AssignmentExpression' : 'G: LogicalExpression')))": 2,
    "('A: AssignmentExpression' ? 'B: SequenceExpression' : ((null == 'C: Identifier') ? 'D: AssignmentExpression' : ('E: LogicalExpression' && 'F: SequenceExpression')))": 2,
    "((null == 'A: Identifier') ? 'B: AssignmentExpression' : (('C: BinaryExpression' && 'D: LogicalExpression') && 'E: SequenceExpression'))": 2,
    "((('A: UnaryExpression' == \"object\") && ('B: BinaryExpression' || 'C: BinaryExpression')) && 'D: SequenceExpression')": 2,
    "((typeof('A: Identifier') == \"object\") && (('B: string' in 'C: Identifier') || ('D: string' in 'E: Identifier')))": 2,
    "('A: CallExpression' ? 'B: AssignmentExpression' : 'C: SequenceExpression')": 2,
    "('A: CallExpression' && 'B: UpdateExpression')": 2,
    "(((null === 'A: Identifier') || 'B: CallExpression') || 'C: SequenceExpression')": 2,
    "((null === 'A: Identifier') || 'B: CallExpression')": 2,
    "((null == 'A: Identifier') || 'B: Identifier')": 2,
    "((typeof('A: Identifier') == \"string\") || ('B: Identifier' instanceof 'C: Identifier'))": 2,
    "((('A: LogicalExpression' || 'B: CallExpression') || 'C: CallExpression') || (null == 'D: Identifier'))": 2,
    "((('A: Identifier' - 'B: Identifier') < 0) ? (('C: Identifier' - 'D: Identifier') / ('E: Identifier' - 'F: CallExpression')) : (('G: Identifier' - 'H: Identifier') / ('I: CallExpression' - 'J: Identifier')))": 2,
    "(('A: Identifier' - 'B: Identifier') / ('C: Identifier' - 'D: CallExpression'))": 2,
    "(('A: Identifier' - 'B: Identifier') / ('C: CallExpression' - 'D: Identifier'))": 2,
    "(1 + 'A: Identifier')": 2,
    "((null != 'A: AssignmentExpression') && 'B: AssignmentExpression')": 2,
    "((void(0) === 'A: Identifier') ? 'B: CallExpression' : 'C: CallExpression')": 2,
    "((('A: Identifier' < 'B: number') && (0 <= 'C: Identifier')) ? ('D: NewExpression' - 'E: Identifier') : 'F: CallExpression')": 2,
    "((('A: Identifier' < 'B: number') && (0 <= 'C: Identifier')) ? ('D: CallExpression' - 'E: Identifier') : 'F: CallExpression')": 2,
    "((null == 'A: Identifier') ? 'B: MemberExpression' : 'C: SequenceExpression')": 2,
    "(('A: Identifier' < 'B: Identifier') ? 'C: Identifier' : 'D: Identifier')": 2,
    "(('A: MemberExpression' === 1) && ('B: MemberExpression' ? ('C: CallExpression' ? 'D: SequenceExpression' : 'E: LogicalExpression') : 'F: AssignmentExpression'))": 2,
    "('A: MemberExpression' ? ('B: CallExpression' ? 'C: SequenceExpression' : ('D: CallExpression' && 'E: SequenceExpression')) : 'F: AssignmentExpression')": 2,
    "('A: CallExpression' ? 'B: SequenceExpression' : ('C: CallExpression' && 'D: SequenceExpression'))": 2,
    "('A: Identifier' || ('B: CallExpression' ? 'C: MemberExpression' : 'D: MemberExpression'))": 2,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: ThisExpression')": 2,
    "(!(('A: UnaryExpression' || 'B: UnaryExpression')) && (('C: string' === 'D: AssignmentExpression') ? ('E: CallExpression' > 'F: CallExpression') : ('G: CallExpression' < 'H: CallExpression')))": 2,
    "(('A: string' === 'B: AssignmentExpression') ? ('C: CallExpression' > 'D: CallExpression') : ('E: CallExpression' < 'F: CallExpression'))": 2,
    "(!(('A: UnaryExpression' || 'B: UnaryExpression')) && (('C: string' === 'D: AssignmentExpression') ? ('E: CallExpression' < 'F: CallExpression') : ('G: CallExpression' < 'H: CallExpression')))": 2,
    "(('A: string' === 'B: AssignmentExpression') ? ('C: CallExpression' < 'D: CallExpression') : ('E: CallExpression' < 'F: CallExpression'))": 2,
    "(!(!('A: LogicalExpression')) && (('B: BinaryExpression' ? 'C: CallExpression' : 'D: UnaryExpression') && ('E: BinaryExpression' ? 'F: CallExpression' : 'G: UnaryExpression')))": 2,
    "!(!(('A: LogicalExpression' && 'B: CallExpression')))": 2,
    "(!(('A: UnaryExpression' || 'B: UnaryExpression')) && (('C: string' === 'D: AssignmentExpression') ? ('E: CallExpression' === 'F: CallExpression') : 'G: SequenceExpression'))": 2,
    "(('A: string' === 'B: AssignmentExpression') ? ('C: CallExpression' === 'D: CallExpression') : 'E: SequenceExpression')": 2,
    "('A: AssignmentExpression' ? 'B: CallExpression' : 'C: ThisExpression')": 2,
    "((('A: CallExpression' < 0) || ('B: number' < 'C: CallExpression')) ? 'D: CallExpression' : ('E: CallExpression' ? ('F: Identifier' ? 'G: CallExpression' : 'H: CallExpression') : 'I: CallExpression'))": 2,
    "(('A: CallExpression' < 0) || ('B: number' < 'C: CallExpression'))": 2,
    "('A: CallExpression' ? ('B: Identifier' ? 'C: CallExpression' : 'D: CallExpression') : 'E: CallExpression')": 2,
    "('A: Identifier' ? 'B: CallExpression' : 'C: CallExpression')": 2,
    "('A: CallExpression' || 'B: SequenceExpression')": 2,
    "((('A: Identifier' + 'B: Identifier') + 'C: string') + ('D: Identifier' + 'E: string'))": 2,
    "(((\"undefined\" != 'A: UnaryExpression') && (null != 'B: MemberExpression')) && 'C: AssignmentExpression')": 2,
    "((\"undefined\" != typeof('A: Identifier')) && (null != 'B: MemberExpression'))": 2,
    "((null != 'A: Identifier') ? 'B: SequenceExpression' : 'C: Identifier')": 2,
    "((\"string\" != typeof('A: Identifier')) ? 'B: Identifier' : ('C: CallExpression' ? ('D: BinaryExpression' ? 'E: Identifier' : null) : 'F: CallExpression'))": 2,
    "('A: CallExpression' ? (('B: UnaryExpression' == \"number\") ? 'C: Identifier' : null) : 'D: CallExpression')": 2,
    "((typeof('A: AssignmentExpression') == \"number\") ? 'B: Identifier' : null)": 2,
    "(typeof('A: AssignmentExpression') == \"number\")": 2,
    "typeof('A: AssignmentExpression')": 2,
    "('A: CallExpression' ? ((null != 'B: Identifier') ? 'C: SequenceExpression' : ('D: CallExpression' || 'E: number')) : ((null != 'F: Identifier') ? 'G: ThisExpression' : 'H: Identifier'))": 2,
    "((null != 'A: Identifier') ? 'B: SequenceExpression' : ('C: CallExpression' || 'D: number'))": 2,
    "((typeof('A: Identifier') == \"string\") ? (('B: CallExpression' % 'C: number') || 'D: number') : ('E: CallExpression' ? null : 'F: Identifier'))": 2,
    "(null === 'A: AssignmentExpression')": 2,
    "((('A: CallExpression' < 'B: number') && !('C: Identifier')) && 'D: AssignmentExpression')": 2,
    "((!('A: MemberExpression') && 'B: Identifier') && 'C: AssignmentExpression')": 2,
    "(('A: Identifier' !== 'B: Identifier') && (('C: UnaryExpression' || 'D: MemberExpression') ? 'E: CallExpression' : ('F: MemberExpression' || 'G: SequenceExpression')))": 2,
    "((!('A: Identifier') || 'B: MemberExpression') ? 'C: CallExpression' : ('D: MemberExpression' || 'E: SequenceExpression'))": 2,
    "((null != 'A: MemberExpression') ? 'B: CallExpression' : (('C: UnaryExpression' == \"string\") && ('D: BinaryExpression' ? 'E: CallExpression' : 'F: CallExpression')))": 2,
    "((typeof('A: MemberExpression') == \"string\") && ((null != 'B: AssignmentExpression') ? 'C: CallExpression' : 'D: CallExpression'))": 2,
    "(typeof('A: MemberExpression') == \"string\")": 2,
    "((null != 'A: AssignmentExpression') ? 'B: CallExpression' : 'C: CallExpression')": 2,
    "(!(!('A: CallExpression')) && 'B: SequenceExpression')": 2,
    "(0 == (('A: CallExpression' - 'B: Identifier') % 'C: number'))": 2,
    "(!(!('A: CallExpression')) && !('B: MemberExpression'))": 2,
    "(!(!('A: CallExpression')) && 'B: MemberExpression')": 2,
    "((null != 'A: Identifier') ? 'B: SequenceExpression' : -('C: CallExpression'))": 2,
    "((\"string\" != typeof('A: Identifier')) ? -('B: Identifier') : 'C: Identifier')": 2,
    "('A: MemberExpression' ? 'B: SequenceExpression' : 'C: AssignmentExpression')": 2,
    "('A: CallExpression' && (0 < 'B: CallExpression'))": 2,
    "((('A: Identifier' && 'B: BinaryExpression') || ('C: UnaryExpression' && 'D: BinaryExpression')) && 'E: UpdateExpression')": 2,
    "((typeof('A: Identifier') == \"boolean\") ? ('B: CallExpression' && 'C: SequenceExpression') : 'D: SequenceExpression')": 2,
    "(('A: Identifier' || !('B: Identifier')) ? 'C: Identifier' : 'D: SequenceExpression')": 2,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) ? 'E: CallExpression' : 'F: Identifier')": 2,
    "((0 < 'A: Identifier') ? 'B: string' : 'C: string')": 2,
    "('A: CallExpression' && ('B: CallExpression' ? 'C: AssignmentExpression' : 'D: AssignmentExpression'))": 2,
    "('A: CallExpression' ? 'B: AssignmentExpression' : 'C: AssignmentExpression')": 2,
    "((void(0) === 'A: Identifier') ? 'B: CallExpression' : ('C: CallExpression' + ('D: Identifier' * 'E: BinaryExpression')))": 2,
    "('A: Identifier' ? (('B: string' === 'C: Identifier') ? ('D: BinaryExpression' ? 'E: Identifier' : null) : ('F: BinaryExpression' ? 'G: Identifier' : null)) : (('H: string' === 'I: Identifier') ? ('J: LogicalExpression' ? 'K: Identifier' : null) : ('L: LogicalExpression' ? 'M: Identifier' : null)))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: BinaryExpression' || 'D: BinaryExpression') ? 'E: Identifier' : null) : (('F: BinaryExpression' || 'G: BinaryExpression') ? 'H: Identifier' : null))": 2,
    "(('A: Identifier' || 'B: MemberExpression') || 'C: SequenceExpression')": 2,
    "('A: Identifier' || 'B: MemberExpression')": 2,
    "(('A: Identifier' && ('B: UnaryExpression' !== 'C: Identifier')) && 'D: CallExpression')": 2,
    "('A: Identifier' && (!(0) !== 'B: Identifier'))": 2,
    "((!(0) === 'A: Identifier') ? 'B: CallExpression' : ('C: Identifier' ? 'D: MemberExpression' : 'E: Identifier'))": 2,
    "('A: Identifier' ? (('B: string' === 'C: Identifier') ? ('D: BinaryExpression' ? 'E: Identifier' : null) : ('F: BinaryExpression' ? 'G: ConditionalExpression' : 'H: ConditionalExpression')) : (('I: string' === 'J: Identifier') ? ('K: LogicalExpression' ? 'L: Identifier' : null) : ('M: BinaryExpression' ? 'N: ConditionalExpression' : 'O: ConditionalExpression')))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: UnaryExpression' !== 'D: AssignmentExpression') ? 'E: Identifier' : null) : (('F: string' === 'G: Identifier') ? ('H: BinaryExpression' ? 'I: Identifier' : null) : ('J: BinaryExpression' ? 'K: Identifier' : null)))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: LogicalExpression' || 'D: BinaryExpression') ? 'E: Identifier' : null) : (('F: string' === 'G: Identifier') ? ('H: LogicalExpression' ? 'I: Identifier' : null) : ('J: LogicalExpression' ? 'K: Identifier' : null)))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: LogicalExpression' || 'D: BinaryExpression') ? 'E: Identifier' : null) : (('F: LogicalExpression' || 'G: BinaryExpression') ? 'H: Identifier' : null))": 2,
    "('A: Identifier' + ((1 === 'B: CallExpression') ? 'C: string' : ('D: BinaryExpression' ? 'E: string' : 'F: ConditionalExpression')))": 2,
    "((1 === 'A: CallExpression') ? 'B: string' : ((1 == 'C: Identifier') ? 'D: string' : ('E: BinaryExpression' ? 'F: string' : 'G: ConditionalExpression')))": 2,
    "(('A: Identifier' < 0) ? 'B: CallExpression' : 'C: CallExpression')": 2,
    "((('A: ConditionalExpression' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || (('E: Identifier' <= 1) && 'F: ArrayExpression'))": 2,
    "((('A: BinaryExpression' ? 'B: ArrayExpression' : 'C: LogicalExpression') || ('D: BinaryExpression' && 'E: ArrayExpression')) || (('F: Identifier' < 'G: MemberExpression') && 'H: ArrayExpression'))": 2,
    "((('A: Identifier' <= 'B: MemberExpression') ? 'C: ArrayExpression' : ('D: BinaryExpression' && 'E: ArrayExpression')) || (('F: Identifier' <= 1) && 'G: ArrayExpression'))": 2,
    "(('A: Identifier' <= 'B: MemberExpression') ? 'C: ArrayExpression' : (('D: Identifier' < 'E: MemberExpression') && 'F: ArrayExpression'))": 2,
    "((('A: AssignmentExpression' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || (('E: Identifier' <= 1) && 'F: ArrayExpression'))": 2,
    "(('A: AssignmentExpression' || ('B: BinaryExpression' && 'C: ArrayExpression')) || (('D: Identifier' < 'E: MemberExpression') && 'F: ArrayExpression'))": 2,
    "('A: AssignmentExpression' || (('B: Identifier' <= 1) && 'C: ArrayExpression'))": 2,
    "((null != 'A: MemberExpression') ? (('B: Identifier' || 'C: LogicalExpression') || ('D: BinaryExpression' && 'E: ArrayExpression')) : 'F: Identifier')": 2,
    "(0 < +('A: Identifier'))": 2,
    "(((0 < 'A: Identifier') - ('B: Identifier' < 0)) || +('C: Identifier'))": 2,
    "((0 < 'A: Identifier') - ('B: Identifier' < 0))": 2,
    "('A: Identifier' ? 'B: SequenceExpression' : 'C: string')": 2,
    "('A: Identifier' ? 'B: CallExpression' : \"\")": 2,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: LogicalExpression' ? 'D: string' : \"\")) + ('E: Identifier' ? ('F: BinaryExpression' + 'G: string') : \"\"))": 2,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: Identifier' ? 'D: BinaryExpression' : \"\")) + (('E: LogicalExpression' || 'F: Identifier') ? 'G: string' : \"\"))": 2,
    "((('A: ConditionalExpression' + 'B: string') + ('C: Identifier' ? 'D: BinaryExpression' : \"\")) + ('E: Identifier' ? ('F: BinaryExpression' + 'G: string') : \"\"))": 2,
    "((('A: BinaryExpression' ? 'B: string' : \"\") + 'C: string') + ('D: Identifier' ? ('E: BinaryExpression' + 'F: string') : \"\"))": 2,
    "((('A: Identifier' < 0) ? 'B: string' : \"\") + 'C: string')": 2,
    "(('A: Identifier' < 0) ? 'B: string' : \"\")": 2,
    "((('A: Identifier' || 'B: Identifier') || 'C: Identifier') ? 'D: string' : \"\")": 2,
    "((('A: string' === 'B: AssignmentExpression') || ('C: string' === 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 2,
    "(('A: string' === 'B: AssignmentExpression') || ('C: string' === 'D: Identifier'))": 2,
    "('A: CallExpression' ? (('B: BinaryExpression' + 'C: BinaryExpression') + ('D: number' * 'E: CallExpression')) : 'F: Identifier')": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') || ('C: LogicalExpression' && 'D: BinaryExpression')) || 'E: SequenceExpression')": 2,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && (0 <= 'C: Identifier')) || (('D: BinaryExpression' && 'E: BinaryExpression') && ('F: Identifier' <= 0)))": 2,
    "(((0 <= 'A: Identifier') && (0 <= 'B: Identifier')) && (0 <= 'C: Identifier'))": 2,
    "((0 <= 'A: Identifier') && (0 <= 'B: Identifier'))": 2,
    "((typeof('A: Identifier') == \"boolean\") && 'B: AssignmentExpression')": 2,
    "(((null != 'A: MemberExpression') && ('B: MemberExpression' == null)) && 'C: AssignmentExpression')": 2,
    "((null != 'A: MemberExpression') && ('B: MemberExpression' == null))": 2,
    "((null != 'A: Identifier') ? 'B: SequenceExpression' : ((null != 'C: MemberExpression') && ('D: BinaryExpression' ? 'E: SequenceExpression' : 'F: LogicalExpression')))": 2,
    "(((null != 'A: MemberExpression') && (null != 'B: MemberExpression')) ? 'C: CallExpression' : 'D: SequenceExpression')": 2,
    "((null != 'A: MemberExpression') && (null != 'B: MemberExpression'))": 2,
    "((null != 'A: AssignmentExpression') ? 'B: MemberExpression' : 'C: Identifier')": 2,
    "((null == 'A: Identifier') && 'B: AssignmentExpression')": 2,
    "((null != 'A: MemberExpression') && ((null != 'B: MemberExpression') ? 'C: SequenceExpression' : ('D: BinaryExpression' && 'E: UnaryExpression')))": 2,
    "((null != 'A: MemberExpression') ? 'B: SequenceExpression' : ((null != 'C: MemberExpression') && delete('D: MemberExpression')))": 2,
    "(('A: Identifier' === 'B: CallExpression') && 'C: CallExpression')": 2,
    "((null != 'A: MemberExpression') && delete('B: MemberExpression'))": 2,
    "((void(0) === 'A: Identifier') ? 'B: Identifier' : (('C: UnaryExpression' == \"function\") && 'D: SequenceExpression'))": 2,
    "((typeof('A: Identifier') == \"function\") && 'B: SequenceExpression')": 2,
    "((void(0) !== 'A: MemberExpression') && (('B: UnaryExpression' === 'C: Identifier') ? 'D: MemberExpression' : 'E: SequenceExpression'))": 2,
    "(('A: string' === 'B: Identifier') && 'C: AssignmentExpression')": 2,
    "(('A: AssignmentExpression' < -('B: number')) ? 'C: string' : (('D: Identifier' < 'E: UnaryExpression') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: ConditionalExpression')))": 2,
    "('A: AssignmentExpression' < -('B: number'))": 2,
    "((('A: BinaryExpression' + 'B: BinaryExpression') + 'C: string') + 'D: Identifier')": 2,
    "('A: string' + ((1 === 'B: BinaryExpression') ? 'C: string' : 'D: string'))": 2,
    "((('A: Identifier' + 'B: string') + ('C: BinaryExpression' ? 'D: string' : 'E: string')) + 'F: string')": 2,
    "(('A: Identifier' + 'B: string') + ((1 === 'C: BinaryExpression') ? 'D: string' : 'E: string'))": 2,
    "((0 === 'A: Identifier') ? 'B: string' : 'C: string')": 2,
    "(('A: Identifier' + 'B: Identifier') < 'C: number')": 2,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + 'D: Identifier')": 2,
    "((('A: string' + 'B: MemberExpression') + 'C: string') + 'D: MemberExpression')": 2,
    "((('A: number' === 'B: Identifier') || ('C: number' === 'D: Identifier')) ? 'E: string' : 'F: string')": 2,
    "('A: Identifier' !== 'B: CallExpression')": 2,
    "('A: CallExpression' !== 'B: number')": 2,
    "(('A: Identifier' < 1) ? 'B: string' : (('C: Identifier' < 'D: number') ? 'E: string' : ('F: BinaryExpression' ? 'G: string' : 'H: ConditionalExpression')))": 2,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: Identifier' < 'E: number') ? 'F: string' : ('G: LogicalExpression' ? 'H: string' : 'I: ConditionalExpression')))": 2,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: BinaryExpression' && 'E: BinaryExpression') ? 'F: string' : ('G: LogicalExpression' ? 'H: string' : 'I: string')))": 2,
    "((('A: CallExpression' === 'B: CallExpression') && ('C: CallExpression' === 'D: CallExpression')) ? 'E: string' : (('F: BinaryExpression' && 'G: BinaryExpression') ? 'H: string' : 'I: string'))": 2,
    "((('A: CallExpression' === 'B: CallExpression') && ('C: CallExpression' === 'D: CallExpression')) ? 'E: string' : 'F: string')": 2,
    "('A: CallExpression' !== 'B: Identifier')": 2,
    "('A: number' - 1)": 2,
    "(+('A: number') * 'B: number')": 2,
    "+((('A: number' * 'B: number') + 'C: number'))": 2,
    "-((('A: number' * 'B: number') + 'C: number'))": 2,
    "(('A: Identifier' >= 0) ? (('B: BinaryExpression' + 'C: string') + 'D: CallExpression') : (('E: BinaryExpression' + 'F: string') + 'G: CallExpression'))": 2,
    "(('A: number' + 'B: Identifier') % 'C: number')": 2,
    "(+('A: Identifier') + (('B: UnaryExpression' > 'C: number') ? 'D: number' : 'E: number'))": 2,
    "((+('A: Identifier') > 'B: number') ? 'C: number' : 'D: number')": 2,
    "((('A: BinaryExpression' ? 'B: string' : '') + 'C: Identifier') + 'D: string')": 2,
    "((('A: Identifier' < 'B: number') ? 'C: string' : '') + 'D: Identifier')": 2,
    "(('A: Identifier' < 'B: number') ? 'C: string' : '')": 2,
    "('A: Identifier' != 1)": 2,
    "(-(('A: CallExpression' - 'B: CallExpression')) / 'C: number')": 2,
    "-(('A: CallExpression' - 'B: CallExpression'))": 2,
    "((('A: number' - 'B: MemberExpression') / 'C: number') / 'D: number')": 2,
    "(-(1) > 'A: CallExpression')": 2,
    "((-('A: number') / 'B: number') < 'C: CallExpression')": 2,
    "-(('A: number' / 'B: number'))": 2,
    "(-(1) - (('A: number' / 'B: number') / 'C: number'))": 2,
    "(-('A: number') - (('B: number' / 'C: number') / 'D: number'))": 2,
    "((1 / 'A: Identifier') < 0)": 2,
    "(1 / 'A: Identifier')": 2,
    "('A: CallExpression' + ('B: number' * 'C: CallExpression'))": 2,
    "((('A: Identifier' === 'B: Identifier') && ('C: Identifier' === 'D: BinaryExpression')) || (('E: Identifier' === 'F: BinaryExpression') && (0 === 'G: Identifier')))": 2,
    "(('A: Identifier' === 'B: Identifier') && ('C: Identifier' === ('D: Identifier' + 1)))": 2,
    "(('A: Identifier' === ('B: Identifier' + 1)) && (0 === 'C: Identifier'))": 2,
    "((('A: number' * 'B: BinaryExpression') + ('C: number' * 'D: BinaryExpression')) + 'E: number')": 2,
    "(('A: number' * ('B: number' * 'C: BinaryExpression')) + ('D: number' * ('E: number' * 'F: number')))": 2,
    "(('A: number' * ('B: number' * 'C: BinaryExpression')) - 'D: number')": 2,
    "((('A: number' * 'B: BinaryExpression') + ('C: number' * 'D: BinaryExpression')) - 'E: number')": 2,
    "(('A: number' * ('B: number' * 'C: BinaryExpression')) + ('D: number' * (1 * 'E: number')))": 2,
    "('A: number' * (1 * 'B: number'))": 2,
    "(1 * 'A: number')": 2,
    "((('A: UnaryExpression' !== 'undefined') && 'B: MemberExpression') && 'C: MemberExpression')": 2,
    "('A: NewExpression' instanceof 'B: Identifier')": 2,
    "('A: string' instanceof 'B: Identifier')": 2,
    "(1 instanceof 'A: Identifier')": 2,
    "(null instanceof 'A: Identifier')": 2,
    "('A: CallExpression' !== 'B: MemberExpression')": 2,
    "(('A: Identifier' <= +('B: Identifier')) && (+('C: Identifier') <= 'D: Identifier'))": 2,
    "('A: Identifier' <= +('B: Identifier'))": 2,
    "(+('A: Identifier') <= 'B: Identifier')": 2,
    "(('A: number' / 'B: number') - 'C: CallExpression')": 2,
    "((('' + 'A: Identifier') + 'B: string') + ('C: number' * 'D: Identifier'))": 2,
    "('A: CallExpression' < -('B: number'))": 2,
    "((('A: number' + 'B: number') + 'C: Identifier') % 'D: number')": 2,
    "(('A: number' + 'B: number') + 'C: Identifier')": 2,
    "('A: number' + 'B: number')": 2,
    "('A: Identifier' < ('B: Identifier' + 'C: number'))": 2,
    "(('A: number' === 'B: CallExpression') ? 1 : 0)": 2,
    "(('A: MemberExpression' != null) ? 'B: MemberExpression' : 'C: string')": 2,
    "('A: number' * ('B: number' * ('C: UnaryExpression' * 'D: number')))": 1,
    "('A: number' * (-(1) * 'B: number'))": 1,
    "(-(1) * 'A: number')": 1,
    "('A: Identifier' + ('B: number' * 'C: Identifier'))": 1,
    "('A: MemberExpression' < 'B: Identifier')": 1,
    "(('A: Identifier' ? ('B: Identifier' ? 'C: string' : '') : 'D: string') + 'E: Identifier')": 1,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: ObjectExpression')": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' == \"function\")) ? 'D: CallExpression' : (('E: BinaryExpression' && 'F: MemberExpression') ? 'G: CallExpression' : 'H: CallExpression'))": 1,
    "((('A: UnaryExpression' == \"object\") && (\"undefined\" != 'B: UnaryExpression')) && (typeof('C: Identifier') == \"function\"))": 1,
    "((('A: UnaryExpression' == \"function\") && 'B: MemberExpression') ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "('A: Identifier' != 'B: string')": 1,
    "('A: string' in 'B: MemberExpression')": 1,
    "(!('A: Identifier') || ('B: MemberExpression' !== 'C: number'))": 1,
    "('A: MemberExpression' !== 'B: number')": 1,
    "!(('A: Identifier' in 'B: Identifier'))": 1,
    "((('A: MemberExpression' != null) && ('B: MemberExpression' !== 'C: string')) ? 'D: string' : 'E: MemberExpression')": 1,
    "(('A: MemberExpression' != null) && ('B: MemberExpression' !== 'C: string'))": 1,
    "('A: MemberExpression' !== 'B: string')": 1,
    "('A: MemberExpression' ? 'B: MemberExpression' : 'C: string')": 1,
    "(('A: MemberExpression' != null) ? 'B: MemberExpression' : 'C: number')": 1,
    "(('A: MemberExpression' != null) ? 'B: MemberExpression' : false)": 1,
    "(('A: MemberExpression' === true) ? 'B: string' : 'C: string')": 1,
    "(('A: MemberExpression' === true) ? 'B: number' : 'C: number')": 1
}