Found 99531 patterns and 5016 unique patterns, 1048 files could not be parsed:
{
    "('A: string' + 'B: Identifier')": 6033,
    "(('A: string' + 'B: Identifier') + 'C: string')": 4575,
    "typeof('A: Identifier')": 3160,
    "('A: Identifier' < 'B: number')": 2883,
    "('A: Identifier' + 'B: string')": 2876,
    "('A: string' === 'B: Identifier')": 2531,
    "!('A: CallExpression')": 1772,
    "-(1)": 1743,
    "('A: Identifier' < 'B: MemberExpression')": 1605,
    "('A: number' === 'B: Identifier')": 1431,
    "((('A: string' + 'B: Identifier') + 'C: string') + 'D: Identifier')": 1336,
    "!('A: Identifier')": 1256,
    "('A: MemberExpression' === 'B: number')": 1135,
    "((('A: BinaryExpression' + 'B: string') + 'C: Identifier') + 'D: string')": 1042,
    "('A: Identifier' + 1)": 1035,
    "-('A: number')": 893,
    "('A: string' + 'B: CallExpression')": 892,
    "(typeof('A: Identifier') === 'function')": 884,
    "('A: Identifier' < 'B: Identifier')": 875,
    "('A: Identifier' % 'B: number')": 812,
    "void(0)": 730,
    "('A: Identifier' && 'B: MemberExpression')": 704,
    "!('A: MemberExpression')": 700,
    "+('A: Identifier')": 690,
    "(null == 'A: Identifier')": 678,
    "('A: Identifier' != null)": 676,
    "('A: MemberExpression' === 'B: string')": 675,
    "('A: Identifier' || 'B: Identifier')": 657,
    "('A: MemberExpression' === 'B: Identifier')": 635,
    "('A: Identifier' !== 'B: string')": 633,
    "('A: string' + 'B: MemberExpression')": 615,
    "('A: Identifier' ? 'B: string' : 'C: string')": 604,
    "('A: MemberExpression' + 'B: string')": 582,
    "('A: Identifier' + 'B: Identifier')": 577,
    "('A: string' + 'B: string')": 570,
    "('A: Identifier' === 'B: Identifier')": 568,
    "!(0)": 568,
    "('A: Identifier' + 'B: number')": 502,
    "('A: Identifier' <= 'B: number')": 499,
    "typeof('A: MemberExpression')": 472,
    "(typeof('A: Identifier') !== 'undefined')": 460,
    "(typeof('A: Identifier') === 'object')": 457,
    "(1 === 'A: Identifier')": 421,
    "(('A: string' + 'B: CallExpression') + 'C: string')": 410,
    "(('A: Identifier' + 'B: string') + 'C: Identifier')": 397,
    "(('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier'))": 380,
    "('A: MemberExpression' != null)": 367,
    "((typeof('A: Identifier') === 'function') && 'B: MemberExpression')": 354,
    "('A: Identifier' - 1)": 345,
    "(('A: Identifier' || 'B: Identifier') ? 'C: string' : 'D: string')": 344,
    "!(1)": 342,
    "('A: Identifier' - 'B: Identifier')": 342,
    "((typeof('A: Identifier') === 'object') && (typeof('B: Identifier') !== 'undefined'))": 336,
    "('A: Identifier' instanceof 'B: Identifier')": 329,
    "((('A: UnaryExpression' === 'function') && 'B: MemberExpression') ? 'C: CallExpression' : 'D: CallExpression')": 327,
    "(('A: MemberExpression' + 'B: string') + 'C: MemberExpression')": 327,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' === 'function')) ? 'D: CallExpression' : (('E: BinaryExpression' && 'F: MemberExpression') ? 'G: CallExpression' : 'H: CallExpression'))": 324,
    "((('A: UnaryExpression' === 'object') && ('B: UnaryExpression' !== 'undefined')) && (typeof('C: Identifier') === 'function'))": 324,
    "('A: MemberExpression' || 'B: MemberExpression')": 323,
    "(null === 'A: Identifier')": 321,
    "('A: number' + 'B: Identifier')": 314,
    "('A: Identifier' !== 'B: Identifier')": 305,
    "((('A: Identifier' + 'B: string') + 'C: Identifier') + 'D: string')": 304,
    "delete('A: MemberExpression')": 277,
    "('A: number' * 'B: Identifier')": 277,
    "(('A: Identifier' + 'B: string') + ('C: Identifier' + 1))": 271,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + ('D: Identifier' + 1))": 250,
    "(0 === 'A: Identifier')": 248,
    "('A: Identifier' && 'B: CallExpression')": 247,
    "('A: Identifier' / 'B: number')": 240,
    "('A: MemberExpression' !== 0)": 227,
    "('A: CallExpression' !== 1)": 222,
    "('A: MemberExpression' === 0)": 220,
    "(-(1) === 'A: Identifier')": 219,
    "('A: Identifier' >= 'B: number')": 211,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 202,
    "('A: MemberExpression' !== 1)": 196,
    "('A: MemberExpression' - 1)": 195,
    "(('A: string' + 'B: string') + 'C: string')": 195,
    "('A: CallExpression' === 'B: MemberExpression')": 191,
    "(('A: Identifier' != null) && ('B: MemberExpression' === 'C: Identifier'))": 187,
    "(('A: Identifier' != null) && ('B: CallExpression' === 'C: MemberExpression'))": 187,
    "('A: CallExpression' && 'B: CallExpression')": 183,
    "(typeof('A: Identifier') !== \"function\")": 183,
    "('A: CallExpression' + 'B: string')": 180,
    "((('A: BinaryExpression' + 'B: string') + 'C: string') + 'D: string')": 179,
    "('A: Identifier' ? 'B: CallExpression' : 'C: CallExpression')": 177,
    "('A: CallExpression' ? 'B: string' : 'C: string')": 177,
    "-('A: Identifier')": 176,
    "('A: string' === 'B: CallExpression')": 167,
    "('A: Identifier' > 0)": 162,
    "('A: Identifier' >= 0)": 162,
    "~('A: CallExpression')": 158,
    "('A: MemberExpression' && 'B: MemberExpression')": 156,
    "(0 === 'A: CallExpression')": 155,
    "(('A: string' + ('B: BinaryExpression' ? 'C: string' : '')) + 'D: string')": 154,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 152,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 151,
    "(typeof('A: Identifier') === 'string')": 150,
    "('A: string' + (('B: CallExpression' !== 1) ? 'C: string' : ''))": 148,
    "(('A: CallExpression' !== 1) ? 'B: string' : '')": 148,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + 'D: CallExpression')": 146,
    "(('A: string' + 'B: MemberExpression') + 'C: string')": 146,
    "!(~('A: CallExpression'))": 145,
    "('A: Identifier' !== null)": 144,
    "!(!(~('A: CallExpression')))": 141,
    "('A: MemberExpression' !== 'B: Identifier')": 140,
    "((('A: string' + 'B: CallExpression') + 'C: string') + 'D: Identifier')": 138,
    "('A: Identifier' > 'B: number')": 136,
    "('A: MemberExpression' !== 'B: string')": 136,
    "('A: CallExpression' !== -(1))": 133,
    "('A: Identifier' * 'B: Identifier')": 130,
    "(void(0) === 'A: Identifier')": 129,
    "('A: Identifier' ? 'B: MemberExpression' : 'C: MemberExpression')": 128,
    "('A: MemberExpression' > 0)": 126,
    "('A: Identifier' + ('B: CallExpression' ? 'C: string' : 'D: string'))": 126,
    "('A: MemberExpression' === 'B: MemberExpression')": 125,
    "('A: CallExpression' || 'B: CallExpression')": 124,
    "('A: Identifier' !== -(1))": 123,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + 'D: Identifier')": 121,
    "('A: string' == 'B: Identifier')": 119,
    "(('A: Identifier' < 'B: number') ? 'C: string' : 'D: string')": 119,
    "('A: string' in 'B: Identifier')": 119,
    "('A: Identifier' < 0)": 118,
    "('A: MemberExpression' === 1)": 113,
    "('A: Identifier' > 'B: Identifier')": 113,
    "('A: MemberExpression' || 'B: Identifier')": 100,
    "('A: Identifier' ? 'B: CallExpression' : null)": 100,
    "(('A: Identifier' >= 'B: number') ? 'C: Identifier' : ('D: Identifier' + 'E: number'))": 100,
    "('A: Identifier' ? 'B: Identifier' : 'C: Identifier')": 99,
    "('A: MemberExpression' || 0)": 99,
    "(('A: Identifier' % 'B: number') / 'C: number')": 99,
    "('A: Identifier' <= 'B: Identifier')": 98,
    "((('A: string' + 'B: string') + 'C: string') + 'D: string')": 98,
    "('A: number' * 'B: number')": 97,
    "(('A: string' + ('B: BinaryExpression' ? 'C: string' : 'D: string')) + 'E: string')": 96,
    "(typeof('A: MemberExpression') === 'function')": 94,
    "('A: number' * 'B: CallExpression')": 92,
    "('A: Identifier' && 'B: Identifier')": 92,
    "('A: CallExpression' - 1)": 92,
    "('A: number' <= 'B: Identifier')": 89,
    "(('A: number' === 'B: Identifier') || ('C: number' === 'D: Identifier'))": 89,
    "('A: Identifier' + 'B: CallExpression')": 87,
    "('A: MemberExpression' - 'B: MemberExpression')": 86,
    "('A: number' == 'B: Identifier')": 86,
    "('A: CallExpression' !== 'B: CallExpression')": 86,
    "('A: CallExpression' && !('B: CallExpression'))": 85,
    "(typeof('A: Identifier') !== \"object\")": 85,
    "('A: Identifier' ? 'B: MemberExpression' : 'C: Identifier')": 84,
    "('A: number' === 'B: CallExpression')": 84,
    "('A: ThisExpression' === 'B: Identifier')": 84,
    "(false === 'A: Identifier')": 82,
    "('A: Identifier' && ('B: MemberExpression' || 'C: MemberExpression'))": 81,
    "('A: MemberExpression' && 'B: CallExpression')": 80,
    "('A: MemberExpression' == null)": 80,
    "('A: Identifier' in 'B: Identifier')": 79,
    "('A: MemberExpression' !== 'B: MemberExpression')": 79,
    "((typeof('A: Identifier') !== \"object\") && (typeof('B: Identifier') !== \"function\"))": 79,
    "(typeof('A: Identifier') === \"function\")": 78,
    "-(0)": 78,
    "((null === 'A: Identifier') || (('B: UnaryExpression' !== \"object\") && ('C: UnaryExpression' !== \"function\")))": 78,
    "('A: Identifier' || 'B: AssignmentExpression')": 77,
    "(('A: Identifier' < 'B: number') ? 'C: Identifier' : ('D: Identifier' + 'E: number'))": 77,
    "((('A: number' === 'B: Identifier') || ('C: number' === 'D: Identifier')) || ('E: number' === 'F: Identifier'))": 77,
    "~(~(('A: BinaryExpression' / 'B: number')))": 77,
    "~((('A: Identifier' % 'B: number') / 'C: number'))": 77,
    "(null != 'A: Identifier')": 76,
    "('' + 'A: Identifier')": 75,
    "(('A: Identifier' % 'B: number') >= 'C: number')": 75,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: Identifier')": 74,
    "('A: CallExpression' % 'B: number')": 74,
    "('A: string' + (('B: CallExpression' !== 1) ? 'C: string' : 'D: string'))": 74,
    "(('A: CallExpression' !== 1) ? 'B: string' : 'C: string')": 74,
    "(('A: number' === 'B: Identifier') ? 'C: string' : (('D: number' === 'E: Identifier') ? 'F: string' : 'G: string'))": 74,
    "(('A: number' === 'B: Identifier') ? 'C: string' : 'D: string')": 74,
    "('A: Identifier' >= 'B: Identifier')": 73,
    "(true === 'A: Identifier')": 72,
    "('A: Identifier' <= 'B: MemberExpression')": 72,
    "('A: TemplateLiteral' + 'B: TemplateLiteral')": 72,
    "('A: CallExpression' + 1)": 71,
    "('A: CallExpression' - 'B: CallExpression')": 71,
    "('A: CallExpression' >= 0)": 70,
    "('A: MemberExpression' - 'B: number')": 70,
    "(null != 'A: MemberExpression')": 70,
    "('A: Identifier' + (('B: Identifier' || 'C: Identifier') ? 'D: string' : 'E: string'))": 70,
    "('A: Identifier' + ('B: Identifier' ? 'C: string' : 'D: string'))": 70,
    "!(!('A: MemberExpression'))": 69,
    "('A: Identifier' || 'B: ObjectExpression')": 69,
    "('A: Identifier' <= 0)": 68,
    "('A: Identifier' || 'B: CallExpression')": 68,
    "((0 === 'A: CallExpression') ? 'B: string' : 'C: string')": 67,
    "(typeof('A: Identifier') !== 'function')": 66,
    "('A: MemberExpression' || 'B: string')": 66,
    "('A: CallExpression' ? 'B: MemberExpression' : 'C: MemberExpression')": 66,
    "(-('A: number') * 'B: number')": 66,
    "('A: Identifier' === 'B: CallExpression')": 65,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: Identifier' < 'E: number') ? 'F: string' : 'G: string'))": 65,
    "(!('A: CallExpression') && 'B: CallExpression')": 62,
    "('A: MemberExpression' <= 'B: Identifier')": 62,
    "(1 !== 'A: CallExpression')": 62,
    "('A: CallExpression' instanceof 'B: Identifier')": 60,
    "((1 === 'A: Identifier') ? 'B: string' : (('C: number' === 'D: Identifier') ? 'E: string' : ('F: BinaryExpression' ? 'G: string' : 'H: string')))": 60,
    "(('A: string' + ('B: BinaryExpression' ? 'C: string' : 'D: ConditionalExpression')) + 'E: string')": 60,
    "('A: CallExpression' ? 'B: Identifier' : 'C: Identifier')": 59,
    "('A: Identifier' > 1)": 59,
    "('A: CallExpression' / 'B: number')": 59,
    "(('A: MemberExpression' <= 'B: Identifier') && ('C: Identifier' <= 'D: MemberExpression'))": 58,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: Identifier' < 'E: number') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: string')))": 58,
    "('A: Identifier' && 'B: AssignmentExpression')": 57,
    "('A: MemberExpression' - 'B: Identifier')": 57,
    "(0 === ('A: Identifier' % 'B: number'))": 57,
    "(('A: Identifier' + 'B: Identifier') + 'C: string')": 56,
    "(('A: Identifier' + 'B: string') + 'C: CallExpression')": 56,
    "(('A: Identifier' % 'B: number') <= 'C: number')": 56,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: Identifier' < 'E: number') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: ConditionalExpression')))": 56,
    "('A: Identifier' || 'B: string')": 55,
    "((~('A: UnaryExpression') === 1) ? 'B: string' : ((1 === 'C: Identifier') ? 'D: string' : ('E: BinaryExpression' ? 'F: string' : 'G: ConditionalExpression')))": 55,
    "(~(~('A: BinaryExpression')) === 1)": 55,
    "!(!('A: Identifier'))": 54,
    "(\"undefined\" != typeof('A: Identifier'))": 54,
    "('A: Identifier' ? 'B: MemberExpression' : null)": 54,
    "('A: MemberExpression' > 1)": 53,
    "('A: Identifier' < 1)": 53,
    "((1 === 'A: Identifier') ? 'B: string' : 'C: string')": 53,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: CallExpression')": 52,
    "('A: MemberExpression' * 'B: number')": 52,
    "('A: Identifier' || '')": 52,
    "('A: Identifier' <= 1)": 52,
    "(typeof('A: Identifier') === 'number')": 51,
    "('A: MemberExpression' || 'B: ObjectExpression')": 51,
    "('A: MemberExpression' > 'B: number')": 51,
    "('A: MemberExpression' && 'B: Identifier')": 51,
    "('A: MemberExpression' + 'B: MemberExpression')": 51,
    "('A: CallExpression' - 'B: Identifier')": 51,
    "('A: CallExpression' ? 'B: Identifier' : 'C: CallExpression')": 51,
    "('A: MemberExpression' < 0)": 51,
    "((null == 'A: Identifier') || 'B: Identifier')": 51,
    "(('A: Identifier' + 'B: Identifier') + 'C: Identifier')": 50,
    "((('A: BinaryExpression' + 'B: string') + 'C: CallExpression') + 'D: string')": 50,
    "('A: Identifier' !== '')": 50,
    "('A: CallExpression' || 'B: AssignmentExpression')": 50,
    "('A: Identifier' * 'B: CallExpression')": 50,
    "(('A: Identifier' !== -(1)) ? 'B: Identifier' : null)": 50,
    "(('A: number' === 'B: Identifier') && 'C: AssignmentExpression')": 50,
    "('A: string' + (('B: CallExpression' > 1) ? 'C: string' : ('D: BinaryExpression' ? 'E: string' : 'F: string')))": 48,
    "(('A: CallExpression' > 1) ? 'B: string' : ((0 === 'C: CallExpression') ? 'D: string' : 'E: string'))": 48,
    "('A: CallExpression' > 1)": 48,
    "(typeof('A: Identifier') == \"object\")": 47,
    "('A: string' !== 'B: Identifier')": 47,
    "('A: Identifier' instanceof 'B: MemberExpression')": 47,
    "(1 === ('A: Identifier' % 'B: number'))": 47,
    "(('A: Identifier' - 'B: Identifier') / 'C: number')": 46,
    "(typeof('A: Identifier') == \"function\")": 45,
    "('A: Identifier' ? 'B: CallExpression' : 'C: Identifier')": 45,
    "('A: CallExpression' === 'B: CallExpression')": 45,
    "('A: CallExpression' + 'B: Identifier')": 45,
    "(('A: MemberExpression' || 'B: MemberExpression') || 'C: MemberExpression')": 45,
    "(('A: TemplateLiteral' + 'B: TemplateLiteral') + 'C: TemplateLiteral')": 45,
    "('A: MemberExpression' === false)": 44,
    "('A: MemberExpression' ? 'B: CallExpression' : 'C: CallExpression')": 44,
    "((null == 'A: Identifier') ? 'B: Identifier' : 'C: CallExpression')": 44,
    "('A: Identifier' + ((1 === 'B: Identifier') ? 'C: string' : 'D: string'))": 44,
    "((('A: BinaryExpression' + 'B: string') + 'C: MemberExpression') + 'D: string')": 43,
    "('A: MemberExpression' < 'B: Identifier')": 43,
    "('A: Identifier' !== 'B: MemberExpression')": 42,
    "(typeof('A: Identifier') !== \"undefined\")": 42,
    "('A: MemberExpression' * 'B: Identifier')": 42,
    "(1 == 'A: Identifier')": 42,
    "('A: CallExpression' || 'B: string')": 42,
    "('A: Identifier' + (('B: MemberExpression' || 'C: MemberExpression') || 'D: MemberExpression'))": 42,
    "(('A: Identifier' % 'B: number') < 'C: number')": 42,
    "((('A: LogicalExpression' && 'B: UnaryExpression') && !('C: MemberExpression')) && !('D: MemberExpression'))": 42,
    "('A: ThisExpression' - 'B: Identifier')": 42,
    "(('A: Identifier' < 'B: MemberExpression') && 'C: ArrayExpression')": 42,
    "(('A: Identifier' <= 1) && 'B: ArrayExpression')": 42,
    "(!('A: Identifier') && 'B: CallExpression')": 41,
    "+('A: CallExpression')": 41,
    "('A: MemberExpression' || 'B: CallExpression')": 41,
    "('A: string' == 'B: CallExpression')": 41,
    "(('A: number' * 'B: Identifier') + 'C: Identifier')": 40,
    "(('A: string' + ('B: BinaryExpression' ? 'C: string' : \"\")) + 'D: string')": 40,
    "('A: string' + ((1 !== 'B: CallExpression') ? 'C: string' : \"\"))": 40,
    "((1 !== 'A: CallExpression') ? 'B: string' : \"\")": 40,
    "(1 / 0)": 39,
    "('A: number' * ('B: number' * 'C: number'))": 39,
    "(typeof('A: MemberExpression') === \"function\")": 39,
    "('A: MemberExpression' ? 'B: string' : '')": 39,
    "('A: Identifier' || 'B: ArrayExpression')": 38,
    "('A: CallExpression' === -(1))": 38,
    "('A: Identifier' && ('B: string' === 'C: Identifier'))": 38,
    "('A: MemberExpression' ? 'B: string' : 'C: string')": 37,
    "(('A: MemberExpression' === 'B: string') || ('C: MemberExpression' === 'D: string'))": 36,
    "('A: MemberExpression' || '')": 36,
    "(typeof('A: Identifier') !== 'object')": 36,
    "(('A: Identifier' && ('B: string' === 'C: Identifier')) && 'D: CallExpression')": 36,
    "(-(1) !== 'A: AssignmentExpression')": 36,
    "('A: Identifier' - 'B: number')": 35,
    "('A: MemberExpression' || 'B: number')": 35,
    "('A: Identifier' - 'B: CallExpression')": 35,
    "((typeof('A: Identifier') === 'object') && ('B: Identifier' !== null))": 35,
    "(('A: Identifier' % 'B: number') !== 'C: number')": 35,
    "('A: string' + (('B: Identifier' || 'C: Identifier') ? 'D: string' : 'E: string'))": 35,
    "(('A: MemberExpression' && 'B: Identifier') ? 'C: MemberExpression' : 'D: MemberExpression')": 35,
    "!(('A: Identifier' instanceof 'B: Identifier'))": 34,
    "('A: Identifier' ? 'B: string' : ('C: Identifier' ? 'D: string' : 'E: string'))": 34,
    "(('A: number' <= 'B: Identifier') ? 'C: Identifier' : ('D: Identifier' + 'E: number'))": 34,
    "('A: MemberExpression' <= 'B: number')": 33,
    "('A: CallExpression' || 'B: ArrayExpression')": 33,
    "('A: CallExpression' !== 'B: string')": 33,
    "((('A: string' + 'B: MemberExpression') + 'C: string') + 'D: MemberExpression')": 33,
    "(typeof('A: MemberExpression') === 'string')": 33,
    "('A: Identifier' ? 0 : 1)": 33,
    "('A: MemberExpression' || 'B: ArrayExpression')": 32,
    "('A: Identifier' !== 0)": 32,
    "('' + 'A: CallExpression')": 32,
    "(('' + 'A: Identifier') + 'B: string')": 32,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: MemberExpression' === 'D: Identifier')) || ('E: MemberExpression' === 'F: Identifier'))": 32,
    "('A: UpdateExpression' < 'B: Identifier')": 31,
    "('A: MemberExpression' < 'B: number')": 31,
    "(typeof('A: Identifier') == \"number\")": 31,
    "((null == 'A: Identifier') ? 0 : 'B: MemberExpression')": 31,
    "(1 / 'A: Identifier')": 31,
    "('A: Identifier' - 'B: MemberExpression')": 31,
    "('A: Identifier' / 'B: Identifier')": 31,
    "('A: MemberExpression' !== null)": 31,
    "('A: UpdateExpression' > 0)": 31,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + 'D: string')": 31,
    "('A: MemberExpression' + 1)": 30,
    "('A: Identifier' + 'B: MemberExpression')": 30,
    "('A: MemberExpression' / 'B: number')": 30,
    "('A: Identifier' ? 'B: ArrayExpression' : 'C: ArrayExpression')": 30,
    "(('A: Identifier' * 'B: Identifier') - 'C: Identifier')": 30,
    "('' === 'A: Identifier')": 30,
    "('A: number' < 'B: Identifier')": 30,
    "((('A: Identifier' % 'B: number') >= 'C: number') && (('D: Identifier' % 'E: number') <= 'F: number'))": 30,
    "(('A: Identifier' >= 'B: number') ? 'C: number' : null)": 30,
    "(('A: MemberExpression' < 0) || ('B: MemberExpression' > 'C: number'))": 30,
    "('A: Identifier' ? (('B: Identifier' + 'C: Identifier') + 'D: string') : '')": 30,
    "('A: number' <= ('B: Identifier' % 'C: number'))": 30,
    "((('A: TemplateLiteral' + 'B: TemplateLiteral') + 'C: TemplateLiteral') + 'D: TemplateLiteral')": 30,
    "(typeof('A: Identifier') !== 'string')": 29,
    "('A: MemberExpression' === true)": 29,
    "((1 === 'A: Identifier') || ('B: number' === 'C: Identifier'))": 29,
    "('A: Identifier' && !('B: CallExpression'))": 29,
    "('A: CallExpression' > 'B: number')": 29,
    "(('A: Identifier' || 'B: Identifier') || 'C: Identifier')": 28,
    "(\"\" + 'A: Identifier')": 28,
    "+('A: NewExpression')": 28,
    "(!('A: Identifier') && 'B: Identifier')": 28,
    "('A: Identifier' + (('B: LogicalExpression' || 'C: BinaryExpression') ? 'D: string' : 'E: string'))": 28,
    "(('A: string' === 'B: Identifier') && 'C: Identifier')": 28,
    "('A: CallExpression' < 'B: CallExpression')": 28,
    "+(1)": 28,
    "(('A: MemberExpression' < 'B: Identifier') ? 'C: string' : 'D: string')": 28,
    "('A: MemberExpression' + 'B: Identifier')": 27,
    "+('A: MemberExpression')": 27,
    "(typeof('A: Identifier') == \"string\")": 27,
    "(('A: CallExpression' || 'B: CallExpression') || 'C: CallExpression')": 27,
    "(('A: Identifier' + 'B: string') + 'C: MemberExpression')": 27,
    "((('A: string' + 'B: CallExpression') + 'C: string') + 'D: CallExpression')": 27,
    "(typeof('A: Identifier') === \"number\")": 27,
    "('A: MemberExpression' ? 'B: Identifier' : 'C: Identifier')": 27,
    "('A: CallExpression' > -(1))": 26,
    "('A: MemberExpression' !== 'B: number')": 26,
    "('A: CallExpression' - 'B: MemberExpression')": 26,
    "(((0 === 'A: CallExpression') || ('B: number' === 'C: CallExpression')) ? 'D: string' : 'E: string')": 26,
    "((0 === 'A: CallExpression') || ('B: number' === 'C: CallExpression'))": 26,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: Identifier' === 'D: Identifier')) || ('E: Identifier' === 'F: Identifier'))": 26,
    "(('A: Identifier' && 'B: MemberExpression') ? 'C: Identifier' : 'D: ObjectExpression')": 26,
    "('A: CallExpression' && 'B: AssignmentExpression')": 25,
    "('A: MemberExpression' || 'B: FunctionExpression')": 25,
    "('A: Identifier' ? 'B: string' : '')": 25,
    "(('A: CallExpression' + 'B: string') + 'C: CallExpression')": 25,
    "('A: Identifier' && !('B: MemberExpression'))": 25,
    "((('A: BinaryExpression' + 'B: CallExpression') + 'C: string') + 'D: CallExpression')": 25,
    "('A: MemberExpression' + 'B: CallExpression')": 25,
    "((1 === ('A: Identifier' % 'B: number')) && (('C: Identifier' % 'D: number') !== 'E: number'))": 25,
    "((('A: Identifier' % 'B: number') < 'C: number') || (('D: Identifier' % 'E: number') >= 'F: number'))": 25,
    "('A: number' === ('B: Identifier' % 'C: number'))": 25,
    "('A: TemplateLiteral' + 'B: string')": 25,
    "(('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: string'))": 24,
    "('A: Identifier' ? 'B: Identifier' : 'C: CallExpression')": 24,
    "('A: CallExpression' < 'B: number')": 24,
    "(typeof('A: Identifier') === 'undefined')": 24,
    "('A: Identifier' || 'B: MemberExpression')": 24,
    "(1 === 'A: CallExpression')": 24,
    "(('A: Identifier' >= 'B: Identifier') && ('C: Identifier' <= 'D: Identifier'))": 24,
    "(('' + 'A: CallExpression') + 'B: CallExpression')": 24,
    "!(('A: CallExpression' && 'B: CallExpression'))": 24,
    "(('A: Identifier' || 'B: Identifier') ? ('C: Identifier' + ('D: CallExpression' ? 'E: string' : 'F: string')) : ('G: Identifier' + 'H: string'))": 24,
    "(('A: string' + 'B: string') + (('C: string' + 'D: ConditionalExpression') + 'E: string'))": 24,
    "(('A: string' + ('B: BinaryExpression' ? 'null' : 'C: UnaryExpression')) + 'D: string')": 24,
    "('A: string' + ((null === 'B: Identifier') ? 'null' : typeof('C: Identifier')))": 24,
    "((null === 'A: Identifier') ? 'null' : typeof('B: Identifier'))": 24,
    "(typeof('A: MemberExpression') === 'number')": 23,
    "(0 <= 'A: Identifier')": 23,
    "(('A: MemberExpression' + 'B: string') + 'C: Identifier')": 23,
    "('A: CallExpression' + 'B: CallExpression')": 23,
    "('A: MemberExpression' & 'B: number')": 23,
    "('' + 'A: MemberExpression')": 23,
    "-('A: CallExpression')": 23,
    "(('A: Identifier' - 'B: Identifier') - 'C: Identifier')": 23,
    "(('A: Identifier' >= 0) && ('B: Identifier' < 'C: Identifier'))": 23,
    "(typeof('A: Identifier') == 'number')": 22,
    "(('A: string' + 'B: string') + 'C: Identifier')": 22,
    "('A: Identifier' !== true)": 22,
    "('A: CallExpression' > 'B: CallExpression')": 22,
    "((('A: Identifier' + 'B: Identifier') + 'C: Identifier') + 'D: Identifier')": 22,
    "('A: MemberExpression' < 1)": 22,
    "((1 == 'A: Identifier') ? 'B: string' : (('C: number' == 'D: Identifier') ? 'E: string' : ('F: BinaryExpression' ? 'G: string' : 'H: string')))": 22,
    "(('A: number' == 'B: Identifier') ? 'C: string' : (('D: number' == 'E: Identifier') ? 'F: string' : 'G: string'))": 22,
    "(('A: number' == 'B: Identifier') ? 'C: string' : 'D: string')": 22,
    "(typeof('A: Identifier') !== 'number')": 21,
    "(typeof('A: MemberExpression') == \"function\")": 21,
    "('A: MemberExpression' && 'B: AssignmentExpression')": 21,
    "('A: MemberExpression' >= 'B: number')": 21,
    "(void(0) !== 'A: Identifier')": 21,
    "('A: Identifier' % 'B: Identifier')": 21,
    "('A: Identifier' >= ('B: Identifier' - 'C: Identifier'))": 21,
    "!(('A: Identifier' in 'B: Identifier'))": 21,
    "((0 === 'A: Identifier') ? 0 : ((1 === 'B: Identifier') ? 1 : ('C: BinaryExpression' ? 'D: number' : 'E: ConditionalExpression')))": 21,
    "((1 === 'A: Identifier') ? 1 : (('B: number' === 'C: Identifier') ? 'D: number' : ('E: LogicalExpression' ? 'F: number' : 'G: ConditionalExpression')))": 21,
    "(('A: number' === 'B: Identifier') ? 'C: number' : (('D: BinaryExpression' && 'E: BinaryExpression') ? 'F: number' : ('G: BinaryExpression' ? 'H: number' : 'I: number')))": 21,
    "(('A: Identifier' % 'B: number') - 'C: Identifier')": 21,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: BinaryExpression' || 'D: BinaryExpression')) ? 'E: MemberExpression' : 'F: MemberExpression')": 21,
    "~(~(('A: Identifier' / 'B: number')))": 21,
    "~(('A: Identifier' / 'B: number'))": 21,
    "('A: Identifier' > 'B: CallExpression')": 21,
    "(+('A: Identifier') + ('B: number' * 'C: Identifier'))": 21,
    "('A: number' * ('B: CallExpression' - 'C: CallExpression'))": 21,
    "('A: CallExpression' + ('B: Identifier' * 'C: Identifier'))": 21,
    "(('A: ThisExpression' - 'B: Identifier') / 'C: number')": 21,
    "(('A: number' * 'B: Identifier') + ('C: Identifier' / 'D: number'))": 21,
    "(typeof('A: Identifier') == 'function')": 20,
    "(!(1) === 'A: Identifier')": 20,
    "(!(0) === 'A: Identifier')": 20,
    "('A: Identifier' + '')": 20,
    "(typeof('A: Identifier') === \"string\")": 20,
    "('A: string' + 'B: number')": 20,
    "((('A: LogicalExpression' || 'B: CallExpression') || 'C: CallExpression') || 'D: CallExpression')": 20,
    "('A: ThisExpression' instanceof 'B: Identifier')": 20,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + 'D: MemberExpression')": 20,
    "('A: MemberExpression' === null)": 20,
    "('A: MemberExpression' ? 'B: string' : \"\")": 20,
    "('A: Identifier' < 'B: CallExpression')": 20,
    "('A: Identifier' ? 'B: Identifier' : 'C: MemberExpression')": 20,
    "(('A: MemberExpression' === 'B: Identifier') || ('C: MemberExpression' === 'D: Identifier'))": 20,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: Identifier' >= 'D: number')) ? 'E: string' : 'F: string')": 20,
    "(((1 === 'A: Identifier') || ('B: number' === 'C: Identifier')) || ('D: Identifier' >= 'E: number'))": 20,
    "('A: string' + ('B: MemberExpression' ? 'C: string' : ''))": 20,
    "(('A: Identifier' < 'B: number') && ('C: Identifier' >= 0))": 20,
    "(('A: Identifier' != null) ? 'B: ThisExpression' : 'C: Identifier')": 20,
    "('A: string' + ((1 !== 'B: CallExpression') ? 'C: string' : 'D: string'))": 20,
    "((1 !== 'A: CallExpression') ? 'B: string' : 'C: string')": 20,
    "('A: Identifier' + (('B: UnaryExpression' == 1) ? 'C: string' : ('D: BinaryExpression' ? 'E: string' : 'F: ConditionalExpression')))": 20,
    "((~('A: UnaryExpression') == 1) ? 'B: string' : ((1 == 'C: Identifier') ? 'D: string' : ('E: BinaryExpression' ? 'F: string' : 'G: ConditionalExpression')))": 20,
    "(~(~('A: BinaryExpression')) == 1)": 20,
    "(('A: Identifier' >= ('B: Identifier' - 'C: Identifier')) && ('D: Identifier' <= ('E: Identifier' + 'F: Identifier')))": 20,
    "('A: Identifier' <= ('B: Identifier' + 'C: Identifier'))": 20,
    "('A: Identifier' + (('B: Identifier' - 'C: Identifier') / 'D: number'))": 20,
    "('A: Identifier' == 'B: Identifier')": 19,
    "('A: MemberExpression' & 'B: Identifier')": 19,
    "(('A: CallExpression' + 'B: string') + 'C: Identifier')": 19,
    "(('A: Identifier' != null) && 'B: MemberExpression')": 19,
    "((('A: LogicalExpression' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || (('E: Identifier' < 'F: MemberExpression') && 'G: ArrayExpression'))": 19,
    "(void(0) !== 'A: MemberExpression')": 19,
    "('A: Identifier' ? 'B: CallExpression' : 'C: ArrayExpression')": 18,
    "(0 < 'A: Identifier')": 18,
    "(('A: Identifier' + 'B: Identifier') % 'C: number')": 18,
    "('A: Identifier' && !('B: Identifier'))": 18,
    "('A: MemberExpression' && !('B: MemberExpression'))": 18,
    "('A: MemberExpression' > 'B: CallExpression')": 18,
    "('A: MemberExpression' == 1)": 18,
    "(-(1) / 0)": 18,
    "(1 + 1)": 18,
    "('A: number' + 1)": 18,
    "(typeof('A: Identifier') === 'boolean')": 18,
    "(('A: string' === 'B: Identifier') ? (('C: Identifier' < 'D: number') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: string' === 'I: Identifier') ? 'J: Identifier' : ('K: BinaryExpression' ? 'L: ConditionalExpression' : 'M: ConditionalExpression')))": 18,
    "(('A: string' === 'B: Identifier') ? 'C: Identifier' : (('D: string' === 'E: Identifier') ? ('F: BinaryExpression' ? 'G: Identifier' : 'H: BinaryExpression') : ('I: BinaryExpression' ? 'J: BinaryExpression' : 'K: UnaryExpression')))": 18,
    "(('A: string' === 'B: Identifier') ? ('C: Identifier' + 'D: number') : void(0))": 18,
    "(('A: Identifier' !== 'B: string') && ('C: Identifier' !== 'D: string'))": 18,
    "((void(0) === 'A: Identifier') && 'B: AssignmentExpression')": 18,
    "(typeof('A: Identifier') == 'object')": 17,
    "('A: Identifier' !== 'B: number')": 17,
    "('A: MemberExpression' > 'B: MemberExpression')": 17,
    "((('A: string' + 'B: string') + 'C: Identifier') + 'D: string')": 17,
    "('A: MemberExpression' instanceof 'B: Identifier')": 17,
    "((typeof('A: Identifier') !== 'undefined') && 'B: MemberExpression')": 17,
    "(!('A: Identifier') || ('B: string' === 'C: Identifier'))": 17,
    "('A: MemberExpression' ? 'B: MemberExpression' : 'C: MemberExpression')": 17,
    "('A: CallExpression' && 'B: MemberExpression')": 17,
    "('A: Identifier' !== 'B: CallExpression')": 17,
    "((('A: MemberExpression' + 'B: string') + 'C: MemberExpression') + 'D: string')": 17,
    "('A: CallExpression' || 'B: number')": 17,
    "('A: CallExpression' ? 'B: number' : 'C: number')": 17,
    "void('A: CallExpression')": 16,
    "(('A: Identifier' != null) && 'B: CallExpression')": 16,
    "('A: Identifier' || 0)": 16,
    "('A: Identifier' >= 'B: MemberExpression')": 16,
    "(typeof('A: MemberExpression') === \"string\")": 16,
    "('A: CallExpression' + 'B: number')": 16,
    "!(!('A: CallExpression'))": 16,
    "((('A: string' + 'B: Identifier') + 'C: string') + 'D: MemberExpression')": 16,
    "('A: Identifier' >= 1)": 16,
    "(!('A: Identifier') || 'B: CallExpression')": 16,
    "(('A: CallExpression' && 'B: CallExpression') || 'C: CallExpression')": 16,
    "(-(1) !== 'A: CallExpression')": 16,
    "('A: Identifier' && ('B: string' !== 'C: Identifier'))": 16,
    "((true === 'A: Identifier') || (false === 'B: Identifier'))": 16,
    "('A: Identifier' < ('B: Identifier' - 1))": 16,
    "((('A: Identifier' * 'B: Identifier') - 'C: Identifier') + 'D: Identifier')": 16,
    "(typeof('A: Identifier') === \"undefined\")": 16,
    "('A: MemberExpression' >>> 0)": 16,
    "(('A: Identifier' instanceof 'B: Identifier') || ('C: string' === 'D: CallExpression'))": 16,
    "((('A: Identifier' + 'B: string') + 'C: MemberExpression') + 'D: string')": 16,
    "(0 == ('A: Identifier' % 'B: number'))": 16,
    "('A: Identifier' ? 'B: number' : 'C: number')": 16,
    "(('A: Identifier' || 'B: Identifier') ? 'C: MemberExpression' : 'D: MemberExpression')": 16,
    "(1 == ('A: Identifier' % 'B: number'))": 16,
    "(('A: string' === 'B: Identifier') ? (('C: number' <= 'D: Identifier') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: BinaryExpression' || 'I: BinaryExpression') ? ('J: Identifier' + 'K: number') : void(0)))": 16,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) ? ('E: Identifier' + 'F: number') : void(0))": 16,
    "((('A: BinaryExpression' + 'B: TemplateLiteral') + 'C: TemplateLiteral') + 'D: TemplateLiteral')": 16,
    "(('A: Identifier' || 'B: Identifier') || 'C: string')": 16,
    "(typeof('A: Identifier') != 'object')": 16,
    "('A: Identifier' && ('B: MemberExpression' === 0))": 15,
    "('A: MemberExpression' < 'B: MemberExpression')": 15,
    "(('A: Identifier' && 'B: MemberExpression') || 'C: MemberExpression')": 15,
    "('A: Identifier' && ('B: MemberExpression' === 'C: string'))": 15,
    "('A: MemberExpression' !== false)": 15,
    "(!('A: Identifier') || 'B: MemberExpression')": 15,
    "((('A: CallExpression' || 'B: CallExpression') || 'C: CallExpression') || 'D: CallExpression')": 15,
    "((typeof('A: Identifier') === 'function') ? 'B: Identifier' : 'C: Identifier')": 15,
    "~('A: Identifier')": 15,
    "('A: number' | 0)": 15,
    "('A: MemberExpression' == 'B: string')": 15,
    "!(('A: string' in 'B: Identifier'))": 15,
    "('A: ThisExpression' !== 'B: Identifier')": 15,
    "('A: CallExpression' + 'B: MemberExpression')": 15,
    "(typeof('A: MemberExpression') !== 'function')": 15,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: MemberExpression')": 15,
    "((('A: BinaryExpression' >= 'B: number') && ('C: BinaryExpression' <= 'D: number')) ? 'E: number' : (('F: BinaryExpression' >= 'G: number') ? 'H: number' : 'I: number'))": 15,
    "((('A: Identifier' % 'B: number') >= 'C: number') ? 'D: number' : 'E: number')": 15,
    "(((1 === 'A: BinaryExpression') && ('B: BinaryExpression' !== 'C: number')) ? 'D: MemberExpression' : (('E: LogicalExpression' && 'F: LogicalExpression') ? 'G: MemberExpression' : 'H: MemberExpression'))": 15,
    "((('A: BinaryExpression' >= 'B: number') && ('C: BinaryExpression' <= 'D: number')) && (('E: BinaryExpression' < 'F: number') || ('G: BinaryExpression' >= 'H: number')))": 15,
    "(('A: Identifier' > 'B: number') && ('C: Identifier' < 'D: number'))": 15,
    "(('A: string' === 'B: Identifier') && ('C: Identifier' >= 'D: number'))": 15,
    "(('A: string' + ('B: MemberExpression' ? 'C: string' : '')) + 'D: Identifier')": 15,
    "(('A: CallExpression' % 'B: number') || 'C: number')": 15,
    "(('A: number' * 'B: number') + 'C: number')": 15,
    "(('A: Identifier' - 'B: CallExpression') - 1)": 15,
    "('A: MemberExpression' <= 'B: MemberExpression')": 15,
    "(('A: CallExpression' !== 'B: CallExpression') ? 'C: string' : '')": 15,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: Identifier' ? 'D: BinaryExpression' : '')) + ('E: Identifier' ? ('F: BinaryExpression' + 'G: string') : ''))": 15,
    "(('A: TemplateLiteral' + 'B: string') + 'C: string')": 15,
    "(('A: Identifier' + 'B: Identifier') - 'C: Identifier')": 15,
    "('A: CallExpression' || 'B: SequenceExpression')": 14,
    "(!('A: Identifier') && !('B: Identifier'))": 14,
    "('A: CallExpression' < 'B: Identifier')": 14,
    "(('A: MemberExpression' + 'B: string') + 'C: CallExpression')": 14,
    "('A: CallExpression' - 'B: number')": 14,
    "(('A: MemberExpression' === 'B: MemberExpression') && ('C: MemberExpression' === 'D: MemberExpression'))": 14,
    "(\"object\" != typeof('A: Identifier'))": 14,
    "('A: MemberExpression' || 'B: SequenceExpression')": 14,
    "(('A: Identifier' - 'B: Identifier') / 'C: Identifier')": 14,
    "('A: number' * ('B: number' * ('C: number' * 'D: number')))": 14,
    "('A: CallExpression' * 'B: CallExpression')": 14,
    "('A: Identifier' != 'B: Identifier')": 14,
    "('A: number' / 'B: number')": 14,
    "((('A: BinaryExpression' && 'B: BinaryExpression') || ('C: BinaryExpression' && 'D: BinaryExpression')) || ('E: string' === 'F: Identifier'))": 14,
    "(('A: string' === 'B: Identifier') && ('C: Identifier' < 'D: number'))": 14,
    "((1 === 'A: Identifier') ? 'B: string' : (('C: number' === 'D: Identifier') ? 'E: string' : ('F: BinaryExpression' ? 'G: string' : 'H: ConditionalExpression')))": 14,
    "(('A: number' === 'B: Identifier') ? 'C: string' : (('D: number' === 'E: Identifier') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: string')))": 14,
    "('A: CallExpression' ? 'B: string' : ('C: CallExpression' ? 'D: string' : 'E: string'))": 14,
    "('A: Identifier' + ('B: CallExpression' ? 'C: MemberExpression' : 'D: MemberExpression'))": 14,
    "((('A: string' === 'B: Identifier') && 'C: Identifier') && ('D: string' === 'E: Identifier'))": 14,
    "(('A: number' + 'B: Identifier') - 'C: Identifier')": 14,
    "('A: number' * ('B: Identifier' - 1))": 14,
    "('A: number' * ('B: Identifier' - 'C: Identifier'))": 14,
    "('A: CallExpression' != null)": 14,
    "('A: MemberExpression' && (-(1) === 'B: Identifier'))": 14,
    "(typeof('A: MemberExpression') !== 'undefined')": 14,
    "((+('A: Identifier') + ('B: number' * 'C: Identifier')) + ('D: number' * 'E: Identifier'))": 14,
    "(('A: MemberExpression' === 'B: string') ? -(1) : 1)": 14,
    "-('A: MemberExpression')": 14,
    "(('A: MemberExpression' === 'B: string') ? 'C: CallExpression' : !('D: CallExpression'))": 14,
    "((('A: ThisExpression' - 'B: Identifier') - 'C: Identifier') / 'D: number')": 14,
    "(('A: ThisExpression' - 'B: Identifier') - 'C: Identifier')": 14,
    "('A: CallExpression' && (('B: CallExpression' && 'C: CallExpression') || 'D: CallExpression'))": 14,
    "('A: CallExpression' - ('B: CallExpression' % 'C: number'))": 14,
    "('A: CallExpression' - ('B: CallExpression' - 1))": 14,
    "~(~(('A: CallExpression' / 'B: number')))": 14,
    "~(('A: CallExpression' / 'B: number'))": 14,
    "(('A: number' * 'B: Identifier') / 'C: number')": 14,
    "(('A: Identifier' % 'B: number') != 'C: number')": 14,
    "(('A: string' === 'B: Identifier') ? (('C: number' <= 'D: Identifier') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: string' === 'I: Identifier') ? ('J: Identifier' + 'K: number') : void(0)))": 14,
    "(null != 'A: AssignmentExpression')": 14,
    "((('A: Identifier' + 'B: string') + ('C: Identifier' + 1)) + 'D: string')": 14,
    "+('A: number')": 14,
    "(('A: Identifier' - 'B: Identifier') - 1)": 14,
    "(('A: Identifier' > 0) ? 0 : ('B: Identifier' - 1))": 14,
    "((null == 'A: Identifier') ? void(0) : 'B: MemberExpression')": 14,
    "((null == 'A: Identifier') || ('B: MemberExpression' < 1))": 14,
    "(((null == 'A: Identifier') || 'B: Identifier') ? void(0) : 'C: ArrayExpression')": 14,
    "(((null == 'A: Identifier') || 'B: Identifier') ? 1 : 'C: Identifier')": 14,
    "('A: Identifier' || 'B: SequenceExpression')": 13,
    "(\"number\" != typeof('A: Identifier'))": 13,
    "(!(1) === 'A: MemberExpression')": 13,
    "('A: MemberExpression' && 'B: SequenceExpression')": 13,
    "('A: MemberExpression' || 'B: AssignmentExpression')": 13,
    "(1 + 'A: number')": 13,
    "('A: MemberExpression' || null)": 13,
    "('A: CallExpression' > 0)": 13,
    "('A: MemberExpression' >= 'B: Identifier')": 13,
    "('A: Identifier' ? 'B: MemberExpression' : 0)": 13,
    "('A: NewExpression' - 'B: Identifier')": 13,
    "(('A: MemberExpression' === 'B: Identifier') ? 'C: MemberExpression' : 'D: MemberExpression')": 13,
    "('A: CallExpression' || 'B: Identifier')": 13,
    "((('A: Identifier' % 'B: Identifier') + 'C: Identifier') % 'D: Identifier')": 13,
    "(('A: Identifier' % 'B: Identifier') + 'C: Identifier')": 13,
    "((('A: string' + 'B: string') + 'C: TemplateLiteral') + 'D: TemplateLiteral')": 13,
    "(('A: string' + 'B: string') + 'C: TemplateLiteral')": 13,
    "('A: Identifier' || !('B: Identifier'))": 12,
    "('A: Identifier' % 1)": 12,
    "('A: Identifier' ? 'B: CallExpression' : '')": 12,
    "('A: Identifier' && 'B: SequenceExpression')": 12,
    "(('A: Identifier' >= 'B: Identifier') && 'C: AssignmentExpression')": 12,
    "((('A: BinaryExpression' + 'B: string') + 'C: string') + 'D: Identifier')": 12,
    "(!('A: Identifier') || !('B: Identifier'))": 12,
    "('A: Identifier' > 'B: MemberExpression')": 12,
    "('A: MemberExpression' ? 'B: CallExpression' : '')": 12,
    "(!(0) !== 'A: Identifier')": 12,
    "('A: MemberExpression' ? 'B: MemberExpression' : 'C: Identifier')": 12,
    "(('A: MemberExpression' || 'B: MemberExpression') || 'C: string')": 12,
    "(typeof('A: Identifier') === \"object\")": 12,
    "((typeof('A: Identifier') === \"function\") && 'B: MemberExpression')": 12,
    "('A: string' in 'B: MemberExpression')": 12,
    "('A: MemberExpression' | 'B: Identifier')": 12,
    "(('A: Identifier' !== 'B: Identifier') && ('C: Identifier' !== 'D: Identifier'))": 12,
    "('A: Identifier' + \"\")": 12,
    "('A: Identifier' !== void(0))": 12,
    "((('A: Identifier' + 'B: string') + 'C: CallExpression') + 'D: string')": 12,
    "(!('A: CallExpression') || !('B: CallExpression'))": 12,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + 'D: Identifier')": 12,
    "('A: number' + 'B: MemberExpression')": 12,
    "(('A: Identifier' + 'B: Identifier') + 'C: number')": 12,
    "(('A: Identifier' !== 'B: Identifier') && ('C: MemberExpression' === 'D: Identifier'))": 12,
    "(('A: string' !== 'B: Identifier') && ('C: string' !== 'D: Identifier'))": 12,
    "(('A: MemberExpression' === 'B: string') ? 'C: string' : 'D: string')": 12,
    "(('A: MemberExpression' === 'B: Identifier') && ('C: MemberExpression' === 'D: Identifier'))": 12,
    "('A: Identifier' ? 'B: MemberExpression' : ('C: Identifier' ? 'D: MemberExpression' : 'E: MemberExpression'))": 12,
    "((('' + 'A: CallExpression') + 'B: CallExpression') + 'C: CallExpression')": 12,
    "((('A: LogicalExpression' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || (('E: Identifier' <= 1) && 'F: ArrayExpression'))": 12,
    "(('A: Identifier' || ('B: BinaryExpression' && 'C: ArrayExpression')) || (('D: Identifier' < 'E: MemberExpression') && 'F: ArrayExpression'))": 12,
    "('A: Identifier' || (('B: Identifier' <= 1) && 'C: ArrayExpression'))": 12,
    "(('A: number' <= ('B: Identifier' % 'C: number')) && (('D: Identifier' % 'E: number') <= 'F: number'))": 12,
    "(('A: number' <= 'B: Identifier') ? 'C: number' : null)": 12,
    "((1 === 'A: Identifier') ? 'B: string' : (('C: LogicalExpression' || 'D: BinaryExpression') ? 'E: string' : 'F: string'))": 12,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: number' === 'D: Identifier')) ? 'E: string' : 'F: string')": 12,
    "('A: string' + ((1 < 'B: CallExpression') ? 'C: string' : ('D: BinaryExpression' ? 'E: string' : 'F: string')))": 12,
    "((1 < 'A: CallExpression') ? 'B: string' : ((0 === 'C: CallExpression') ? 'D: string' : 'E: string'))": 12,
    "(1 < 'A: CallExpression')": 12,
    "(('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression'))": 12,
    "('A: number' < 'B: MemberExpression')": 12,
    "(('A: Identifier' < 'B: Identifier') ? 'C: Identifier' : 'D: Identifier')": 12,
    "('A: Identifier' ? (('B: Identifier' + 'C: Identifier') + 'D: string') : \"\")": 12,
    "(('A: string' === 'B: Identifier') && 'C: AssignmentExpression')": 12,
    "((('A: BinaryExpression' + 'B: BinaryExpression') + 'C: string') + 'D: CallExpression')": 12,
    "((void(0) !== 'A: Identifier') && 'B: AssignmentExpression')": 12,
    "(('A: Identifier' && ('B: string' !== 'C: Identifier')) ? 1 : 'D: CallExpression')": 12,
    "(('A: string' + ('B: BinaryExpression' ? \"null\" : 'C: UnaryExpression')) + 'D: string')": 12,
    "('A: string' + ((null === 'B: Identifier') ? \"null\" : typeof('C: Identifier')))": 12,
    "((null === 'A: Identifier') ? \"null\" : typeof('B: Identifier'))": 12,
    "(('A: Identifier' < ('B: Identifier' - 1)) && ('C: Identifier' < 'D: Identifier'))": 12,
    "('A: Identifier' > ('B: Identifier' + 'C: CallExpression'))": 12,
    "((('A: Identifier' + 'B: Identifier') - 'C: Identifier') / 'D: Identifier')": 12,
    "(('A: Identifier' + 'B: Identifier') - 1)": 12,
    "((!('A: Identifier') || ('B: string' === 'C: Identifier')) ? 'D: CallExpression' : 1)": 12,
    "('A: CallExpression' ? 'B: ArrayExpression' : 'C: ObjectExpression')": 11,
    "(\"function\" != typeof('A: Identifier'))": 11,
    "((null != 'A: Identifier') && 'B: CallExpression')": 11,
    "(('A: Identifier' && 'B: MemberExpression') && 'C: MemberExpression')": 11,
    "(typeof('A: Identifier') == 'string')": 11,
    "('A: Identifier' || 1)": 11,
    "('A: AssignmentExpression' && 'B: CallExpression')": 11,
    "('A: CallExpression' || 0)": 11,
    "((('A: MemberExpression' === 'B: string') || ('C: MemberExpression' === 'D: string')) || ('E: MemberExpression' === 'F: string'))": 11,
    "(('A: Identifier' + 'B: CallExpression') + 'C: Identifier')": 11,
    "((1 + 'A: number') + 'B: number')": 11,
    "('A: string' === 'B: AssignmentExpression')": 11,
    "('A: Identifier' && 'B: NewExpression')": 11,
    "('A: Identifier' ? ('B: string' + 'C: Identifier') : '')": 11,
    "(('A: Identifier' === 'B: Identifier') || 'C: CallExpression')": 11,
    "('A: Identifier' ? 'B: ObjectExpression' : 'C: ObjectExpression')": 11,
    "(0 !== 'A: MemberExpression')": 11,
    "('A: MemberExpression' ? 'B: CallExpression' : 'C: Identifier')": 11,
    "('A: CallExpression' <= 'B: Identifier')": 11,
    "+('A: ThisExpression')": 11,
    "(-(1) * 'A: Identifier')": 11,
    "('A: MemberExpression' && !('B: CallExpression'))": 11,
    "('A: MemberExpression' >= 'B: MemberExpression')": 11,
    "((null != 'A: MemberExpression') && 'B: CallExpression')": 11,
    "('A: Identifier' ? '' : 'B: string')": 11,
    "('A: Identifier' ? 'B: string' : 'C: Identifier')": 11,
    "(-('A: Identifier') === 'B: Identifier')": 11,
    "((('A: UnaryExpression' !== 'undefined') && ('B: Identifier' instanceof 'C: Identifier')) || ('D: string' === 'E: CallExpression'))": 11,
    "((typeof('A: Identifier') !== 'undefined') && ('B: Identifier' instanceof 'C: Identifier'))": 11,
    "(('A: number' === 'B: CallExpression') ? 'C: string' : '')": 11,
    "((('A: BinaryExpression' + 'B: CallExpression') + 'C: string') + 'D: MemberExpression')": 11,
    "((('A: LogicalExpression' + 'B: string') + 'C: Identifier') + 'D: string')": 11,
    "((('A: Identifier' || 'B: string') + 'C: string') + 'D: Identifier')": 11,
    "(('A: Identifier' || 'B: string') + 'C: string')": 11,
    "((null === 'A: Identifier') || (typeof('B: Identifier') !== 'object'))": 11,
    "((typeof('A: Identifier') === 'function') ? (('B: MemberExpression' || 'C: MemberExpression') || 'D: string') : 'E: Identifier')": 11,
    "(!('A: MemberExpression') || 'B: MemberExpression')": 11,
    "((null === 'A: Identifier') || ('B: Identifier' === 'C: Identifier'))": 11,
    "(('A: Identifier' === 'B: Identifier') || (('C: BinaryExpression' && 'D: BinaryExpression') && ('E: MemberExpression' === 0)))": 11,
    "((('A: UnaryExpression' === 'object') && ('B: Identifier' !== null)) && ('C: MemberExpression' === 0))": 11,
    "(('A: string' === 'B: Identifier') ? 'C: string' : 'D: string')": 11,
    "('A: Identifier' ? 'B: Identifier' : void(0))": 11,
    "(\"function\" === 'A: Identifier')": 11,
    "('A: MemberExpression' >= 0)": 10,
    "('A: Identifier' << 1)": 10,
    "(+('A: MemberExpression') || 'B: Identifier')": 10,
    "void('A: AssignmentExpression')": 10,
    "(0 <= 'A: CallExpression')": 10,
    "(-(1) !== 'A: Identifier')": 10,
    "('A: CallExpression' ? 'B: Identifier' : 'C: FunctionExpression')": 10,
    "('A: MemberExpression' ? 'B: AssignmentExpression' : 'C: AssignmentExpression')": 10,
    "(('A: string' + 'B: Identifier') + 'C: Identifier')": 10,
    "(null !== 'A: MemberExpression')": 10,
    "(('A: Identifier' && 'B: Identifier') && 'C: Identifier')": 10,
    "!(('A: ThisExpression' instanceof 'B: Identifier'))": 10,
    "('A: MemberExpression' > 'B: Identifier')": 10,
    "(typeof('A: MemberExpression') === \"number\")": 10,
    "(('A: Identifier' !== 'B: Identifier') ? 'C: CallExpression' : 'D: Identifier')": 10,
    "('A: Identifier' && ('B: string' == 'C: CallExpression'))": 10,
    "('A: Identifier' && ('B: string' == 'C: Identifier'))": 10,
    "(!('A: CallExpression') || 'B: CallExpression')": 10,
    "((('A: BinaryExpression' + 'B: number') + 'C: number') + 'D: number')": 10,
    "(('A: MemberExpression' || 'B: MemberExpression') || '')": 10,
    "('A: CallExpression' && ('B: string' == 'C: CallExpression'))": 10,
    "('A: Identifier' ? 'B: CallExpression' : 0)": 10,
    "('A: CallExpression' * (('B: Identifier' - 'C: Identifier') + 1))": 10,
    "(('A: Identifier' - 'B: Identifier') + 1)": 10,
    "((('A: string' === 'B: Identifier') && ('C: Identifier' >= 'D: number')) || (('E: string' === 'F: Identifier') && ('G: Identifier' < 'H: number')))": 10,
    "(('A: Identifier' > 1) && ('B: Identifier' < 'C: number'))": 10,
    "((1 === 'A: Identifier') ? 'B: string' : (('C: number' === 'D: BinaryExpression') ? 'E: string' : 'F: string'))": 10,
    "(('A: number' === ('B: Identifier' % 'C: number')) ? 'D: string' : 'E: string')": 10,
    "(('A: Identifier' > 'B: number') ? 'C: Identifier' : ('D: Identifier' + 'E: number'))": 10,
    "((true === 'A: Identifier') ? 'B: string' : 'C: string')": 10,
    "(((1 === 'A: BinaryExpression') && ('B: BinaryExpression' !== 'C: number')) ? 'D: MemberExpression' : 'E: MemberExpression')": 10,
    "((('A: BinaryExpression' >= 1) && ('B: BinaryExpression' <= 'C: number')) && (('D: BinaryExpression' < 'E: number') || ('F: BinaryExpression' >= 'G: number')))": 10,
    "((('A: Identifier' % 'B: number') >= 1) && (('C: Identifier' % 'D: number') <= 'E: number'))": 10,
    "(('A: Identifier' % 'B: number') >= 1)": 10,
    "((1 === ('A: Identifier' % 'B: number')) ? 'C: MemberExpression' : 'D: MemberExpression')": 10,
    "(('A: CallExpression' !== -(1)) ? ('B: CallExpression' + 'C: string') : (('D: CallExpression' !== 'E: UnaryExpression') ? ('F: CallExpression' + 'G: string') : ('H: BinaryExpression' ? 'I: BinaryExpression' : 'J: BinaryExpression')))": 10,
    "(('A: CallExpression' !== -(1)) ? ('B: CallExpression' + 'C: string') : (('D: CallExpression' !== 'E: UnaryExpression') ? ('F: CallExpression' + 'G: string') : ('H: Identifier' + 'I: string')))": 10,
    "(('A: CallExpression' !== -(1)) ? ('B: CallExpression' + 'C: string') : ('D: Identifier' + 'E: string'))": 10,
    "((('A: Identifier' !== '') ? 'B: string' : '') + 'C: MemberExpression')": 10,
    "(('A: Identifier' !== '') ? 'B: string' : '')": 10,
    "(('A: MemberExpression' == null) || !('B: CallExpression'))": 10,
    "(('A: CallExpression' && !('B: CallExpression')) && 'C: CallExpression')": 10,
    "((true === 'A: Identifier') ? 'B: CallExpression' : ('C: Identifier' ? 'D: MemberExpression' : 'E: MemberExpression'))": 10,
    "(('A: CallExpression' && 'B: CallExpression') && 'C: CallExpression')": 10,
    "(('A: Identifier' - 'B: Identifier') / ('C: Identifier' - 'D: Identifier'))": 10,
    "((('A: Identifier' === 'B: Identifier') || ('C: string' === 'D: Identifier')) || !('E: CallExpression'))": 10,
    "(('A: Identifier' === 'B: Identifier') || ('C: string' === 'D: Identifier'))": 10,
    "('A: Identifier' + ('B: MemberExpression' ? 0 : ('C: Identifier' * 'D: CallExpression')))": 10,
    "('A: MemberExpression' ? 0 : ('B: Identifier' * 'C: CallExpression'))": 10,
    "(('A: MemberExpression' <= 'B: MemberExpression') ? +(1) : -(1))": 10,
    "((1 == ('A: Identifier' % 'B: number')) && (('C: Identifier' % 'D: number') != 'E: number'))": 10,
    "((('A: Identifier' % 'B: number') < 'C: number') || ('D: number' <= ('E: Identifier' % 'F: number')))": 10,
    "('A: number' == ('B: Identifier' % 'C: number'))": 10,
    "(('A: number' < 'B: Identifier') ? ('C: Identifier' ? 'D: string' : 'E: string') : ('F: Identifier' ? 'G: string' : 'H: string'))": 10,
    "(void(0) === 'A: MemberExpression')": 10,
    "(\"\" + 'A: CallExpression')": 10,
    "('A: Identifier' || \"\")": 10,
    "('A: CallExpression' && 'B: SequenceExpression')": 10,
    "((-(1) !== 'A: AssignmentExpression') ? 'B: Identifier' : null)": 10,
    "((-(1) !== 'A: AssignmentExpression') || (-(1) !== 'B: AssignmentExpression'))": 10,
    "('A: MemberExpression' ? 'B: SequenceExpression' : 'C: SequenceExpression')": 10,
    "((('A: BinaryExpression' + 'B: UnaryExpression') + 'C: string') + 'D: string')": 10,
    "((('A: UnaryExpression' === 'object') && ('B: Identifier' !== null)) && ('C: MemberExpression' === 'D: Identifier'))": 10,
    "((typeof('A: Identifier') === 'string') ? 'B: Identifier' : ('C: MemberExpression' || 'D: MemberExpression'))": 10,
    "((!('A: MemberExpression') || 'B: MemberExpression') || ('C: MemberExpression' != null))": 10,
    "(('A: Identifier' && 'B: MemberExpression') && ('C: MemberExpression' !== 'D: MemberExpression'))": 10,
    "(((null === 'A: Identifier') || ('B: Identifier' === 'C: Identifier')) || (typeof('D: Identifier') === 'string'))": 10,
    "((typeof('A: Identifier') === 'object') && (('B: MemberExpression' === 'C: Identifier') || ('D: MemberExpression' === 'E: Identifier')))": 10,
    "(('A: MemberExpression' !== 'B: Identifier') && !('C: Identifier'))": 10,
    "((typeof('A: MemberExpression') === 'function') && !('B: MemberExpression'))": 10,
    "('A: CallExpression' || 'B: ThisExpression')": 10,
    "(('A: string' === 'B: Identifier') ? 'C: MemberExpression' : 'D: MemberExpression')": 10,
    "((('A: Identifier' >= 'B: BinaryExpression') && ('C: Identifier' <= 'D: BinaryExpression')) ? 'E: string' : 'F: string')": 10,
    "('A: UpdateExpression' === 'B: Identifier')": 9,
    "('A: MemberExpression' <= 1)": 9,
    "((typeof('A: Identifier') == \"object\") && (\"undefined\" != typeof('B: Identifier')))": 9,
    "((typeof('A: Identifier') == \"function\") && 'B: MemberExpression')": 9,
    "('A: Identifier' > -(1))": 9,
    "(('A: Identifier' && 'B: MemberExpression') && 'C: CallExpression')": 9,
    "(false === 'A: CallExpression')": 9,
    "('A: Identifier' ? 1 : 0)": 9,
    "(('A: Identifier' < 'B: number') || ('C: Identifier' > 'D: number'))": 9,
    "('A: MemberExpression' === void(0))": 9,
    "(\"\" + 'A: MemberExpression')": 9,
    "('A: number' == 'B: CallExpression')": 9,
    "(('A: Identifier' && 'B: MemberExpression') || 'C: Identifier')": 9,
    "('A: MemberExpression' ? 'B: CallExpression' : \"\")": 9,
    "('A: CallExpression' || '')": 9,
    "('A: MemberExpression' * 'B: MemberExpression')": 9,
    "((typeof('A: Identifier') === 'function') ? 'B: CallExpression' : 'C: CallExpression')": 9,
    "('A: CallExpression' ? 'B: MemberExpression' : 'C: Identifier')": 9,
    "('A: MemberExpression' == 'B: Identifier')": 9,
    "('A: MemberExpression' == 0)": 9,
    "('A: CallExpression' ? 'B: Identifier' : 'C: ArrayExpression')": 9,
    "(typeof('A: MemberExpression') !== 'string')": 9,
    "((('A: Identifier' != null) && 'B: MemberExpression') ? 'C: CallExpression' : 'D: ArrayExpression')": 9,
    "('object' === 'A: Identifier')": 9,
    "('function' === 'A: Identifier')": 9,
    "('A: Identifier' ? 1 : 'B: number')": 9,
    "(('A: number' <= 'B: Identifier') && ('C: Identifier' <= 'D: number'))": 9,
    "(('A: Identifier' % 'B: number') !== 0)": 9,
    "(('A: string' === 'B: Identifier') && 'C: CallExpression')": 9,
    "('A: MemberExpression' && !('B: Identifier'))": 9,
    "(('A: Identifier' < -(1)) ? 'B: string' : (('C: Identifier' < 0) ? 'D: string' : ('E: BinaryExpression' ? 'F: string' : 'G: ConditionalExpression')))": 9,
    "('A: Identifier' < -(1))": 9,
    "(('A: Identifier' < 0) ? 'B: string' : (('C: Identifier' < 1) ? 'D: string' : ('E: BinaryExpression' ? 'F: string' : 'G: ConditionalExpression')))": 9,
    "((('A: BinaryExpression' + 'B: string') + typeof('C: MemberExpression')) + 'D: string')": 9,
    "((('A: BinaryExpression' + 'B: string') + 'C: string') + typeof('D: MemberExpression'))": 9,
    "('A: Identifier' && !(('B: Identifier' instanceof 'C: Identifier')))": 9,
    "(('A: Identifier' instanceof 'B: Identifier') && !(('C: MemberExpression' in 'D: Identifier')))": 9,
    "!(('A: MemberExpression' in 'B: Identifier'))": 9,
    "('A: MemberExpression' in 'B: Identifier')": 9,
    "(('A: Identifier' > 1) ? ('B: Identifier' - 1) : 0)": 9,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: Identifier' === 'D: Identifier')) || ('E: Identifier' === 'F: Identifier'))": 9,
    "(('A: MemberExpression' || 'B: MemberExpression') || null)": 9,
    "((0 === 'A: Identifier') || (0 === 'B: Identifier'))": 9,
    "('A: Identifier' ? 'B: Identifier' : 'C: string')": 9,
    "(0 < 'A: MemberExpression')": 8,
    "('A: CallExpression' ? ('B: CallExpression' ? void(0) : 'C: CallExpression') : 'D: CallExpression')": 8,
    "('A: CallExpression' ? void(0) : 'B: CallExpression')": 8,
    "('A: Identifier' | 0)": 8,
    "((('A: Identifier' || 'B: Identifier') || 'C: Identifier') || 'D: Identifier')": 8,
    "(('A: string' == 'B: Identifier') || ('C: string' == 'D: Identifier'))": 8,
    "('A: Identifier' && ('B: string' === 'C: CallExpression'))": 8,
    "('A: UpdateExpression' >= 0)": 8,
    "(('A: Identifier' < 'B: Identifier') && 'C: SequenceExpression')": 8,
    "((('A: Identifier' + 'B: CallExpression') + 'C: Identifier') + 'D: CallExpression')": 8,
    "(('A: number' === 'B: Identifier') ? false : null)": 8,
    "('A: Identifier' && ('B: Identifier' === 'C: Identifier'))": 8,
    "(('A: Identifier' !== null) && !('B: CallExpression'))": 8,
    "('A: Identifier' ? 'B: ObjectExpression' : 'C: Identifier')": 8,
    "('A: CallExpression' ? 'B: AssignmentExpression' : 'C: AssignmentExpression')": 8,
    "('A: Identifier' - ('B: Identifier' - 'C: Identifier'))": 8,
    "('A: Identifier' | 'B: Identifier')": 8,
    "(('A: MemberExpression' & 'B: Identifier') !== 0)": 8,
    "(typeof('A: MemberExpression') !== \"undefined\")": 8,
    "('A: CallExpression' || !('B: CallExpression'))": 8,
    "('A: CallExpression' && ('B: Identifier' instanceof 'C: Identifier'))": 8,
    "(('A: Identifier' && ('B: string' == 'C: CallExpression')) ? 'D: CallExpression' : 'E: Identifier')": 8,
    "('A: CallExpression' != 'B: string')": 8,
    "(('A: Identifier' in 'B: Identifier') && 'C: CallExpression')": 8,
    "(('A: Identifier' >= 0) ? 'B: Identifier' : 'C: CallExpression')": 8,
    "(('A: number' <= 'B: Identifier') && ('C: number' >= 'D: Identifier'))": 8,
    "('A: number' >= 'B: Identifier')": 8,
    "('A: Identifier' + ('B: Identifier' / 'C: number'))": 8,
    "((('A: CallExpression' + 'B: string') + 'C: Identifier') + 'D: string')": 8,
    "(('A: Identifier' != null) && ('B: MemberExpression' != null))": 8,
    "(('A: Identifier' === 'B: Identifier') && ('C: Identifier' === 'D: Identifier'))": 8,
    "('A: MemberExpression' && ('B: MemberExpression' == null))": 8,
    "('A: MemberExpression' && ('B: MemberExpression' === 0))": 8,
    "('A: CallExpression' > 'B: Identifier')": 8,
    "('A: Identifier' !== 'object')": 8,
    "(('A: Identifier' !== 'B: Identifier') || !('C: CallExpression'))": 8,
    "('A: UpdateExpression' < 1)": 8,
    "('A: Identifier' ? ('B: Identifier' ? 'C: string' : '') : 'D: string')": 8,
    "(typeof('A: MemberExpression') === 'object')": 8,
    "(('A: Identifier' && 'B: Identifier') ? 'C: Identifier' : 'D: Identifier')": 8,
    "('A: number' - (('B: Identifier' % 'C: number') % 'D: number'))": 8,
    "(('A: Identifier' % 'B: number') % 'C: number')": 8,
    "(('A: Identifier' <= 'B: number') ? 'C: CallExpression' : ('D: string' + 'E: Identifier'))": 8,
    "(('A: MemberExpression' === 'B: number') ? 'C: CallExpression' : 'D: CallExpression')": 8,
    "('A: CallExpression' ? null : 'B: Identifier')": 8,
    "(('A: number' === 'B: Identifier') ? 0 : 'C: Identifier')": 8,
    "(!('A: MemberExpression') && 'B: Identifier')": 8,
    "('A: Identifier' <= 'B: CallExpression')": 8,
    "('A: CallExpression' < 0)": 8,
    "('A: CallExpression' ? 'B: CallExpression' : null)": 8,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: number' <= 'D: Identifier')) ? 'E: string' : 'F: string')": 8,
    "(((1 === 'A: Identifier') || ('B: number' === 'C: Identifier')) || ('D: number' <= 'E: Identifier'))": 8,
    "(('A: Identifier' + 'B: string') + 'C: SequenceExpression')": 8,
    "(('A: string' === 'B: Identifier') && ('C: number' <= 'D: Identifier'))": 8,
    "(((1 !== 'A: Identifier') && ('B: LogicalExpression' || 'C: BinaryExpression')) ? 'D: string' : 'E: string')": 8,
    "((1 !== 'A: Identifier') && (('B: BinaryExpression' || 'C: BinaryExpression') || ('D: number' === 'E: Identifier')))": 8,
    "(1 !== 'A: Identifier')": 8,
    "((0 < 'A: Identifier') && 'B: AssignmentExpression')": 8,
    "('A: Identifier' ? ('B: Identifier' + 'C: string') : ('D: Identifier' + ('E: Identifier' ? 'F: string' : 'G: string')))": 8,
    "(('A: string' === 'B: Identifier') ? 'C: Identifier' : (('D: string' === 'E: Identifier') ? ('F: BinaryExpression' ? 'G: Identifier' : 'H: BinaryExpression') : ('I: LogicalExpression' ? 'J: BinaryExpression' : 'K: UnaryExpression')))": 8,
    "(('A: CallExpression' !== 'B: CallExpression') ? 'C: string' : 'D: string')": 8,
    "(('A: number' === 'B: Identifier') ? (('C: Identifier' || 'D: Identifier') ? 'E: string' : 'F: string') : (('G: Identifier' < 'H: number') ? ('I: LogicalExpression' ? 'J: string' : 'K: string') : ('L: LogicalExpression' ? 'M: string' : 'N: string')))": 8,
    "(('A: Identifier' < 'B: number') ? (('C: Identifier' || 'D: Identifier') ? 'E: string' : 'F: string') : (('G: Identifier' || 'H: Identifier') ? 'I: string' : 'J: string'))": 8,
    "('A: string' + ('B: MemberExpression' ? 'C: string' : \"\"))": 8,
    "(('A: Identifier' < 'B: number') && (0 <= 'C: Identifier'))": 8,
    "((\"\" + 'A: CallExpression') + 'B: CallExpression')": 8,
    "((null != 'A: Identifier') ? 'B: ThisExpression' : 'C: Identifier')": 8,
    "('A: number' / ('B: number' * 'C: number'))": 8,
    "('A: number' / ('B: number' * ('C: number' * 'D: number')))": 8,
    "(('A: CallExpression' > 'B: number') && ('C: CallExpression' < 'D: number'))": 8,
    "((typeof('A: Identifier') === 'string') || (typeof('B: Identifier') === 'function'))": 8,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: Identifier' === 'D: Identifier')) || 'E: Identifier')": 8,
    "((('A: MemberExpression' === 'B: Identifier') || ('C: Identifier' === 'D: Identifier')) || ('E: Identifier' === 'F: Identifier'))": 8,
    "(('A: MemberExpression' === 'B: Identifier') || ('C: Identifier' === 'D: Identifier'))": 8,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: MemberExpression' === 'D: Identifier')) || ('E: MemberExpression' === 'F: Identifier'))": 8,
    "((('A: MemberExpression' === 'B: Identifier') || ('C: MemberExpression' === 'D: Identifier')) || ('E: MemberExpression' === 'F: Identifier'))": 8,
    "('A: MemberExpression' || (('B: Identifier' !== '') ? ('C: BinaryExpression' + 'D: string') : 'E: Identifier'))": 8,
    "(('A: Identifier' !== '') ? (('B: BinaryExpression' + 'C: Identifier') + 'D: string') : 'E: Identifier')": 8,
    "(('A: string' + ('B: CallExpression' || 'C: string')) + 'D: string')": 8,
    "('A: string' + ('B: CallExpression' || 'C: string'))": 8,
    "((void(0) !== 'A: MemberExpression') && 'B: AssignmentExpression')": 8,
    "((null !== 'A: MemberExpression') && 'B: CallExpression')": 8,
    "((typeof('A: Identifier') == \"number\") && 'B: AssignmentExpression')": 8,
    "((void(0) === 'A: Identifier') ? 'B: Identifier' : 'C: Identifier')": 8,
    "((('A: Identifier' || 'B: Identifier') || 'C: Identifier') || 1)": 8,
    "(('A: Identifier' > 0) ? 'B: MemberExpression' : 0)": 8,
    "(('A: Identifier' < 'B: Identifier') && ('C: MemberExpression' < 'D: Identifier'))": 8,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) ? 'E: Identifier' : 'F: Identifier')": 8,
    "((('A: BinaryExpression' - 'B: Identifier') + 'C: Identifier') + 'D: Identifier')": 8,
    "((('A: Identifier' === 'B: Identifier') || ('C: Identifier' === 'D: Identifier')) || ('E: Identifier' === 'F: Identifier'))": 8,
    "(('A: Identifier' === 'B: Identifier') || ('C: Identifier' === 'D: Identifier'))": 8,
    "((('A: UnaryExpression' == 'object') && ('B: MemberExpression' === 'C: Identifier')) && 'D: Identifier')": 8,
    "((typeof('A: Identifier') == 'object') && ('B: MemberExpression' === 'C: Identifier'))": 8,
    "(+('A: Identifier') !== +('B: Identifier'))": 8,
    "(+('A: Identifier') === +('B: Identifier'))": 8,
    "((null == 'A: Identifier') || (('B: BinaryExpression' && 'C: BinaryExpression') && ('D: Identifier' != null)))": 8,
    "((('A: UnaryExpression' == 'number') && ('B: UnaryExpression' != 'object')) && ('C: Identifier' != null))": 8,
    "((typeof('A: Identifier') == 'number') && (typeof('B: MemberExpression') != 'object'))": 8,
    "(typeof('A: MemberExpression') != 'object')": 8,
    "(('A: Identifier' + 'B: Identifier') / 'C: number')": 8,
    "('A: number' === ('B: MemberExpression' * 'C: MemberExpression'))": 8,
    "(typeof('A: Identifier') != 'undefined')": 8,
    "(\"object\" === 'A: Identifier')": 8,
    "((typeof('A: Identifier') === 'function') && 'B: Identifier')": 7,
    "((typeof('A: Identifier') === 'object') && (typeof('B: MemberExpression') === 'function'))": 7,
    "(('A: Identifier' === 'B: Identifier') || ('C: Identifier' && ('D: Identifier' <= 0)))": 7,
    "('A: Identifier' && ('B: Identifier' <= 0))": 7,
    "('A: UpdateExpression' === 0)": 7,
    "('A: Identifier' ? 'B: CallExpression' : void('C: CallExpression'))": 7,
    "(typeof('A: MemberExpression') == \"number\")": 7,
    "(null !== 'A: Identifier')": 7,
    "(('A: Identifier' === 'B: Identifier') ? 'C: Identifier' : 'D: Identifier')": 7,
    "!('A: AssignmentExpression')": 7,
    "('A: string' + 1)": 7,
    "('A: Identifier' ? 'B: ArrayExpression' : 'C: Identifier')": 7,
    "('A: Identifier' && (!('B: Identifier') || 'C: CallExpression'))": 7,
    "((typeof('A: Identifier') !== 'undefined') && 'B: CallExpression')": 7,
    "('A: AssignmentExpression' !== null)": 7,
    "('A: Identifier' || 'B: NewExpression')": 7,
    "('A: Identifier' ? 'B: FunctionExpression' : 'C: Identifier')": 7,
    "(('A: Identifier' && 'B: MemberExpression') || '')": 7,
    "('A: Identifier' && ('B: Identifier' !== 'C: string'))": 7,
    "(('A: Identifier' >= 'B: number') && ('C: Identifier' < 'D: number'))": 7,
    "!(('A: Identifier' && 'B: MemberExpression'))": 7,
    "('A: string' + ('B: Identifier' ? ('C: string' + 'D: Identifier') : ''))": 7,
    "('A: Identifier' ? 'B: string' : \"\")": 7,
    "(!(0) === 'A: MemberExpression')": 7,
    "(!('A: MemberExpression') && 'B: MemberExpression')": 7,
    "('A: Identifier' ? 'B: CallExpression' : false)": 7,
    "((('A: string' + 'B: MemberExpression') + 'C: string') + 'D: Identifier')": 7,
    "(0 == 'A: Identifier')": 7,
    "(('A: Identifier' < 0) || ('B: Identifier' > 'C: number'))": 7,
    "('A: Identifier' ? 'B: CallExpression' : 'C: MemberExpression')": 7,
    "(('A: MemberExpression' & 'B: number') > 0)": 7,
    "('A: UpdateExpression' > 'B: number')": 7,
    "typeof('A: CallExpression')": 7,
    "(((1 + 'A: number') + 'B: number') + 'C: number')": 7,
    "(('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: Identifier'))": 7,
    "(('A: string' + 'B: CallExpression') + 'C: CallExpression')": 7,
    "('A: NewExpression' instanceof 'B: Identifier')": 7,
    "(1 / 'A: CallExpression')": 7,
    "('A: Identifier' ? 'B: number' : 1)": 7,
    "((('A: Identifier' ? 'B: ConditionalExpression' : 'C: string') + 'D: CallExpression') + 'E: Identifier')": 7,
    "(('A: Identifier' ? ('B: Identifier' ? 'C: string' : '') : 'D: string') + 'E: CallExpression')": 7,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: number' === 'D: Identifier')) || ('E: number' === 'F: Identifier'))": 7,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: number' === 'D: Identifier')) || ('E: number' === 'F: Identifier'))": 7,
    "(('A: Identifier' + ('B: Identifier' || 'C: Identifier')) ? 'D: string' : 'E: string')": 7,
    "('A: Identifier' + ('B: Identifier' || 'C: Identifier'))": 7,
    "((('A: ConditionalExpression' + 'B: string') + 'C: MemberExpression') + 'D: string')": 7,
    "((('A: CallExpression' ? 'B: string' : 'C: string') + 'D: string') + 'E: Identifier')": 7,
    "(('A: CallExpression' ? 'B: string' : 'C: string') + 'D: string')": 7,
    "(('A: MemberExpression' === 'B: string') ? 1 : 'C: CallExpression')": 7,
    "((1 === 'A: Identifier') ? 'B: string' : ('C: Identifier' + 'D: string'))": 7,
    "(('A: string' === 'B: Identifier') ? ('C: Identifier' + 'D: string') : (('E: Identifier' + 'F: Identifier') + 'G: string'))": 7,
    "((1 === 'A: Identifier') ? 'B: MemberExpression' : (('C: BinaryExpression' && 'D: BinaryExpression') ? 'E: MemberExpression' : 'F: MemberExpression'))": 7,
    "((('A: BinaryExpression' && 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 7,
    "(~(~('A: BinaryExpression')) % 'B: number')": 7,
    "((typeof('A: Identifier') === 'number') || ('B: string' === 'C: CallExpression'))": 7,
    "((('A: LogicalExpression' && 'B: UnaryExpression') && !('C: MemberExpression')) && (!('D: MemberExpression') || ('E: MemberExpression' && 'F: Identifier')))": 7,
    "((('A: UnaryExpression' && 'B: BinaryExpression') && !('C: MemberExpression')) && !('D: MemberExpression'))": 7,
    "((!('A: CallExpression') && ('B: MemberExpression' < 0)) && !('C: MemberExpression'))": 7,
    "(!('A: CallExpression') && ('B: MemberExpression' < 0))": 7,
    "(!('A: MemberExpression') || ('B: MemberExpression' && 'C: Identifier'))": 7,
    "(('A: Identifier' && ('B: MemberExpression' === 0)) && ('C: MemberExpression' === 0))": 7,
    "((('A: MemberExpression' === false) && ('B: UnaryExpression' !== 'undefined')) && 'C: MemberExpression')": 7,
    "(('A: MemberExpression' === false) && (typeof('B: Identifier') !== 'undefined'))": 7,
    "((('A: MemberExpression' || 'B: MemberExpression') + 'C: string') + 'D: MemberExpression')": 7,
    "(('A: MemberExpression' || 'B: MemberExpression') + 'C: string')": 7,
    "(((0 === 'A: BinaryExpression') && ('B: BinaryExpression' !== 0)) || (0 === ('C: Identifier' % 'D: number')))": 7,
    "((0 === ('A: Identifier' % 'B: number')) && (('C: Identifier' % 'D: number') !== 0))": 7,
    "((('A: BinaryExpression' && 'B: CallExpression') && (1 === 'C: CallExpression')) && ('D: number' === 'E: CallExpression'))": 7,
    "((('A: string' === 'B: Identifier') && 'C: CallExpression') && (1 === 'D: CallExpression'))": 7,
    "((('A: number' + 'B: CallExpression') - 'C: Identifier') % 'D: number')": 7,
    "(('A: number' + 'B: CallExpression') - 'C: Identifier')": 7,
    "('A: number' + 'B: CallExpression')": 7,
    "(-('A: Identifier') + 'B: Identifier')": 7,
    "((('A: number' + 'B: Identifier') - 'C: Identifier') % 'D: number')": 7,
    "(1 + ('A: number' * ('B: Identifier' - 1)))": 7,
    "((('A: CallExpression' - 'B: Identifier') - 1) / 'C: number')": 7,
    "(('A: CallExpression' - 'B: Identifier') - 1)": 7,
    "((('A: CallExpression' - 'B: Identifier') + 'C: Identifier') / 'D: number')": 7,
    "(('A: CallExpression' - 'B: Identifier') + 'C: Identifier')": 7,
    "((('A: Identifier' && 'B: BinaryExpression') && 'C: CallExpression') ? 'D: string' : 'E: string')": 7,
    "((('A: CallExpression' + 'B: number') - 'C: MemberExpression') % 'D: number')": 7,
    "(('A: CallExpression' + 'B: number') - 'C: MemberExpression')": 7,
    "(('A: CallExpression' % 'B: number') ? 'C: Identifier' : ('D: Identifier' - 'E: number'))": 7,
    "(('A: Identifier' && ('B: MemberExpression' >= 'C: Identifier')) && ('D: CallExpression' >= ('E: Identifier' - 1)))": 7,
    "('A: Identifier' && ('B: MemberExpression' >= 'C: Identifier'))": 7,
    "('A: CallExpression' >= ('B: Identifier' - 1))": 7,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && 'C: Identifier') && 'D: MemberExpression')": 7,
    "((('A: MemberExpression' < 1) || ('B: MemberExpression' > 'C: CallExpression')) ? 'D: Identifier' : (('E: LogicalExpression' || 'F: LogicalExpression') ? 'G: Identifier' : ('H: LogicalExpression' ? 'I: Identifier' : 'J: ConditionalExpression')))": 7,
    "(('A: MemberExpression' < 1) || ('B: MemberExpression' > 'C: CallExpression'))": 7,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: BinaryExpression' && 'D: LogicalExpression')) ? 'E: Identifier' : (('F: BinaryExpression' || 'G: BinaryExpression') ? 'H: Identifier' : ('I: LogicalExpression' ? 'J: Identifier' : 'K: ConditionalExpression')))": 7,
    "(('A: MemberExpression' || 'B: string') + 'C: MemberExpression')": 7,
    "(('A: MemberExpression' && ('B: MemberExpression' == null)) && ('C: MemberExpression' == null))": 7,
    "(('A: MemberExpression' > 'B: CallExpression') || ('C: MemberExpression' === 0))": 7,
    "(('A: Identifier' < 'B: number') && ('C: MemberExpression' == null))": 7,
    "(('A: MemberExpression' == null) ? (('B: number' === 'C: Identifier') ? 1 : 0) : 'D: MemberExpression')": 7,
    "(('A: number' === 'B: Identifier') ? 1 : 0)": 7,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 0)) && ('D: MemberExpression' === 0))": 7,
    "((('A: MemberExpression' === 'B: number') && ('C: MemberExpression' === 0)) && ('D: MemberExpression' === 0))": 7,
    "(('A: MemberExpression' === 'B: number') && ('C: MemberExpression' === 0))": 7,
    "(('A: Identifier' < 1) || ('B: Identifier' > 'C: CallExpression'))": 7,
    "(((null == 'A: Identifier') || ('B: Identifier' < 'C: Identifier')) || 'D: Identifier')": 7,
    "((null == 'A: Identifier') || ('B: Identifier' < 'C: Identifier'))": 7,
    "(('A: CallExpression' && 'B: CallExpression') || ('C: CallExpression' && ('D: MemberExpression' === 0)))": 7,
    "('A: CallExpression' && ('B: MemberExpression' === 0))": 7,
    "(('A: Identifier' < 'B: ThisExpression') ? 'C: ThisExpression' : 'D: Identifier')": 7,
    "('A: Identifier' < 'B: ThisExpression')": 7,
    "(('A: MemberExpression' === 1) && 'B: CallExpression')": 7,
    "('A: MemberExpression' ? 'B: CallExpression' : +('C: NewExpression'))": 7,
    "(('A: MemberExpression' || 'B: MemberExpression') || 0)": 7,
    "((('A: UnaryExpression' + 'B: BinaryExpression') + ('C: number' * 'D: Identifier')) + ('E: number' * ('F: number' * 'G: BinaryExpression')))": 7,
    "('A: number' * ('B: number' * ('C: number' * 'D: Identifier')))": 7,
    "('A: number' * ('B: number' * 'C: Identifier'))": 7,
    "(('A: Identifier' && ('B: MemberExpression' !== 'C: MemberExpression')) || (!('D: Identifier') && ('E: CallExpression' !== 'F: CallExpression')))": 7,
    "('A: Identifier' && ('B: MemberExpression' !== 'C: MemberExpression'))": 7,
    "(!('A: Identifier') && ('B: CallExpression' !== 'C: CallExpression'))": 7,
    "(~(~('A: Identifier')) % 'B: number')": 7,
    "~(~('A: Identifier'))": 7,
    "(('A: MemberExpression' === 'B: string') ? 'C: Identifier' : -('D: Identifier'))": 7,
    "(('A: CallExpression' < 'B: number') && !('C: Identifier'))": 7,
    "('A: MemberExpression' ? 'B: Identifier' : 'C: CallExpression')": 7,
    "(('A: CallExpression' - 'B: Identifier') % 'C: number')": 7,
    "(('A: CallExpression' > 'B: CallExpression') || ('C: CallExpression' > 'D: CallExpression'))": 7,
    "(('A: string' in 'B: Identifier') || ('C: string' in 'D: Identifier'))": 7,
    "('A: Identifier' * ('B: CallExpression' ? 0 : 'C: Identifier'))": 7,
    "('A: CallExpression' ? 0 : 'B: Identifier')": 7,
    "(('A: CallExpression' - 'B: CallExpression') + ('C: number' * ('D: CallExpression' - 'E: CallExpression')))": 7,
    "(+('A: Identifier') - +('B: CallExpression'))": 7,
    "(('A: Identifier' < -('B: number')) ? 'C: string' : (('D: Identifier' < 'E: UnaryExpression') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: ConditionalExpression')))": 7,
    "('A: Identifier' < -('B: number'))": 7,
    "(('A: Identifier' < 1) ? 'B: string' : (('C: Identifier' < 'D: number') ? 'E: string' : ('F: BinaryExpression' ? 'G: string' : 'H: string')))": 7,
    "('A: Identifier' && ('B: CallExpression' ? 'C: CallExpression' : 'D: MemberExpression'))": 7,
    "!((('A: CallExpression' && 'B: CallExpression') && 'C: CallExpression'))": 7,
    "((('A: MemberExpression' === 'B: string') ? 'C: CallExpression' : !('D: CallExpression')) && (('E: MemberExpression' === 'F: string') ? 'G: CallExpression' : !('H: CallExpression')))": 7,
    "(('A: CallExpression' <= 'B: Identifier') && ('C: Identifier' <= 'D: CallExpression'))": 7,
    "(('A: number' * ('B: CallExpression' - 'C: CallExpression')) + ('D: CallExpression' - 'E: CallExpression'))": 7,
    "(('A: Identifier' - 'B: Identifier') < 0)": 7,
    "(-(('A: Identifier' + 'B: Identifier')) || 0)": 7,
    "-(('A: Identifier' + 'B: Identifier'))": 7,
    "('A: CallExpression' + ('B: number' * ('C: number' * 'D: CallExpression')))": 7,
    "('A: number' * ('B: number' * 'C: CallExpression'))": 7,
    "(((0 <= 'A: CallExpression') && ('B: CallExpression' <= 'C: number')) ? 'D: string' : 'E: string')": 7,
    "((0 <= 'A: CallExpression') && ('B: CallExpression' <= 'C: number'))": 7,
    "('A: CallExpression' <= 'B: number')": 7,
    "(('A: CallExpression' - ('B: CallExpression' % 'C: number')) + 'D: number')": 7,
    "(('A: CallExpression' - 'B: CallExpression') + 'C: number')": 7,
    "(('A: CallExpression' - ('B: CallExpression' - 1)) + 'C: number')": 7,
    "('A: CallExpression' - (('B: MemberExpression' || 0) * 'C: number'))": 7,
    "(('A: MemberExpression' || 0) * 'B: number')": 7,
    "('A: CallExpression' + ('B: Identifier' * ('C: Identifier' - 'D: MemberExpression')))": 7,
    "('A: Identifier' * ('B: Identifier' - 'C: MemberExpression'))": 7,
    "((('A: MemberExpression' <= 'B: Identifier') && ('C: Identifier' <= 'D: MemberExpression')) || (('E: MemberExpression' <= 'F: Identifier') && ('G: Identifier' <= 'H: MemberExpression')))": 7,
    "(('A: Identifier' * ('B: CallExpression' - 'C: CallExpression')) + 'D: MemberExpression')": 7,
    "('A: Identifier' * ('B: CallExpression' - 'C: CallExpression'))": 7,
    "('A: number' * ('B: CallExpression' - 1))": 7,
    "((null == 'A: Identifier') ? 'B: CallExpression' : 'C: CallExpression')": 7,
    "(('A: CallExpression' + 1) / 'B: number')": 7,
    "(('A: number' * ('B: Identifier' - 1)) + ('C: CallExpression' % 'D: number'))": 7,
    "('A: Identifier' ? ('B: MemberExpression' || 'C: MemberExpression') : 'D: MemberExpression')": 7,
    "(('A: CallExpression' - 'B: CallExpression') / 'C: number')": 7,
    "('A: number' * ('B: string' + 'C: Identifier'))": 7,
    "((('A: Identifier' <= 0) && ('B: Identifier' <= 0)) && ('C: Identifier' <= 0))": 7,
    "(('A: Identifier' <= 0) && ('B: Identifier' <= 0))": 7,
    "('A: MemberExpression' + ('B: Identifier' / 'C: number'))": 7,
    "(('A: Identifier' / 'B: number') + ('C: Identifier' / 'D: number'))": 7,
    "((('A: MemberExpression' + 'B: BinaryExpression') + ('C: number' * 'D: BinaryExpression')) + ('E: number' * 'F: CallExpression'))": 7,
    "(('A: MemberExpression' + ('B: MemberExpression' * 'C: number')) + ('D: number' * ('E: MemberExpression' % 'F: number')))": 7,
    "('A: MemberExpression' + ('B: MemberExpression' * 'C: number'))": 7,
    "('A: number' * ('B: MemberExpression' % 'C: number'))": 7,
    "('A: MemberExpression' % 'B: number')": 7,
    "((('A: LogicalExpression' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || 'E: ArrayExpression')": 7,
    "('A: Identifier' ? 'B: AssignmentExpression' : 'C: AssignmentExpression')": 7,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + (('D: BinaryExpression' + 'E: Identifier') + 'F: string'))": 7,
    "('' === 'A: CallExpression')": 7,
    "('A: Identifier' ? 'B: TemplateLiteral' : 'C: TemplateLiteral')": 7,
    "(('A: CallExpression' && 'B: MemberExpression') || 'C: Identifier')": 7,
    "(('A: Identifier' < 'B: number') || (null == 'C: Identifier'))": 7,
    "(('A: Identifier' >= 0) ? 'B: CallExpression' : (('C: Identifier' + 'D: Identifier') + 1))": 7,
    "(('A: Identifier' + 'B: Identifier') + 1)": 7,
    "(('A: MemberExpression' === 'B: Identifier') ? 'C: Identifier' : -(1))": 7,
    "(('A: Identifier' > 0) ? 'B: Identifier' : ('C: Identifier' - 1))": 7,
    "('A: CallExpression' && ('B: CallExpression' || 'C: CallExpression'))": 7,
    "('A: Identifier' ? 'B: ArrayExpression' : 'C: ObjectExpression')": 7,
    "((null == 'A: Identifier') ? 'B: number' : 'C: Identifier')": 7,
    "((('A: LogicalExpression' || 'B: LogicalExpression') || 'C: CallExpression') || 'D: ObjectExpression')": 7,
    "((('A: LogicalExpression' && 'B: Identifier') || ('C: LogicalExpression' && 'D: Identifier')) || 'E: CallExpression')": 7,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && 'C: Identifier') || (('D: BinaryExpression' && 'E: BinaryExpression') && 'F: Identifier'))": 7,
    "((null == 'A: Identifier') || ('B: Identifier' < 1))": 7,
    "('A: MemberExpression' - (('B: BinaryExpression' || 'C: Identifier') ? 1 : 'D: Identifier'))": 7,
    "((null == 'A: Identifier') || (null == 'B: Identifier'))": 7,
    "(('A: Identifier' && ('B: string' == 'C: Identifier')) && 'D: CallExpression')": 7,
    "(1 / +('A: Identifier'))": 7,
    "(('A: Identifier' !== 'B: Identifier') && !(('C: LogicalExpression' && 'D: BinaryExpression')))": 7,
    "!((('A: LogicalExpression' && 'B: CallExpression') && ('C: Identifier' instanceof 'D: Identifier')))": 7,
    "((('A: CallExpression' && 'B: BinaryExpression') && 'C: CallExpression') && ('D: Identifier' instanceof 'E: Identifier'))": 7,
    "(('A: CallExpression' && ('B: Identifier' instanceof 'C: Identifier')) && 'D: CallExpression')": 7,
    "((!('A: CallExpression') && 'B: CallExpression') && !('C: CallExpression'))": 7,
    "typeof('A: object')": 7,
    "(('A: MemberExpression' !== 'B: MemberExpression') || !(('C: Identifier' in 'D: Identifier')))": 7,
    "('A: Identifier' ? ('B: CallExpression' && !('C: CallExpression')) : ('D: CallExpression' && 'E: CallExpression'))": 7,
    "(('A: Identifier' < 'B: Identifier') ? -(1) : 1)": 7,
    "((null == 'A: Identifier') ? ('B: MemberExpression' - 1) : +('C: Identifier'))": 7,
    "(('A: Identifier' > 'B: Identifier') || (void(0) === 'C: Identifier'))": 7,
    "(('A: Identifier' < 'B: Identifier') || (void(0) === 'C: Identifier'))": 7,
    "(('A: Identifier' <= 0) || ('B: Identifier' > 'C: Identifier'))": 7,
    "('A: Identifier' ? ('B: Identifier' + 'C: Identifier') : 'D: Identifier')": 7,
    "(('A: Identifier' && 'B: MemberExpression') || 0)": 7,
    "((typeof('A: Identifier') == 'function') ? 'B: CallExpression' : 'C: MemberExpression')": 7,
    "(('A: MemberExpression' > 1) ? 'B: Identifier' : 'C: MemberExpression')": 6,
    "(('A: Identifier' != null) && (typeof('B: Identifier') !== 'function'))": 6,
    "(('A: MemberExpression' === 0) && 'B: CallExpression')": 6,
    "('A: CallExpression' && !('B: Identifier'))": 6,
    "!(('A: Identifier' || 'B: Identifier'))": 6,
    "(0 >= 'A: Identifier')": 6,
    "void('A: SequenceExpression')": 6,
    "('A: CallExpression' ? 'B: AssignmentExpression' : 'C: SequenceExpression')": 6,
    "('A: Identifier' == 'B: CallExpression')": 6,
    "('A: Identifier' && ('B: MemberExpression' === 'C: Identifier'))": 6,
    "((('A: BinaryExpression' + 'B: CallExpression') + 'C: string') + 'D: Identifier')": 6,
    "((('A: Identifier' < 'B: number') || ('C: Identifier' > 'D: number')) || 'E: CallExpression')": 6,
    "('A: CallExpression' | 'B: number')": 6,
    "('A: CallExpression' & -('B: number'))": 6,
    "((('A: BinaryExpression' && 'B: AssignmentExpression') && ('C: Identifier' <= 'D: Identifier')) && 'E: AssignmentExpression')": 6,
    "((('A: string' === 'B: CallExpression') && 'C: AssignmentExpression') && ('D: Identifier' <= 'E: Identifier'))": 6,
    "(('A: string' === 'B: CallExpression') && 'C: AssignmentExpression')": 6,
    "(('A: UpdateExpression' << 1) | 1)": 6,
    "('A: UpdateExpression' << 1)": 6,
    "('A: MemberExpression' ? 'B: AssignmentExpression' : ('C: MemberExpression' && 'D: AssignmentExpression'))": 6,
    "(!('A: Identifier') || !('B: CallExpression'))": 6,
    "(('A: string' in 'B: Identifier') && 'C: CallExpression')": 6,
    "('A: string' + ('B: Identifier' + 1))": 6,
    "('A: CallExpression' && ('B: Identifier' !== 'C: Identifier'))": 6,
    "('A: MemberExpression' ? 'B: CallExpression' : 'C: string')": 6,
    "(('A: number' * 'B: Identifier') + 1)": 6,
    "('A: Identifier' && ('B: Identifier' !== 'C: Identifier'))": 6,
    "('A: Identifier' !== false)": 6,
    "(('A: MemberExpression' && 'B: MemberExpression') ? 'C: MemberExpression' : null)": 6,
    "('A: MemberExpression' && ('B: CallExpression' >= 0))": 6,
    "('A: MemberExpression' ? (('B: string' + 'C: MemberExpression') + 'D: string') : 'E: string')": 6,
    "((!('A: Identifier') || 'B: MemberExpression') ? 'C: NewExpression' : 'D: Identifier')": 6,
    "(typeof('A: Identifier') === 'B: Identifier')": 6,
    "(!(1) !== 'A: Identifier')": 6,
    "(null !== 'A: AssignmentExpression')": 6,
    "(-(1) === 'A: CallExpression')": 6,
    "(('A: CallExpression' && 'B: CallExpression') && 'C: AssignmentExpression')": 6,
    "(!('A: Identifier') || !('B: MemberExpression'))": 6,
    "(('A: Identifier' && !('B: MemberExpression')) && 'C: SequenceExpression')": 6,
    "((('A: BinaryExpression' + 'B: string') + 'C: string') + 'D: CallExpression')": 6,
    "(('A: Identifier' === 'B: Identifier') && 'C: CallExpression')": 6,
    "('A: Identifier' && ('B: Identifier' !== true))": 6,
    "((typeof('A: Identifier') !== \"undefined\") && 'B: MemberExpression')": 6,
    "((('A: CallExpression' + 'B: string') + 'C: CallExpression') + 'D: string')": 6,
    "(('A: MemberExpression' != null) ? 'B: CallExpression' : 'C: Identifier')": 6,
    "('A: MemberExpression' & ~('B: Identifier'))": 6,
    "('A: Identifier' & 'B: Identifier')": 6,
    "(('A: Identifier' !== 'B: Identifier') && 'C: CallExpression')": 6,
    "(('A: string' + 'B: Identifier') + 'C: CallExpression')": 6,
    "((('A: string' + 'B: MemberExpression') + 'C: string') + 'D: CallExpression')": 6,
    "('A: Identifier' + 0)": 6,
    "(typeof('A: Identifier') != \"function\")": 6,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: string' == 'D: CallExpression')) && ('E: string' == 'F: CallExpression'))": 6,
    "('A: string' != 'B: Identifier')": 6,
    "(('A: number' == 'B: Identifier') || ('C: number' == 'D: Identifier'))": 6,
    "(+('A: Identifier') || 0)": 6,
    "(('A: CallExpression' + 'B: CallExpression') + 'C: CallExpression')": 6,
    "('A: Identifier' + ('B: MemberExpression' * 'C: number'))": 6,
    "(typeof('A: MemberExpression') !== \"boolean\")": 6,
    "(('A: string' in 'B: Identifier') && ('C: string' in 'D: Identifier'))": 6,
    "(!('A: Identifier') && !('B: MemberExpression'))": 6,
    "(!('A: MemberExpression') && !('B: MemberExpression'))": 6,
    "('A: MemberExpression' && ('B: MemberExpression' !== 'C: string'))": 6,
    "((typeof('A: MemberExpression') === 'function') ? 'B: Identifier' : 'C: MemberExpression')": 6,
    "('A: Identifier' ? null : 'B: NewExpression')": 6,
    "('A: Identifier' ? 'B: ArrowFunctionExpression' : 'C: ArrowFunctionExpression')": 6,
    "((('A: BinaryExpression' + 'B: string') + ('C: Identifier' ? 'D: string' : '')) + 'E: string')": 6,
    "((('A: string' + 'B: Identifier') + 'C: string') + ('D: Identifier' ? 'E: string' : ''))": 6,
    "('A: Identifier' ? 'B: Identifier' : 0)": 6,
    "('A: number' * ('B: number' * ('C: number' * 'D: BinaryExpression')))": 6,
    "(('A: number' * 'B: CallExpression') | 0)": 6,
    "((typeof('A: Identifier') === 'string') && 'B: CallExpression')": 6,
    "(('A: Identifier' !== 0) && 'B: CallExpression')": 6,
    "((1 === 'A: Identifier') ? ('B: CallExpression' ? 'C: number' : 'D: number') : ('E: number' - ('F: BinaryExpression' % 'G: number')))": 6,
    "('A: CallExpression' + (('B: CallExpression' > 'C: number') ? 'D: number' : 'E: number'))": 6,
    "(('A: CallExpression' > 'B: number') ? 'C: number' : 'D: number')": 6,
    "(!('A: Identifier') && ('B: Identifier' != null))": 6,
    "('A: MemberExpression' + ('B: MemberExpression' ? 'C: string' : ''))": 6,
    "((('A: UnaryExpression' === 'object') && ('B: UnaryExpression' !== 'undefined')) ? 'C: AssignmentExpression' : (('D: BinaryExpression' && 'E: MemberExpression') ? 'F: CallExpression' : 'G: AssignmentExpression'))": 6,
    "((('A: UnaryExpression' === 'function') && 'B: MemberExpression') ? 'C: CallExpression' : 'D: AssignmentExpression')": 6,
    "(('A: Identifier' < 'B: number') ? ('C: Identifier' ? 'D: string' : 'E: string') : ('F: Identifier' ? 'G: string' : 'H: string'))": 6,
    "((('A: number' <= 'B: BinaryExpression') && ('C: BinaryExpression' <= 'D: number')) ? 'E: number' : (('F: number' <= 'G: BinaryExpression') ? 'H: number' : 'I: number'))": 6,
    "(('A: number' <= ('B: Identifier' % 'C: number')) ? 'D: number' : 'E: number')": 6,
    "(('A: number' === 'B: Identifier') ? 'C: MemberExpression' : 'D: Identifier')": 6,
    "(('A: string' === 'B: Identifier') ? ('C: Identifier' ? 'D: string' : 'E: string') : (('F: Identifier' + 'G: string') + 'H: SequenceExpression'))": 6,
    "(((1 == 'A: BinaryExpression') && ('B: BinaryExpression' != 'C: number')) ? 'D: MemberExpression' : (('E: LogicalExpression' && 'F: LogicalExpression') ? 'G: MemberExpression' : 'H: MemberExpression'))": 6,
    "((('A: number' <= 'B: BinaryExpression') && ('C: BinaryExpression' <= 'D: number')) && (('E: BinaryExpression' < 'F: number') || ('G: number' <= 'H: BinaryExpression')))": 6,
    "(('A: number' < 'B: Identifier') && ('C: Identifier' < 'D: number'))": 6,
    "(('A: number' === 'B: Identifier') ? 'C: string' : ('D: Identifier' + 'E: string'))": 6,
    "('A: CallExpression' ? ('B: string' + 'C: Identifier') : ('D: string' + 'E: Identifier'))": 6,
    "(('A: number' === 'B: CallExpression') ? 'C: string' : 'D: string')": 6,
    "(\"\" === 'A: Identifier')": 6,
    "((!(0) === 'A: Identifier') ? 'B: CallExpression' : ('C: Identifier' ? 'D: MemberExpression' : 'E: MemberExpression'))": 6,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) ? 'E: Identifier' : (('F: string' === 'G: Identifier') ? ('H: BinaryExpression' ? 'I: Identifier' : 'J: BinaryExpression') : ('K: LogicalExpression' ? 'L: BinaryExpression' : 'M: UnaryExpression')))": 6,
    "(('A: string' + ('B: MemberExpression' ? 'C: string' : \"\")) + 'D: Identifier')": 6,
    "(('A: number' - 'B: CallExpression') - 1)": 6,
    "('A: number' - 'B: CallExpression')": 6,
    "!((!('A: CallExpression') || !('B: CallExpression')))": 6,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: UnaryExpression' !== 'D: AssignmentExpression')) ? 'E: Identifier' : null)": 6,
    "((('A: UnaryExpression' !== 'B: AssignmentExpression') || ('C: UnaryExpression' !== 'D: AssignmentExpression')) || (-(1) !== 'E: AssignmentExpression'))": 6,
    "(('A: CallExpression' !== 'B: CallExpression') ? 'C: string' : \"\")": 6,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: Identifier' ? 'D: BinaryExpression' : \"\")) + ('E: Identifier' ? ('F: BinaryExpression' + 'G: string') : \"\"))": 6,
    "((0 === 'A: Identifier') ? (('B: string' + 'C: ConditionalExpression') + 'D: string') : (('E: string' + 'F: ConditionalExpression') + 'G: string'))": 6,
    "('A: string' + (('B: number' === 'C: CallExpression') ? 'D: string' : ''))": 6,
    "(+('A: Identifier') > 'B: number')": 6,
    "('A: number' * ('B: number' + 'C: MemberExpression'))": 6,
    "(('A: number' / 'B: number') / 'C: number')": 6,
    "(('A: string' + ('B: Identifier' || 'C: string')) + 'D: Identifier')": 6,
    "('A: string' + ('B: Identifier' || 'C: string'))": 6,
    "(('A: MemberExpression' === 'B: Identifier') ? 'C: MemberExpression' : null)": 6,
    "((typeof('A: MemberExpression') === 'string') && 'B: MemberExpression')": 6,
    "(('A: Identifier' >= 1) && ('B: Identifier' >= 0))": 6,
    "('A: MemberExpression' || false)": 6,
    "((('A: Identifier' != null) && ('B: UnaryExpression' === 'object')) && 'C: CallExpression')": 6,
    "(('A: Identifier' != null) && (typeof('B: Identifier') === 'object'))": 6,
    "('A: MemberExpression' + 'B: TemplateLiteral')": 6,
    "((typeof('A: MemberExpression') == \"number\") ? 'B: MemberExpression' : 0)": 6,
    "(('A: Identifier' > 'B: Identifier') ? 'C: Identifier' : 0)": 6,
    "('A: Identifier' + ('B: Identifier' * ('C: BinaryExpression' - 1)))": 6,
    "('A: Identifier' * (('B: Identifier' - 'C: Identifier') - 1))": 6,
    "((('A: Identifier' >= 'B: Identifier') && ('C: Identifier' <= 'D: Identifier')) ? 'E: Identifier' : (('F: Identifier' > 'G: Identifier') ? 'H: Identifier' : ('I: BinaryExpression' ? 'J: Identifier' : 'K: Identifier')))": 6,
    "(('A: Identifier' > 'B: Identifier') ? 'C: Identifier' : (('D: Identifier' < 'E: Identifier') ? 'F: Identifier' : 'G: Identifier'))": 6,
    "(('A: Identifier' < 'B: CallExpression') ? 0 : (('C: Identifier' > 'D: BinaryExpression') ? 'E: Identifier' : 'F: Identifier'))": 6,
    "(('A: Identifier' > ('B: Identifier' + 'C: CallExpression')) ? 'D: Identifier' : 'E: Identifier')": 6,
    "(!('A: CallExpression') && !('B: CallExpression'))": 6,
    "((typeof('A: MemberExpression') === 'number') ? 'B: MemberExpression' : 0)": 6,
    "(('A: string' + 'B: string') + (('C: string' + 'D: Identifier') + 'E: string'))": 6,
    "(typeof('A: Identifier') != 'function')": 6,
    "((('A: UnaryExpression' == \"object\") && ('B: MemberExpression' === 'C: Identifier')) && 'D: Identifier')": 6,
    "((typeof('A: Identifier') == \"object\") && ('B: MemberExpression' === 'C: Identifier'))": 6,
    "(('A: Identifier' instanceof 'B: Identifier') && 'C: AssignmentExpression')": 6,
    "(+('A: Identifier') != +('B: Identifier'))": 6,
    "(+('A: Identifier') == +('B: Identifier'))": 6,
    "((null == 'A: Identifier') && 'B: SequenceExpression')": 6,
    "((null == 'A: Identifier') || (('B: BinaryExpression' && 'C: BinaryExpression') && (null != 'D: Identifier')))": 6,
    "((('A: UnaryExpression' == \"number\") && (\"object\" != 'B: UnaryExpression')) && (null != 'C: Identifier'))": 6,
    "((typeof('A: Identifier') == \"number\") && (\"object\" != typeof('B: MemberExpression')))": 6,
    "(\"object\" != typeof('A: MemberExpression'))": 6,
    "('A: Identifier' === (-(1) / 0))": 6,
    "('A: Identifier' === (1 / 0))": 6,
    "('A: CallExpression' ? 'B: SequenceExpression' : 'C: SequenceExpression')": 6,
    "(('A: MemberExpression' > 1) && 'B: AssignmentExpression')": 6,
    "(((null == 'A: Identifier') || ('B: MemberExpression' < 1)) ? (('C: BinaryExpression' || 'D: Identifier') ? void(0) : 'E: ArrayExpression') : (('F: BinaryExpression' || 'G: Identifier') ? 'H: MemberExpression' : 'I: CallExpression'))": 6,
    "(((null == 'A: Identifier') || 'B: Identifier') ? 'C: MemberExpression' : 'D: CallExpression')": 6,
    "((null != 'A: Identifier') && 'B: AssignmentExpression')": 6,
    "(('A: UpdateExpression' < 'B: Identifier') ? 'C: ObjectExpression' : null)": 5,
    "(('A: Identifier' < 'B: Identifier') ? 'C: ObjectExpression' : null)": 5,
    "(('A: Identifier' < 'B: Identifier') && !('C: Identifier'))": 5,
    "(('A: UpdateExpression' === 'B: Identifier') || ('C: Identifier' === 'D: Identifier'))": 5,
    "(('A: MemberExpression' === 0) && (0 === 'B: Identifier'))": 5,
    "('A: MemberExpression' && ('B: Identifier' < 'C: Identifier'))": 5,
    "((!('A: Identifier') && ('B: MemberExpression' === 1)) || ('C: Identifier' && ('D: MemberExpression' === 0)))": 5,
    "(!('A: Identifier') && ('B: MemberExpression' === 1))": 5,
    "((('A: MemberExpression' === 0) && !('B: Identifier')) && ('C: MemberExpression' === 0))": 5,
    "(('A: MemberExpression' === 0) && !('B: Identifier'))": 5,
    "('A: Identifier' <= ('B: MemberExpression' - 'C: MemberExpression'))": 5,
    "((!('A: MemberExpression') && ('B: Identifier' < 'C: MemberExpression')) && 'D: MemberExpression')": 5,
    "(!('A: MemberExpression') && ('B: Identifier' < 'C: MemberExpression'))": 5,
    "(0 === ('A: MemberExpression' + 'B: Identifier'))": 5,
    "(('A: Identifier' + 1) < 'B: MemberExpression')": 5,
    "('A: Identifier' && ('B: UpdateExpression' < 'C: MemberExpression'))": 5,
    "('A: UpdateExpression' < 'B: MemberExpression')": 5,
    "(+('A: Identifier') || 'B: Identifier')": 5,
    "(('A: Identifier' < 'B: Identifier') ? -(1) : (('C: Identifier' > 'D: Identifier') ? 1 : 0))": 5,
    "(('A: Identifier' > 'B: Identifier') ? 1 : 0)": 5,
    "('A: Identifier' || ('B: MemberExpression' === 'C: Identifier'))": 5,
    "('A: Identifier' != 'B: string')": 5,
    "('A: CallExpression' + '')": 5,
    "((('A: string' + 'B: Identifier') + 'C: string') + 'D: CallExpression')": 5,
    "('A: string' !== 'B: MemberExpression')": 5,
    "('A: Identifier' | 'B: number')": 5,
    "('A: MemberExpression' ? 'B: SequenceExpression' : 'C: CallExpression')": 5,
    "(('A: Identifier' + 'B: string') + 'C: string')": 5,
    "('A: Identifier' !== 1)": 5,
    "('A: MemberExpression' === 'function')": 5,
    "('A: number' - 'B: Identifier')": 5,
    "(('A: Identifier' !== null) && (typeof('B: Identifier') === 'object'))": 5,
    "((null === 'A: Identifier') || ('B: MemberExpression' === 'C: Identifier'))": 5,
    "('A: Identifier' && (('B: LogicalExpression' || 'C: BinaryExpression') || ('D: CallExpression' && 'E: BinaryExpression')))": 5,
    "((('A: BinaryExpression' && 'B: BinaryExpression') || ('C: Identifier' === 'D: CallExpression')) || ('E: CallExpression' && ('F: Identifier' === 'G: CallExpression')))": 5,
    "('A: CallExpression' && ('B: Identifier' === 'C: CallExpression'))": 5,
    "((('A: string' === 'B: AssignmentExpression') || ('C: string' === 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 5,
    "(('A: string' === 'B: AssignmentExpression') || ('C: string' === 'D: Identifier'))": 5,
    "('A: Identifier' && (typeof('B: Identifier') === 'function'))": 5,
    "(('A: Identifier' && ('B: UnaryExpression' || 'C: CallExpression')) && ('D: Identifier' !== 'E: MemberExpression'))": 5,
    "('A: Identifier' && ('B: Identifier' instanceof 'C: Identifier'))": 5,
    "('A: AssignmentExpression' && !('B: MemberExpression'))": 5,
    "((!('A: Identifier') && 'B: Identifier') ? (('C: string' + 'D: Identifier') + 'E: string') : 'F: Identifier')": 5,
    "((null === 'A: Identifier') ? 'B: Identifier' : ('C: Identifier' + 'D: string'))": 5,
    "((!('A: Identifier') && 'B: CallExpression') ? 'C: MemberExpression' : 'D: Identifier')": 5,
    "('A: Identifier' ? (('B: CallExpression' + 'C: string') + 'D: CallExpression') : 'E: Identifier')": 5,
    "('A: MemberExpression' ? 'B: MemberExpression' : 'C: ArrayExpression')": 5,
    "('A: MemberExpression' ? (('B: MemberExpression' + 'C: string') + 'D: Identifier') : 'E: Identifier')": 5,
    "(('A: string' === 'B: CallExpression') ? 'C: MemberExpression' : ('D: string' + 'E: MemberExpression'))": 5,
    "((null == 'A: Identifier') ? 'B: string' : 'C: Identifier')": 5,
    "(!('A: Identifier') || ('B: MemberExpression' !== 'C: number'))": 5,
    "('A: MemberExpression' && (0 === 'B: CallExpression'))": 5,
    "(('A: MemberExpression' || 'B: CallExpression') && 'C: MemberExpression')": 5,
    "('A: AssignmentExpression' || ('B: CallExpression' > -(1)))": 5,
    "(('A: Identifier' && 'B: CallExpression') && (('C: Identifier' && 'D: UnaryExpression') || 'E: Identifier'))": 5,
    "(('A: Identifier' && !('B: MemberExpression')) || 'C: Identifier')": 5,
    "('A: ThisExpression' || 'B: Identifier')": 5,
    "!(!(('A: Identifier' && 'B: MemberExpression')))": 5,
    "(('A: CallExpression' && ('B: Identifier' !== 'C: Identifier')) || 'D: AssignmentExpression')": 5,
    "((typeof('A: Identifier') === 'B: Identifier') || (('C: string' + 'D: ConditionalExpression') + 'E: Identifier'))": 5,
    "(('A: string' + ('B: BinaryExpression' ? 'C: string' : 'D: string')) + 'E: Identifier')": 5,
    "('A: string' + (('B: Identifier' < 1) ? 'C: string' : 'D: string'))": 5,
    "(('A: Identifier' < 1) ? 'B: string' : 'C: string')": 5,
    "('A: CallExpression' ? 'B: NewExpression' : 'C: Identifier')": 5,
    "((\"undefined\" != typeof('A: Identifier')) && 'B: CallExpression')": 5,
    "(typeof('A: Identifier') == \"undefined\")": 5,
    "('A: MemberExpression' || \"\")": 5,
    "(('A: Identifier' && 'B: MemberExpression') && 'C: AssignmentExpression')": 5,
    "('A: MemberExpression' ? ('B: string' + 'C: MemberExpression') : '')": 5,
    "(!('A: Identifier') && 'B: MemberExpression')": 5,
    "('A: Identifier' || null)": 5,
    "('A: MemberExpression' + \"\")": 5,
    "(('A: Identifier' instanceof 'B: Identifier') && 'C: CallExpression')": 5,
    "('A: Identifier' & 'B: number')": 5,
    "('A: CallExpression' !== 'B: Identifier')": 5,
    "((('A: Identifier' - 'B: number') + 'C: Identifier') / 'D: number')": 5,
    "(('A: Identifier' - 'B: number') + 'C: Identifier')": 5,
    "('A: number' - 'B: MemberExpression')": 5,
    "((typeof('A: Identifier') == \"object\") && 'B: Identifier')": 5,
    "(1 < 'A: Identifier')": 5,
    "(!('A: Identifier') && ('B: string' === 'C: Identifier'))": 5,
    "('A: Identifier' << 'B: number')": 5,
    "((('A: BinaryExpression' + 'B: CallExpression') + 'C: string') + 'D: string')": 5,
    "('A: Identifier' / 'B: MemberExpression')": 5,
    "('A: CallExpression' >= 'B: number')": 5,
    "(('A: Identifier' !== null) && 'B: MemberExpression')": 5,
    "(('A: MemberExpression' === 'B: string') ? 'C: MemberExpression' : 'D: Identifier')": 5,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: ArrayExpression')": 5,
    "('A: MemberExpression' === '')": 5,
    "(!('A: Identifier') && ('B: Identifier' !== 0))": 5,
    "(('A: Identifier' + ('B: Identifier' ? 'C: string' : '')) + 'D: CallExpression')": 5,
    "('A: Identifier' + ('B: Identifier' ? 'C: string' : ''))": 5,
    "(('A: Identifier' === 'B: Identifier') ? 'C: ArrayExpression' : 'D: ArrayExpression')": 5,
    "((('A: BinaryExpression' + 'B: string') + ('C: Identifier' ? 'D: string' : 'E: string')) + 'F: string')": 5,
    "((('A: string' + 'B: Identifier') + 'C: string') + ('D: Identifier' ? 'E: string' : 'F: string'))": 5,
    "(('A: CallExpression' > 'B: number') ? 'C: string' : 'D: string')": 5,
    "('A: Identifier' ? false : 'B: Identifier')": 5,
    "(true === 'A: CallExpression')": 5,
    "((('A: BinaryExpression' ? 'B: Identifier' : '') + 'C: string') + ((1 == 'D: Identifier') ? 'E: Identifier' : ''))": 5,
    "((('A: number' == 'B: Identifier') ? 'C: Identifier' : '') + 'D: string')": 5,
    "(('A: number' == 'B: Identifier') ? 'C: Identifier' : '')": 5,
    "((1 == 'A: Identifier') ? 'B: Identifier' : '')": 5,
    "('A: Identifier' ? 'B: NewExpression' : 'C: Identifier')": 5,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: BinaryExpression' !== 'D: number')) ? ('E: Identifier' + 'F: string') : ('G: Identifier' + 'H: string'))": 5,
    "((('A: BinaryExpression' || 'B: BinaryExpression') && ('C: BinaryExpression' !== 'D: number')) && (('E: Identifier' % 'F: number') !== 'G: number'))": 5,
    "((('A: number' === 'B: BinaryExpression') || ('C: number' === 'D: BinaryExpression')) && (('E: Identifier' % 'F: number') !== 'G: number'))": 5,
    "(('A: number' === ('B: Identifier' % 'C: number')) || ('D: number' === ('E: Identifier' % 'F: number')))": 5,
    "((('A: Identifier' > 1) && ('B: Identifier' < 'C: number')) && (~('D: UnaryExpression') !== 1))": 5,
    "(~(~('A: BinaryExpression')) !== 1)": 5,
    "((1 === ('A: Identifier' % 'B: number')) ? 'C: string' : 'D: string')": 5,
    "(('A: Identifier' < 'B: number') ? ('C: Identifier' ? 'D: MemberExpression' : 'E: MemberExpression') : 'F: Identifier')": 5,
    "('A: Identifier' + ((1 === 'B: Identifier') ? 'C: string' : ''))": 5,
    "((1 === 'A: Identifier') ? 'B: string' : '')": 5,
    "((0 === ('A: Identifier' % 'B: number')) && ('C: Identifier' !== 'D: number'))": 5,
    "((('A: Identifier' ? '' : 'B: string') + 'C: string') + 'D: MemberExpression')": 5,
    "(('A: Identifier' ? '' : 'B: string') + 'C: string')": 5,
    "((('A: Identifier' < 'B: number') || ('C: BinaryExpression' && 'D: BinaryExpression')) || (0 === ('E: Identifier' % 'F: number')))": 5,
    "(('A: Identifier' < 'B: number') || (('C: Identifier' <= 'D: number') && (0 === 'E: BinaryExpression')))": 5,
    "(('A: Identifier' <= 'B: number') && (0 === ('C: Identifier' % 'D: number')))": 5,
    "((0 === ('A: Identifier' % 'B: number')) || (('C: Identifier' > 'D: number') && ('E: Identifier' < 'F: number')))": 5,
    "((('A: Identifier' >= 'B: number') && ('C: Identifier' <= 'D: number')) ? 'E: MemberExpression' : 'F: MemberExpression')": 5,
    "(('A: Identifier' >= 'B: number') && ('C: Identifier' <= 'D: number'))": 5,
    "((('A: string' === 'B: Identifier') && ('C: Identifier' >= 'D: number')) || ('E: string' === 'F: Identifier'))": 5,
    "(('A: Identifier' >= 0) && ('B: Identifier' < 'C: number'))": 5,
    "((('A: BinaryExpression' < 'B: number') && ('C: BinaryExpression' > 1)) && (('D: UnaryExpression' % 'E: number') !== 1))": 5,
    "((('A: Identifier' % 'B: number') < 'C: number') && (('D: Identifier' % 'E: number') > 1))": 5,
    "(('A: Identifier' % 'B: number') > 1)": 5,
    "((~('A: UnaryExpression') % 'B: number') !== 1)": 5,
    "((('A: Identifier' % 'B: number') >= 'C: number') || (('D: Identifier' >= 'E: number') && (0 === 'F: BinaryExpression')))": 5,
    "(('A: Identifier' >= 'B: number') && (0 === ('C: Identifier' % 'D: number')))": 5,
    "(('A: Identifier' + 'B: Identifier') + 'C: MemberExpression')": 5,
    "((('A: BinaryExpression' ? 'B: string' : '') + 'C: MemberExpression') + 'D: string')": 5,
    "(('' === 'A: Identifier') ? 'B: string' : 'C: Identifier')": 5,
    "((('A: Identifier' + 'B: string') + ('C: BinaryExpression' ? 'D: string' : '')) + 'E: string')": 5,
    "(('A: Identifier' + 'B: string') + (('C: number' === 'D: CallExpression') ? 'E: string' : ''))": 5,
    "(('A: Identifier' != null) && ('B: string' === 'C: CallExpression'))": 5,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: MemberExpression' === 0)) && ('D: MemberExpression' === 'E: Identifier'))": 5,
    "(('A: Identifier' instanceof 'B: Identifier') || (('C: Identifier' != null) && ('D: MemberExpression' != null)))": 5,
    "(('A: Identifier' >= 0) && 'B: CallExpression')": 5,
    "(('A: Identifier' > 0) ? 'B: string' : 'C: string')": 5,
    "((typeof('A: Identifier') === 'string') ? ('B: MemberExpression' || 'C: MemberExpression') : 'D: Identifier')": 5,
    "(('A: string' + ('B: MemberExpression' ? 'C: string' : '')) + 'D: string')": 5,
    "((-('A: Identifier') + 'B: Identifier') - 1)": 5,
    "(((1 + 'A: BinaryExpression') + 'B: Identifier') + 'C: Identifier')": 5,
    "((1 + ('A: number' * 'B: BinaryExpression')) + 'C: Identifier')": 5,
    "(('A: Identifier' && ('B: Identifier' !== true)) && 'C: CallExpression')": 5,
    "((true === 'A: Identifier') ? 'B: CallExpression' : ('C: Identifier' ? 'D: MemberExpression' : 'E: Identifier'))": 5,
    "((('A: LogicalExpression' && 'B: Identifier') && 'C: MemberExpression') && 'D: CallExpression')": 5,
    "((('A: MemberExpression' === 'B: Identifier') && ('C: UnaryExpression' !== 'undefined')) && 'D: Identifier')": 5,
    "(('A: MemberExpression' === 'B: Identifier') && (typeof('C: Identifier') !== 'undefined'))": 5,
    "(('A: MemberExpression' != null) && ('B: MemberExpression' != null))": 5,
    "('A: Identifier' && ('B: MemberExpression' === -('C: number')))": 5,
    "('A: MemberExpression' === -('B: number'))": 5,
    "((('A: MemberExpression' < 0) || ('B: MemberExpression' > 'C: number')) ? 'D: Identifier' : (('E: BinaryExpression' || 'F: BinaryExpression') ? 'G: Identifier' : ('H: LogicalExpression' ? 'I: Identifier' : 'J: ConditionalExpression')))": 5,
    "((('A: MemberExpression' < 0) || ('B: MemberExpression' > 'C: number')) || (('D: MemberExpression' === 'E: number') && ('F: LogicalExpression' || 'G: BinaryExpression')))": 5,
    "(('A: MemberExpression' === 'B: number') && (('C: BinaryExpression' || 'D: BinaryExpression') || ('E: MemberExpression' !== 0)))": 5,
    "((('A: MemberExpression' !== 0) || ('B: MemberExpression' !== 0)) || ('C: MemberExpression' !== 0))": 5,
    "(('A: MemberExpression' !== 0) || ('B: MemberExpression' !== 0))": 5,
    "((('A: MemberExpression' < 0) || ('B: MemberExpression' > 'C: number')) ? 'D: Identifier' : (('E: BinaryExpression' || 'F: BinaryExpression') ? 'G: Identifier' : ('H: LogicalExpression' ? 'I: Identifier' : 'J: UnaryExpression')))": 5,
    "((('A: MemberExpression' < 0) || ('B: MemberExpression' > 'C: number')) ? 'D: Identifier' : (('E: BinaryExpression' || 'F: BinaryExpression') ? 'G: Identifier' : -(1)))": 5,
    "((('A: MemberExpression' < 0) || ('B: MemberExpression' > 'C: number')) ? 'D: Identifier' : -(1))": 5,
    "('A: MemberExpression' && (('B: Identifier' < 'C: Identifier') || ('D: Identifier' > 'E: Identifier')))": 5,
    "(('A: Identifier' < 'B: Identifier') || ('C: Identifier' > 'D: Identifier'))": 5,
    "(('A: Identifier' + ('B: Identifier' || '')) + ('C: Identifier' || ''))": 5,
    "('A: Identifier' + ('B: Identifier' || ''))": 5,
    "(('A: MemberExpression' && ('B: UnaryExpression' !== 'undefined')) && ('C: MemberExpression' !== 'D: Identifier'))": 5,
    "('A: MemberExpression' && (typeof('B: MemberExpression') !== 'undefined'))": 5,
    "((('A: MemberExpression' != null) || ('B: MemberExpression' != null)) || ('C: MemberExpression' != null))": 5,
    "(('A: MemberExpression' != null) || ('B: MemberExpression' != null))": 5,
    "(('A: Identifier' < 1) || ('B: Identifier' > 'C: number'))": 5,
    "((('A: MemberExpression' <= 'B: number') && ('C: MemberExpression' === true)) && ('D: MemberExpression' > 0))": 5,
    "(('A: MemberExpression' <= 'B: number') && ('C: MemberExpression' === true))": 5,
    "('A: Identifier' && ('B: Identifier' < 'C: number'))": 5,
    "(!('A: Identifier') && ('B: number' === 'C: Identifier'))": 5,
    "((null === 'A: Identifier') || (('B: Identifier' === 'C: Identifier') && ('' === 'D: Identifier')))": 5,
    "(('A: Identifier' === 'B: Identifier') && ('' === 'C: Identifier'))": 5,
    "(('A: Identifier' > 'B: ThisExpression') ? 'C: ThisExpression' : 'D: Identifier')": 5,
    "('A: Identifier' > 'B: ThisExpression')": 5,
    "('A: CallExpression' && !(('B: BinaryExpression' && 'C: LogicalExpression')))": 5,
    "!((('A: CallExpression' !== 'B: UnaryExpression') && ('C: BinaryExpression' || 'D: UnaryExpression')))": 5,
    "(('A: CallExpression' !== -(1)) && (('B: MemberExpression' == null) || !('C: CallExpression')))": 5,
    "('A: CallExpression' * -(1))": 5,
    "(+(('A: MemberExpression' * 'B: number')) + 'C: CallExpression')": 5,
    "+(('A: MemberExpression' * 'B: number'))": 5,
    "((0 === 'A: Identifier') ? 0 : (('B: MemberExpression' === 'C: string') ? 'D: Identifier' : -('E: Identifier')))": 5,
    "((('A: CallExpression' || 'B: CallExpression') ? 'C: CallExpression' : 'D: CallExpression') - 'E: CallExpression')": 5,
    "(('A: CallExpression' || 'B: CallExpression') ? 'C: CallExpression' : 'D: CallExpression')": 5,
    "(0 === (('A: CallExpression' - 'B: Identifier') % 'C: number'))": 5,
    "('A: CallExpression' && ('B: CallExpression' > 0))": 5,
    "('A: CallExpression' ? !('B: MemberExpression') : false)": 5,
    "('A: CallExpression' ? 'B: MemberExpression' : false)": 5,
    "('A: CallExpression' ? ('B: MemberExpression' && ('C: MemberExpression' === 0)) : false)": 5,
    "((typeof('A: Identifier') === 'object') && (('B: string' in 'C: Identifier') || ('D: string' in 'E: Identifier')))": 5,
    "((null == 'A: Identifier') ? true : 'B: Identifier')": 5,
    "((typeof('A: Identifier') === 'string') || ('B: Identifier' instanceof 'C: Identifier'))": 5,
    "((('A: LogicalExpression' || 'B: CallExpression') || (null === 'C: Identifier')) || ('D: Identifier' === 'E: Identifier'))": 5,
    "((('A: LogicalExpression' || 'B: CallExpression') || 'C: CallExpression') || (null === 'D: Identifier'))": 5,
    "('A: Identifier' ? 'B: CallExpression' : 'C: ThisExpression')": 5,
    "(('A: CallExpression' < 0) || ('B: CallExpression' > 'C: number'))": 5,
    "('A: Identifier' * ('B: number' * ('C: BinaryExpression' + 'D: number')))": 5,
    "('A: number' * (('B: number' * 'C: number') + 'D: number'))": 5,
    "((typeof('A: Identifier') !== 'undefined') && ('B: MemberExpression' != null))": 5,
    "((1 === 'A: CallExpression') ? 'B: string' : ((1 === 'C: Identifier') ? 'D: string' : ('E: BinaryExpression' ? 'F: string' : 'G: ConditionalExpression')))": 5,
    "!((('A: LogicalExpression' && 'B: BinaryExpression') || ('C: LogicalExpression' && 'D: BinaryExpression')))": 5,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: Identifier' >= 0)) || (('D: BinaryExpression' && 'E: BinaryExpression') && ('F: Identifier' <= 0)))": 5,
    "((('A: Identifier' >= 0) && ('B: Identifier' >= 0)) && ('C: Identifier' >= 0))": 5,
    "(('A: Identifier' >= 0) && ('B: Identifier' >= 0))": 5,
    "((('A: BinaryExpression' && 'B: ArrayExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || (('E: Identifier' <= 1) && 'F: ArrayExpression'))": 5,
    "((('A: Identifier' <= 'B: MemberExpression') && 'C: ArrayExpression') || (('D: Identifier' < 'E: MemberExpression') && 'F: ArrayExpression'))": 5,
    "(('A: Identifier' <= 'B: MemberExpression') && 'C: ArrayExpression')": 5,
    "((('A: Identifier' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || (('E: Identifier' <= 1) && 'F: ArrayExpression'))": 5,
    "(+('A: Identifier') > 0)": 5,
    "(('A: MemberExpression' != null) && ('B: MemberExpression' == null))": 5,
    "((('A: Identifier' > 0) - ('B: Identifier' < 0)) || +('C: Identifier'))": 5,
    "(('A: Identifier' > 0) - ('B: Identifier' < 0))": 5,
    "(('A: Identifier' < 0) ? 'B: string' : '')": 5,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: LogicalExpression' ? 'D: string' : '')) + ('E: Identifier' ? ('F: BinaryExpression' + 'G: string') : ''))": 5,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: Identifier' ? 'D: BinaryExpression' : '')) + (('E: LogicalExpression' || 'F: Identifier') ? 'G: string' : ''))": 5,
    "((('A: Identifier' + 'B: string') + ('C: Identifier' ? 'D: BinaryExpression' : '')) + ('E: Identifier' ? ('F: BinaryExpression' + 'G: string') : ''))": 5,
    "(('A: Identifier' + 'B: string') + ('C: Identifier' ? ('D: BinaryExpression' + 'E: string') : ''))": 5,
    "((('A: Identifier' || 'B: Identifier') || 'C: Identifier') ? 'D: string' : '')": 5,
    "(!(1) !== 'A: MemberExpression')": 5,
    "(('A: Identifier' !== 0) || ((1 / 'B: Identifier') === (1 / 'C: Identifier')))": 5,
    "((1 / 'A: Identifier') === (1 / 'B: Identifier'))": 5,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + (('D: string' + 'E: Identifier') + 'F: string'))": 5,
    "('A: Identifier' && 'B: string')": 5,
    "((('A: BinaryExpression' && 'B: MemberExpression') && 'C: Identifier') && ('D: MemberExpression' !== 'E: Identifier'))": 5,
    "((('A: UnaryExpression' === 'string') && 'B: MemberExpression') && 'C: Identifier')": 5,
    "(('A: TemplateLiteral' + 'B: TemplateLiteral') + 'C: string')": 5,
    "(('A: MemberExpression' - 'B: Identifier') + 'C: Identifier')": 5,
    "(('A: string' === 'B: Identifier') ? 'C: CallExpression' : 'D: CallExpression')": 5,
    "((('A: Identifier' !== 'B: string') && ('C: Identifier' !== 'D: string')) && ('E: Identifier' !== 'F: string'))": 5,
    "(!('A: Identifier') && ('B: MemberExpression' !== false))": 5,
    "(('A: string' + 'B: TemplateLiteral') + 'C: string')": 5,
    "('A: string' + 'B: TemplateLiteral')": 5,
    "('A: MemberExpression' === ('B: string' + 'C: CallExpression'))": 5,
    "((typeof('A: Identifier') === \"undefined\") ? \"undefined\" : 'B: CallExpression')": 5,
    "(('A: MemberExpression' > 'B: MemberExpression') ? 'C: Identifier' : 'D: Identifier')": 5,
    "('A: Identifier' && (typeof('B: MemberExpression') === 'function'))": 4,
    "(('A: Identifier' && 'B: MemberExpression') ? 'C: Identifier' : 'D: NewExpression')": 4,
    "('A: MemberExpression' % 1)": 4,
    "((('A: Identifier' >= 'B: Identifier') || 'C: Identifier') || 'D: Identifier')": 4,
    "(('A: Identifier' >= 'B: Identifier') || 'C: Identifier')": 4,
    "('A: CallExpression' && ('B: CallExpression' >= 0))": 4,
    "((-(1) === 'A: Identifier') ? 'B: MemberExpression' : 'C: Identifier')": 4,
    "(('A: MemberExpression' > 0) ? 'B: Identifier' : 'C: Identifier')": 4,
    "('A: Identifier' ? 'B: Identifier' : ('C: Identifier' || 'D: Identifier'))": 4,
    "('A: AssignmentExpression' < 'B: MemberExpression')": 4,
    "((('A: Identifier' + 1) < 'B: MemberExpression') && 'C: CallExpression')": 4,
    "(('A: Identifier' << 1) + 1)": 4,
    "((('A: Identifier' + 1) >> 1) - 1)": 4,
    "(('A: Identifier' + 1) >> 1)": 4,
    "(('A: MemberExpression' < 'B: number') && (typeof('C: Identifier') === 'function'))": 4,
    "(('A: Identifier' && ('B: UpdateExpression' < 'C: MemberExpression')) && (('D: UnaryExpression' != 'function') || 'E: CallExpression'))": 4,
    "((typeof('A: MemberExpression') != 'function') || 'B: CallExpression')": 4,
    "(typeof('A: MemberExpression') != 'function')": 4,
    "((typeof('A: MemberExpression') === 'function') ? 'B: MemberExpression' : 'C: CallExpression')": 4,
    "((typeof('A: Identifier') === 'number') || (typeof('B: Identifier') === 'string'))": 4,
    "(('A: MemberExpression' < ('B: Identifier' - 1)) || (null == 'C: Identifier'))": 4,
    "('A: MemberExpression' < ('B: Identifier' - 1))": 4,
    "('A: Identifier' ? null : 'B: ObjectExpression')": 4,
    "((('A: UnaryExpression' == \"function\") && 'B: MemberExpression') ? 'C: CallExpression' : 'D: CallExpression')": 4,
    "('A: number' > 'B: MemberExpression')": 4,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: AssignmentExpression')": 4,
    "((typeof('A: Identifier') == 'object') && 'B: Identifier')": 4,
    "(0 == ('A: Identifier' % 1))": 4,
    "(('A: Identifier' > 'B: Identifier') ? 'C: Identifier' : 'D: Identifier')": 4,
    "((('A: BinaryExpression' + 'B: string') + 'C: Identifier') + 'D: Identifier')": 4,
    "('A: Identifier' === ('B: Identifier' | 0))": 4,
    "((('A: Identifier' + 'B: string') + 'C: string') + 'D: Identifier')": 4,
    "(('A: MemberExpression' === 'B: string') && 'C: MemberExpression')": 4,
    "((0 === 'A: CallExpression') && (0 === 'B: CallExpression'))": 4,
    "((typeof('A: Identifier') === 'function') && ('B: Identifier' instanceof 'C: Identifier'))": 4,
    "((typeof('A: Identifier') !== 'undefined') && (typeof('B: Identifier') !== 'undefined'))": 4,
    "((typeof('A: Identifier') !== 'undefined') && 'B: Identifier')": 4,
    "(('A: Identifier' !== 'B: Identifier') && ('C: CallExpression' === 'D: CallExpression'))": 4,
    "((typeof('A: Identifier') !== 'undefined') ? 'B: Identifier' : 'C: Identifier')": 4,
    "('A: Identifier' ? 'B: CallExpression' : true)": 4,
    "((\"undefined\" != typeof('A: Identifier')) && 'B: MemberExpression')": 4,
    "('A: Identifier' && (typeof('B: Identifier') == \"function\"))": 4,
    "('A: MemberExpression' ? 'B: CallExpression' : 'C: AssignmentExpression')": 4,
    "('A: CallExpression' ? 'B: ObjectExpression' : 'C: ObjectExpression')": 4,
    "('A: CallExpression' ? 'B: CallExpression' : ('C: CallExpression' ? 'D: CallExpression' : 'E: Identifier'))": 4,
    "('A: Identifier' ? ('B: string' + 'C: Identifier') : \"\")": 4,
    "((typeof('A: Identifier') === \"object\") && ('B: Identifier' !== null))": 4,
    "('A: string' + ('B: MemberExpression' || 'C: string'))": 4,
    "(('A: Identifier' === 'B: Identifier') && !('C: Identifier'))": 4,
    "('A: MemberExpression' <= 0)": 4,
    "(1 << 'A: number')": 4,
    "('A: CallExpression' != 0)": 4,
    "(('A: MemberExpression' & 'B: Identifier') > 0)": 4,
    "('A: CallExpression' && !('B: MemberExpression'))": 4,
    "('A: Identifier' < ('B: MemberExpression' - 1))": 4,
    "((typeof('A: Identifier') === \"object\") || (typeof('B: Identifier') === \"function\"))": 4,
    "((('A: string' + 'B: Identifier') + 'C: string') + 'D: string')": 4,
    "(('A: string' + 'B: string') + 'C: CallExpression')": 4,
    "(('A: MemberExpression' === 1) && ('B: MemberExpression' === 'C: string'))": 4,
    "((('A: UnaryExpression' != \"object\") && ('B: UnaryExpression' != \"function\")) || (null === 'C: Identifier'))": 4,
    "((typeof('A: Identifier') != \"object\") && (typeof('B: Identifier') != \"function\"))": 4,
    "(typeof('A: Identifier') != \"object\")": 4,
    "(null === 'A: CallExpression')": 4,
    "(('A: Identifier' >= 'B: number') ? 'C: NewExpression' : (('D: Identifier' >= 'E: number') ? 'F: NewExpression' : ('G: BinaryExpression' ? 'H: NewExpression' : 'I: ConditionalExpression')))": 4,
    "('A: MemberExpression' || 1)": 4,
    "((('A: string' + 'B: Identifier') + 'C: Identifier') + 'D: string')": 4,
    "('A: number' != 'B: Identifier')": 4,
    "(('A: string' == 'B: Identifier') && 'C: CallExpression')": 4,
    "((+('A: Identifier') || 0) | 0)": 4,
    "(('A: MemberExpression' * 'B: number') | 0)": 4,
    "('A: MemberExpression' !== true)": 4,
    "('A: CallExpression' < ('B: number' * 'C: Identifier'))": 4,
    "('A: MemberExpression' !== void(0))": 4,
    "('A: MemberExpression' | 'B: number')": 4,
    "((typeof('A: Identifier') !== \"undefined\") && (typeof('B: MemberExpression') === \"string\"))": 4,
    "((('A: string' + 'B: CallExpression') + 'C: string') + 'D: MemberExpression')": 4,
    "(typeof('A: MemberExpression') === \"boolean\")": 4,
    "(!('A: Identifier') || ('B: MemberExpression' === 0))": 4,
    "('A: string' + ('B: Identifier' - 1))": 4,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + 'C: string') + 'D: CallExpression')": 4,
    "('A: MemberExpression' ? 'B: MemberExpression' : (('C: BinaryExpression' + 'D: string') + 'E: MemberExpression'))": 4,
    "('A: Identifier' ? (('B: string' + 'C: MemberExpression') + 'D: string') : 'E: string')": 4,
    "(('A: Identifier' < 0) ? 'B: CallExpression' : 'C: CallExpression')": 4,
    "!((('A: UnaryExpression' === 'string') && ('B: UnaryExpression' === 'string')))": 4,
    "((typeof('A: Identifier') === 'string') && (typeof('B: Identifier') === 'string'))": 4,
    "('A: MemberExpression' && ('B: MemberExpression' === 'C: MemberExpression'))": 4,
    "('A: Identifier' && (typeof('B: Identifier') === 'object'))": 4,
    "!((('A: Identifier' != null) && 'B: MemberExpression'))": 4,
    "(('A: Identifier' < 'B: Identifier') && 'C: CallExpression')": 4,
    "(('A: NewExpression' - 'B: Identifier') < 'C: Identifier')": 4,
    "((('A: BinaryExpression' + 'B: string') + ('C: Identifier' ? '' : 'D: string')) + 'E: string')": 4,
    "((('A: string' + 'B: Identifier') + 'C: string') + ('D: Identifier' ? '' : 'E: string'))": 4,
    "((!('A: Identifier') && 'B: Identifier') && 'C: MemberExpression')": 4,
    "!(('A: string' in 'B: MemberExpression'))": 4,
    "(('A: string' === 'B: Identifier') ? ('C: Identifier' ? 'D: string' : 'E: string') : (('F: string' === 'G: Identifier') ? ('H: Identifier' ? 'I: string' : 'J: string') : ('K: BinaryExpression' + 'L: SequenceExpression')))": 4,
    "((0 === 'A: Identifier') ? ('B: Identifier' + 'C: string') : ((0 == 'D: Identifier') ? ('E: Identifier' + 'F: string') : ('G: LogicalExpression' ? 'H: BinaryExpression' : 'I: ConditionalExpression')))": 4,
    "((0 == 'A: Identifier') ? ('B: Identifier' + 'C: string') : (('D: BinaryExpression' && 'E: BinaryExpression') ? ('F: Identifier' + 'G: string') : ('H: BinaryExpression' ? 'I: BinaryExpression' : 'J: ConditionalExpression')))": 4,
    "((('A: number' < 'B: Identifier') && ('C: Identifier' < 'D: number')) ? ('E: Identifier' + 'F: string') : ((1 == 'G: Identifier') ? ('H: Identifier' + 'I: string') : ('J: BinaryExpression' ? 'K: BinaryExpression' : 'L: ConditionalExpression')))": 4,
    "((1 == 'A: Identifier') ? ('B: Identifier' + 'C: string') : (('D: number' == 'E: Identifier') ? ('F: Identifier' + 'G: string') : ('H: LogicalExpression' ? 'I: BinaryExpression' : 'J: BinaryExpression')))": 4,
    "(('A: number' == 'B: Identifier') ? ('C: Identifier' + 'D: string') : (('E: BinaryExpression' || 'F: BinaryExpression') ? ('G: Identifier' + 'H: string') : ('I: Identifier' + 'J: string')))": 4,
    "((('A: number' == 'B: Identifier') || ('C: number' == 'D: Identifier')) ? ('E: Identifier' + 'F: string') : ('G: Identifier' + 'H: string'))": 4,
    "((('A: LogicalExpression' || 'B: LogicalExpression') || ('C: string' === 'D: Identifier')) ? ('E: Identifier' + 'F: number') : 'G: Identifier')": 4,
    "((('A: string' === 'B: Identifier') && ('C: number' <= 'D: Identifier')) || (('E: string' === 'F: Identifier') && ('G: Identifier' < 'H: number')))": 4,
    "('A: Identifier' + (('B: BinaryExpression' && 'C: BinaryExpression') ? ('D: BinaryExpression' ? 'E: string' : 'F: ConditionalExpression') : 'G: string'))": 4,
    "((('A: string' !== 'B: Identifier') && ('C: string' !== 'D: Identifier')) ? ((1 === 'E: Identifier') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: ConditionalExpression')) : 'J: string')": 4,
    "((1 < 'A: Identifier') && ('B: Identifier' < 'C: number'))": 4,
    "(1 != ~(~('A: BinaryExpression')))": 4,
    "(((\"undefined\" != 'A: UnaryExpression') && ('B: Identifier' instanceof 'C: Identifier')) || ('D: string' === 'E: CallExpression'))": 4,
    "((\"undefined\" != typeof('A: Identifier')) && ('B: Identifier' instanceof 'C: Identifier'))": 4,
    "('A: Identifier' + ((1 === 'B: Identifier') ? 'C: string' : ('D: BinaryExpression' ? 'E: string' : 'F: string')))": 4,
    "((1 === 'A: Identifier') ? 'B: string' : (('C: number' == 'D: BinaryExpression') ? 'E: string' : 'F: string'))": 4,
    "(('A: number' == ('B: Identifier' % 'C: number')) ? 'D: string' : 'E: string')": 4,
    "(('A: string' === 'B: Identifier') ? (('C: number' < 'D: Identifier') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: string' === 'I: Identifier') ? ('J: Identifier' + 'K: number') : void(0)))": 4,
    "(('A: number' < 'B: Identifier') ? 'C: Identifier' : ('D: Identifier' + 'E: number'))": 4,
    "('A: number' !== 'B: Identifier')": 4,
    "('A: CallExpression' ? ('B: Identifier' + ('C: LogicalExpression' ? 'D: string' : 'E: string')) : ('F: Identifier' + 'G: string'))": 4,
    "('A: CallExpression' ? ('B: Identifier' ? ('C: Identifier' + 'D: string') : ('E: Identifier' + 'F: ConditionalExpression')) : ('G: Identifier' ? ('H: Identifier' + 'I: string') : ('J: Identifier' + 'K: ConditionalExpression')))": 4,
    "((!(0) === 'A: Identifier') ? 'B: string' : 'C: string')": 4,
    "(((1 == 'A: BinaryExpression') && ('B: BinaryExpression' != 'C: number')) ? 'D: MemberExpression' : 'E: MemberExpression')": 4,
    "((1 === 'A: Identifier') ? ('B: Identifier' ? 'C: string' : 'D: string') : (('E: number' === 'F: Identifier') ? ('G: LogicalExpression' ? 'H: string' : 'I: string') : ('J: BinaryExpression' ? 'K: ConditionalExpression' : 'L: ConditionalExpression')))": 4,
    "((1 === 'A: Identifier') ? (('B: Identifier' || 'C: Identifier') ? 'D: string' : 'E: string') : (('F: number' === 'G: Identifier') ? ('H: LogicalExpression' ? 'I: string' : 'J: string') : ('K: BinaryExpression' ? 'L: ConditionalExpression' : 'M: ConditionalExpression')))": 4,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: BinaryExpression' || 'D: BinaryExpression')) ? ((1 == 'E: BinaryExpression') ? 'F: MemberExpression' : 'G: MemberExpression') : 'H: MemberExpression')": 4,
    "(((1 <= 'A: BinaryExpression') && ('B: BinaryExpression' <= 'C: number')) && (('D: BinaryExpression' < 'E: number') || ('F: number' <= 'G: BinaryExpression')))": 4,
    "((1 <= ('A: Identifier' % 'B: number')) && (('C: Identifier' % 'D: number') <= 'E: number'))": 4,
    "(1 <= ('A: Identifier' % 'B: number'))": 4,
    "((1 == ('A: Identifier' % 'B: number')) ? 'C: MemberExpression' : 'D: MemberExpression')": 4,
    "(('A: MemberExpression' === 1) ? (('B: BinaryExpression' && 'C: Identifier') ? 'D: string' : ('E: LogicalExpression' ? 'F: MemberExpression' : 'G: MemberExpression')) : 'H: SequenceExpression')": 4,
    "((('A: string' === 'B: Identifier') && 'C: Identifier') ? 'D: string' : (('E: Identifier' || 'F: Identifier') ? 'G: MemberExpression' : 'H: MemberExpression'))": 4,
    "((('A: BinaryExpression' && 'B: Identifier') && ('C: string' === 'D: Identifier')) ? ('E: Identifier' + 'F: string') : (('G: Identifier' + 'H: string') + 'I: Identifier'))": 4,
    "(((\"\" !== 'A: Identifier') ? 'B: string' : \"\") + 'C: MemberExpression')": 4,
    "((\"\" !== 'A: Identifier') ? 'B: string' : \"\")": 4,
    "(\"\" !== 'A: Identifier')": 4,
    "((-(1) !== 'A: CallExpression') ? ('B: CallExpression' + 'C: string') : (('D: UnaryExpression' !== 'E: CallExpression') ? ('F: CallExpression' + 'G: string') : ('H: BinaryExpression' ? 'I: BinaryExpression' : 'J: BinaryExpression')))": 4,
    "((-(1) !== 'A: CallExpression') ? ('B: CallExpression' + 'C: string') : (('D: UnaryExpression' !== 'E: CallExpression') ? ('F: CallExpression' + 'G: string') : ('H: Identifier' + 'I: string')))": 4,
    "((-(1) !== 'A: CallExpression') ? ('B: CallExpression' + 'C: string') : ('D: Identifier' + 'E: string'))": 4,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: LogicalExpression' && 'D: BinaryExpression')) ? 'E: Identifier' : ('F: Identifier' + 'G: number'))": 4,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) || (('E: BinaryExpression' && 'F: BinaryExpression') && ('G: number' <= 'H: Identifier')))": 4,
    "((('A: string' !== 'B: Identifier') && ('C: string' !== 'D: Identifier')) && ('E: number' <= 'F: Identifier'))": 4,
    "((null != 'A: Identifier') ? 'B: SequenceExpression' : 'C: CallExpression')": 4,
    "((typeof('A: Identifier') == \"string\") && 'B: AssignmentExpression')": 4,
    "((null != 'A: Identifier') ? 'B: AssignmentExpression' : 'C: AssignmentExpression')": 4,
    "('A: number' < 'B: CallExpression')": 4,
    "((('A: Identifier' < 'B: number') && (0 <= 'C: Identifier')) ? 'D: SequenceExpression' : 'E: AssignmentExpression')": 4,
    "(('A: Identifier' > 'B: CallExpression') ? 'C: SequenceExpression' : 'D: SequenceExpression')": 4,
    "(((\"\" + 'A: CallExpression') + 'B: CallExpression') + 'C: CallExpression')": 4,
    "(('A: MemberExpression' && ('B: UnaryExpression' === 'C: Identifier')) && 'D: AssignmentExpression')": 4,
    "((0 < 'A: MemberExpression') && 'B: CallExpression')": 4,
    "((!(1) === 'A: MemberExpression') && 'B: SequenceExpression')": 4,
    "((('A: UnaryExpression' !== 'B: Identifier') && ('C: UnaryExpression' !== 'D: Identifier')) || 'E: SequenceExpression')": 4,
    "((!(0) !== 'A: Identifier') && (!(1) !== 'B: Identifier'))": 4,
    "((void(0) === 'A: Identifier') ? 'B: MemberExpression' : 'C: SequenceExpression')": 4,
    "((('A: UnaryExpression' === 'B: AssignmentExpression') || ('C: string' === 'D: Identifier')) || !('E: CallExpression'))": 4,
    "((void(0) === 'A: AssignmentExpression') || ('B: string' === 'C: Identifier'))": 4,
    "(void(0) === 'A: AssignmentExpression')": 4,
    "('A: Identifier' + ('B: MemberExpression' ? 0 : ('C: number' * 'D: CallExpression')))": 4,
    "('A: MemberExpression' ? 0 : ('B: number' * 'C: CallExpression'))": 4,
    "(('A: CallExpression' && ('B: LogicalExpression' || 'C: CallExpression')) ? 'D: CallExpression' : 'E: CallExpression')": 4,
    "!(!(('A: LogicalExpression' && 'B: CallExpression')))": 4,
    "(('A: MemberExpression' <= 'B: MemberExpression') ? 1 : -(1))": 4,
    "(\"string\" != typeof('A: Identifier'))": 4,
    "(0 < 'A: CallExpression')": 4,
    "(typeof('A: Identifier') == \"boolean\")": 4,
    "('A: Identifier' ? 'B: MemberExpression' : ('C: CallExpression' ? 'D: MemberExpression' : 'E: MemberExpression'))": 4,
    "(('A: string' === 'B: Identifier') ? (('C: UnaryExpression' !== 'D: AssignmentExpression') ? 'E: Identifier' : null) : (('F: UnaryExpression' !== 'G: AssignmentExpression') ? 'H: Identifier' : null))": 4,
    "((('A: UnaryExpression' !== 'B: AssignmentExpression') || ('C: UnaryExpression' !== 'D: AssignmentExpression')) ? 'E: Identifier' : null)": 4,
    "((typeof('A: Identifier') == \"object\") && 'B: SequenceExpression')": 4,
    "((1 === ('A: CallExpression' % 'B: number')) ? 'C: string' : 'D: string')": 4,
    "(1 === ('A: CallExpression' % 'B: number'))": 4,
    "(('A: CallExpression' === 'B: CallExpression') && ('C: CallExpression' === 'D: CallExpression'))": 4,
    "(('A: Identifier' < 'B: number') ? ('C: string' + 'D: CallExpression') : 'E: Identifier')": 4,
    "(('A: Identifier' > 0) ? 'B: CallExpression' : 'C: CallExpression')": 4,
    "('A: Identifier' - ('B: number' * 'C: Identifier'))": 4,
    "(('A: number' - 'B: MemberExpression') / 'C: number')": 4,
    "(('A: number' / ('B: number' * 'C: number')) < 'D: CallExpression')": 4,
    "('A: CallExpression' < ('B: number' / ('C: number' * 'D: number')))": 4,
    "(('A: number' / ('B: number' * 'C: BinaryExpression')) < 'D: CallExpression')": 4,
    "('A: CallExpression' < ('B: number' / ('C: number' * 'D: BinaryExpression')))": 4,
    "('A: number' * ('B: number' * ('C: number' + 'D: MemberExpression')))": 4,
    "(-('A: number') / 'B: number')": 4,
    "('A: Identifier' === ('B: Identifier' + 1))": 4,
    "('A: MemberExpression' === 'B: CallExpression')": 4,
    "('A: TemplateLiteral' + 'B: CallExpression')": 4,
    "(('A: CallExpression' && !('B: CallExpression')) && 'C: AssignmentExpression')": 4,
    "((void(0) === 'A: MemberExpression') && 'B: AssignmentExpression')": 4,
    "((('A: TemplateLiteral' + 'B: TemplateLiteral') + 'C: string') + 'D: string')": 4,
    "((('A: TemplateLiteral' + 'B: string') + 'C: string') + 'D: string')": 4,
    "(('A: MemberExpression' && 'B: MemberExpression') && 'C: MemberExpression')": 4,
    "(('A: string' === 'B: Identifier') ? 'C: ArrayExpression' : 'D: ArrayExpression')": 4,
    "(('A: MemberExpression' !== 'B: string') && ('C: MemberExpression' !== 'D: string'))": 4,
    "((('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: string'))": 4,
    "(('A: MemberExpression' === 'B: string') && !('C: MemberExpression'))": 4,
    "(('A: Identifier' + 'B: Identifier') > 'C: Identifier')": 4,
    "(('A: Identifier' != null) ? 'B: TemplateLiteral' : null)": 4,
    "(('A: CallExpression' - 'B: Identifier') >= 'C: Identifier')": 4,
    "((null === 'A: Identifier') || 'B: Identifier')": 4,
    "((typeof('A: Identifier') == \"function\") ? 'B: CallExpression' : (('C: LogicalExpression' && 'D: CallExpression') && 'E: AssignmentExpression'))": 4,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && 'C: CallExpression') && 'D: AssignmentExpression')": 4,
    "(((null != 'A: Identifier') && ('B: UnaryExpression' == \"object\")) && 'C: CallExpression')": 4,
    "((null != 'A: Identifier') && (typeof('B: Identifier') == \"object\"))": 4,
    "((void(0) === 'A: Identifier') ? 'B: string' : 'C: Identifier')": 4,
    "((-(1) === 'A: Identifier') || 'B: Identifier')": 4,
    "((void(0) !== 'A: Identifier') ? 'B: CallExpression' : 'C: Identifier')": 4,
    "('A: MemberExpression' && (null != 'B: MemberExpression'))": 4,
    "(('A: Identifier' > 0) && 'B: Identifier')": 4,
    "('A: Identifier' ? 'B: string' : void(0))": 4,
    "(('A: Identifier' && !('B: CallExpression')) && 'C: SequenceExpression')": 4,
    "(('A: string' === 'B: Identifier') ? 'C: SequenceExpression' : 'D: SequenceExpression')": 4,
    "((('A: BinaryExpression' ? 'B: MemberExpression' : 0) >= 'C: Identifier') ? 'D: CallExpression' : 'E: CallExpression')": 4,
    "((('A: Identifier' > 0) ? 'B: MemberExpression' : 0) >= 'C: Identifier')": 4,
    "(('A: Identifier' < 'B: Identifier') ? 'C: AssignmentExpression' : (('D: Identifier' > 'E: Identifier') && 'F: AssignmentExpression'))": 4,
    "(('A: Identifier' > 'B: Identifier') && 'C: AssignmentExpression')": 4,
    "(('A: Identifier' > 0) ? ('B: Identifier' - 1) : 0)": 4,
    "((('A: MemberExpression' - 'B: Identifier') + 'C: Identifier') + 'D: MemberExpression')": 4,
    "(('A: MemberExpression' - 'B: Identifier') + 'C: MemberExpression')": 4,
    "((('A: Identifier' >= 'B: Identifier') && ('C: Identifier' <= 'D: Identifier')) ? 'E: Identifier' : (('F: Identifier' < 'G: Identifier') ? 'H: Identifier' : 'I: Identifier'))": 4,
    "((typeof('A: Identifier') !== 'undefined') && (typeof('B: MemberExpression') !== 'undefined'))": 4,
    "('A: Identifier' && ('B: MemberExpression' != null))": 4,
    "(('A: Identifier' != null) || ('B: Identifier' != null))": 4,
    "((typeof('A: Identifier') === 'string') ? ('B: string' === 'C: Identifier') : true)": 4,
    "((('A: Identifier' in 'B: Identifier') && ('C: MemberExpression' !== 'D: MemberExpression')) && !('E: CallExpression'))": 4,
    "(('A: Identifier' in 'B: Identifier') && ('C: MemberExpression' !== 'D: MemberExpression'))": 4,
    "(!('A: Identifier') || ('B: MemberExpression' === void(0)))": 4,
    "((null == 'A: Identifier') ? '' : ('' + 'B: Identifier'))": 4,
    "(('A: Identifier' >= 0) ? ('B: Identifier' + 'C: Identifier') : -(1))": 4,
    "((('A: UnaryExpression' == 'number') && ('B: Identifier' >= 0)) && ('C: Identifier' <= 'D: Identifier'))": 4,
    "((typeof('A: Identifier') == 'number') && ('B: Identifier' >= 0))": 4,
    "((typeof('A: Identifier') !== 'undefined') ? 'B: MemberExpression' : null)": 4,
    "((typeof('A: Identifier') != 'number') || 'B: Identifier')": 4,
    "(typeof('A: Identifier') != 'number')": 4,
    "(('A: Identifier' !== void(0)) && ('B: Identifier' !== -(1)))": 4,
    "(((true === 'A: Identifier') || (false === 'B: Identifier')) || ('C: string' === 'D: CallExpression'))": 4,
    "((('A: Identifier' != null) && 'B: CallExpression') && 'C: CallExpression')": 4,
    "!(!(('A: Identifier' && 'B: BinaryExpression')))": 4,
    "!(('A: Identifier' && ('B: MemberExpression' === 1)))": 4,
    "('A: Identifier' && ('B: MemberExpression' === 1))": 4,
    "((typeof('A: Identifier') == 'number') && (('B: CallExpression' || 'C: CallExpression') || 'D: CallExpression'))": 4,
    "((('A: Identifier' !== 'function') && ('B: Identifier' !== 'object')) && (typeof('C: Identifier') != 'object'))": 4,
    "(('A: Identifier' !== 'function') && ('B: Identifier' !== 'object'))": 4,
    "('A: Identifier' !== 'function')": 4,
    "(('' + 'A: Identifier') === ('' + 'B: Identifier'))": 4,
    "((+('A: Identifier') === 0) ? ((1 / 'B: UnaryExpression') === (1 / 'C: Identifier')) : (+('D: Identifier') === +('E: Identifier')))": 4,
    "(+('A: Identifier') === 0)": 4,
    "((1 / +('A: Identifier')) === (1 / 'B: Identifier'))": 4,
    "((typeof('A: Identifier') != 'object') || (typeof('B: Identifier') != 'object'))": 4,
    "((('A: Identifier' !== 'B: Identifier') && !('C: LogicalExpression')) && (('D: string' in 'E: Identifier') && ('F: string' in 'G: Identifier')))": 4,
    "((('A: UnaryExpression' != 'function') && ('B: UnaryExpression' != 'object')) && (typeof('C: Identifier') != 'function'))": 4,
    "((typeof('A: object') != 'function') && (typeof('B: Identifier') != 'object'))": 4,
    "(typeof('A: object') != 'function')": 4,
    "((typeof('A: Identifier') == 'function') || false)": 4,
    "(('function' === 'A: Identifier') || (('object' === 'B: Identifier') && !('C: UnaryExpression')))": 4,
    "(('object' === 'A: Identifier') && !(!('B: Identifier')))": 4,
    "(('A: Identifier' != null) && ('B: Identifier' > 'C: Identifier'))": 4,
    "(('A: Identifier' > 'B: Identifier') || (('C: UnaryExpression' === 'D: Identifier') && ('E: UnaryExpression' === 'F: Identifier')))": 4,
    "((-('A: Identifier') === 'B: Identifier') && (-('C: Identifier') === 'D: Identifier'))": 4,
    "('' + ('A: Identifier' ? 'B: CallExpression' : 'C: Identifier'))": 4,
    "(('A: Identifier' != null) && ('B: Identifier' < 'C: Identifier'))": 4,
    "(('A: Identifier' < 'B: Identifier') || (('C: Identifier' === 'D: Identifier') && ('E: Identifier' === 'F: Identifier')))": 4,
    "(('A: MemberExpression' === false) ? 0 : 'B: CallExpression')": 4,
    "(!('A: Identifier') && ('B: MemberExpression' === false))": 4,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) && ('E: MemberExpression' === 0))": 4,
    "(!('A: Identifier') || ('B: Identifier' !== 'C: Identifier'))": 4,
    "('A: UpdateExpression' + '')": 4,
    "((('A: string' + 'B: string') + 'C: MemberExpression') + 'D: string')": 4,
    "(('A: string' + 'B: string') + 'C: MemberExpression')": 4,
    "('A: Identifier' >= ('B: MemberExpression' / 'C: number'))": 4,
    "('A: MemberExpression' || !('B: CallExpression'))": 4,
    "((('A: UnaryExpression' === 'object') && ('B: UnaryExpression' !== 'undefined')) ? 'C: CallExpression' : (('D: BinaryExpression' && 'E: MemberExpression') ? 'F: CallExpression' : 'G: CallExpression'))": 3,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: MemberExpression' >= 0)) && (0 === ('D: MemberExpression' % 1)))": 3,
    "(('A: Identifier' && ('B: UnaryExpression' === 'number')) && ('C: MemberExpression' >= 0))": 3,
    "('A: Identifier' && (typeof('B: MemberExpression') === 'number'))": 3,
    "(0 === ('A: MemberExpression' % 1))": 3,
    "((('A: Identifier' !== 'B: UnaryExpression') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: string'))": 3,
    "(('A: Identifier' !== -(1)) && ('B: MemberExpression' === 'C: string'))": 3,
    "('A: Identifier' || (false === 'B: Identifier'))": 3,
    "(('A: Identifier' > 0) && 'B: CallExpression')": 3,
    "(('A: MemberExpression' <= 'B: number') && (typeof('C: Identifier') === 'function'))": 3,
    "((('A: UnaryExpression' == \"object\") && (\"undefined\" != 'B: UnaryExpression')) ? 'C: CallExpression' : (('D: BinaryExpression' && 'E: MemberExpression') ? 'F: CallExpression' : 'G: CallExpression'))": 3,
    "(1 < 'A: MemberExpression')": 3,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: ObjectExpression')": 3,
    "((typeof('A: Identifier') == \"function\") && 'B: Identifier')": 3,
    "((typeof('A: Identifier') == \"object\") && (typeof('B: MemberExpression') == \"function\"))": 3,
    "('A: Identifier' in 'B: CallExpression')": 3,
    "('A: CallExpression' && ('B: Identifier' != 'C: string'))": 3,
    "(('A: Identifier' === 'B: Identifier') ? 'C: CallExpression' : 'D: CallExpression')": 3,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: Identifier') + 'D: string')": 3,
    "((null == 'A: Identifier') ? 'B: Identifier' : 'C: MemberExpression')": 3,
    "((typeof('A: Identifier') !== 'function') && (typeof('B: Identifier') === 'object'))": 3,
    "(('A: Identifier' + 'B: Identifier') <= 'C: Identifier')": 3,
    "('A: MemberExpression' != \"null\")": 3,
    "('A: AssignmentExpression' ? 'B: Identifier' : (('C: BinaryExpression' && 'D: BinaryExpression') ? 'E: CallExpression' : ('F: LogicalExpression' ? 'G: CallExpression' : 'H: CallExpression')))": 3,
    "((('A: string' <= 'B: Identifier') && ('C: Identifier' <= 'D: string')) ? 'E: CallExpression' : (('F: BinaryExpression' || 'G: BinaryExpression') ? 'H: CallExpression' : 'I: CallExpression'))": 3,
    "(('A: string' <= 'B: Identifier') && ('C: Identifier' <= 'D: string'))": 3,
    "('A: string' <= 'B: Identifier')": 3,
    "('A: Identifier' <= 'B: string')": 3,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) ? 'E: CallExpression' : 'F: CallExpression')": 3,
    "((('A: Identifier' < 'B: number') ? 'C: string' : 'D: string') + 'E: CallExpression')": 3,
    "((('A: BinaryExpression' < 'B: Identifier') && ('C: MemberExpression' === 'D: string')) ? 'E: SequenceExpression' : 'F: AssignmentExpression')": 3,
    "((('A: Identifier' + 'B: number') < 'C: Identifier') && ('D: MemberExpression' === 'E: string'))": 3,
    "(('A: Identifier' + 'B: number') < 'C: Identifier')": 3,
    "((('A: Identifier' < 'B: number') || ('C: Identifier' > 'D: number')) || 'E: SequenceExpression')": 3,
    "(('A: MemberExpression' - 'B: MemberExpression') || ('C: MemberExpression' - 'D: MemberExpression'))": 3,
    "(('A: MemberExpression' <= ('B: MemberExpression' + 1)) ? 'C: AssignmentExpression' : 'D: CallExpression')": 3,
    "('A: MemberExpression' <= ('B: MemberExpression' + 1))": 3,
    "(('A: MemberExpression' > 'B: MemberExpression') && 'C: SequenceExpression')": 3,
    "((('A: MemberExpression' + 1) > 'B: MemberExpression') && 'C: CallExpression')": 3,
    "(('A: MemberExpression' + 1) > 'B: MemberExpression')": 3,
    "(('A: string' === 'B: Identifier') ? 'C: UpdateExpression' : (('D: LogicalExpression' && 'E: BinaryExpression') && 'F: AssignmentExpression'))": 3,
    "((-(1) === 'A: MemberExpression') && 'B: AssignmentExpression')": 3,
    "(-(1) === 'A: MemberExpression')": 3,
    "(('A: string' === 'B: Identifier') ? 'C: SequenceExpression' : (('D: LogicalExpression' && 'E: BinaryExpression') && 'F: AssignmentExpression'))": 3,
    "(('A: MemberExpression' === void(0)) && 'B: AssignmentExpression')": 3,
    "((('A: MemberExpression' === 'B: string') && ('C: string' !== 'D: MemberExpression')) && 'E: AssignmentExpression')": 3,
    "(('A: MemberExpression' === 'B: string') && ('C: string' !== 'D: MemberExpression'))": 3,
    "((('A: MemberExpression' >= 'B: number') && ('C: string' === 'D: Identifier')) ? 'E: AssignmentExpression' : (('F: Identifier' !== 'G: string') && 'H: AssignmentExpression'))": 3,
    "(('A: MemberExpression' >= 'B: number') && ('C: string' === 'D: Identifier'))": 3,
    "(('A: Identifier' !== 'B: string') && 'C: AssignmentExpression')": 3,
    "('A: Identifier' & -('B: number'))": 3,
    "('A: AssignmentExpression' && !(('B: Identifier' && 'C: BinaryExpression')))": 3,
    "(('A: MemberExpression' >= 'B: number') && ('C: string' === 'D: CallExpression'))": 3,
    "!(('A: Identifier' && ('B: UnaryExpression' === \"string\")))": 3,
    "('A: Identifier' && (typeof('B: MemberExpression') === \"string\"))": 3,
    "('A: MemberExpression' ? 'B: CallExpression' : ('C: MemberExpression' ? 'D: CallExpression' : 'E: CallExpression'))": 3,
    "('A: Identifier' && ('B: MemberExpression' ? 'C: SequenceExpression' : 'D: CallExpression'))": 3,
    "(('A: Identifier' > 1) ? 'B: CallExpression' : 'C: CallExpression')": 3,
    "('A: AssignmentExpression' && ('B: MemberExpression' === 1))": 3,
    "(('A: Identifier' === ('B: Identifier' | 0)) && 'C: CallExpression')": 3,
    "(('A: Identifier' - 1) | 0)": 3,
    "('A: string' + (('B: Identifier' + 'C: Identifier') % 'D: number'))": 3,
    "('A: CallExpression' ? ('B: MemberExpression' && 'C: CallExpression') : 'D: AssignmentExpression')": 3,
    "(('A: MemberExpression' !== 'B: MemberExpression') ? 'C: SequenceExpression' : 'D: AssignmentExpression')": 3,
    "((('A: Identifier' + 'B: number') <= 'C: Identifier') && ('D: MemberExpression' === 'E: Identifier'))": 3,
    "(('A: Identifier' + 'B: number') <= 'C: Identifier')": 3,
    "(('A: MemberExpression' !== 1) && 'B: AssignmentExpression')": 3,
    "(('A: Identifier' && 'B: MemberExpression') ? 'C: MemberExpression' : 'D: Identifier')": 3,
    "('A: MemberExpression' ? ('B: CallExpression' + 'C: number') : 'D: Identifier')": 3,
    "(('A: Identifier' < 'B: MemberExpression') && ('C: CallExpression' < 'D: Identifier'))": 3,
    "((1 === 'A: Identifier') ? ('B: Identifier' ? 'C: Identifier' : 'D: Identifier') : (('E: number' === 'F: Identifier') ? ('G: CallExpression' ? 'H: Identifier' : 'I: Identifier') : 'J: Identifier'))": 3,
    "(('A: number' === 'B: Identifier') ? ('C: CallExpression' ? 'D: Identifier' : 'E: Identifier') : 'F: Identifier')": 3,
    "('A: AssignmentExpression' && ('B: MemberExpression' === 'C: string'))": 3,
    "(('A: Identifier' === 'B: Identifier') ? void(0) : 'C: Identifier')": 3,
    "((('A: LogicalExpression' || 'B: BinaryExpression') && 'C: MemberExpression') && ('D: CallExpression' >= 0))": 3,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: MemberExpression' === 'D: string')) && 'E: MemberExpression')": 3,
    "('A: AssignmentExpression' ? (('B: MemberExpression' && 'C: MemberExpression') ? +('D: MemberExpression') : !(0)) : !(1))": 3,
    "(('A: MemberExpression' && 'B: MemberExpression') ? +('C: MemberExpression') : !(0))": 3,
    "(('A: Identifier' < 'B: MemberExpression') ? 'C: CallExpression' : ('D: Identifier' && 'E: CallExpression'))": 3,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + 'D: MemberExpression')": 3,
    "((('A: MemberExpression' + 'B: string') + 'C: CallExpression') + 'D: string')": 3,
    "('A: MemberExpression' ? 'B: CallExpression' : 'C: ArrayExpression')": 3,
    "('A: MemberExpression' ? 'B: MemberExpression' : 'C: string')": 3,
    "('A: MemberExpression' == 'B: MemberExpression')": 3,
    "((('A: UnaryExpression' === 'object') && ('B: UnaryExpression' !== 'undefined')) ? 'C: AssignmentExpression' : (('D: BinaryExpression' && 'E: MemberExpression') ? 'F: CallExpression' : 'G: SequenceExpression'))": 3,
    "((('A: UnaryExpression' === 'function') && 'B: MemberExpression') ? 'C: CallExpression' : 'D: SequenceExpression')": 3,
    "((typeof('A: Identifier') !== 'undefined') ? 'B: Identifier' : ('C: Identifier' || 'D: Identifier'))": 3,
    "((('A: BinaryExpression' && 'B: UnaryExpression') && ('C: MemberExpression' !== null)) && !('D: CallExpression'))": 3,
    "((('A: Identifier' !== null) && !('B: CallExpression')) && ('C: MemberExpression' !== null))": 3,
    "('A: CallExpression' !== 'object')": 3,
    "((('A: UnaryExpression' === 'function') && ('B: Identifier' instanceof 'C: Identifier')) || ('D: Identifier' === 'E: CallExpression'))": 3,
    "((typeof('A: Identifier') !== 'undefined') && (('B: BinaryExpression' || 'C: BinaryExpression') || ('D: string' === 'E: Identifier')))": 3,
    "((null === 'A: Identifier') || (typeof('B: Identifier') === 'undefined'))": 3,
    "((!('A: Identifier') || 'B: CallExpression') && !('C: MemberExpression'))": 3,
    "(('A: Identifier' !== false) && 'B: CallExpression')": 3,
    "(('A: Identifier' === 'B: Identifier') || ('C: Identifier' > 'D: MemberExpression'))": 3,
    "(('A: Identifier' !== -(1)) && ('B: Identifier' === 'C: Identifier'))": 3,
    "((('A: Identifier' && 'B: CallExpression') && ('C: MemberExpression' === 'D: string')) && 'E: MemberExpression')": 3,
    "(('A: Identifier' && 'B: CallExpression') && ('C: MemberExpression' === 'D: string'))": 3,
    "('A: MemberExpression' || (('B: UnaryExpression' !== 'undefined') && 'C: Identifier'))": 3,
    "(('A: Identifier' && ('B: UnaryExpression' === 'function')) ? 'C: NewExpression' : 'D: CallExpression')": 3,
    "(('A: Identifier' && !('B: Identifier')) && (typeof('C: Identifier') === 'object'))": 3,
    "(('A: CallExpression' && 'B: CallExpression') || ('C: CallExpression' || ('D: CallExpression' && 'E: AssignmentExpression')))": 3,
    "('A: CallExpression' || ('B: CallExpression' && 'C: AssignmentExpression'))": 3,
    "((true === 'A: Identifier') ? 'B: CallExpression' : ((null === 'C: Identifier') ? 'D: Identifier' : ('E: Identifier' + 'F: string')))": 3,
    "((('A: CallExpression' === 'B: UnaryExpression') ? 'C: string' : 'D: string') + 'E: Identifier')": 3,
    "(('A: CallExpression' === -(1)) ? 'B: string' : 'C: string')": 3,
    "('A: Identifier' ? 'B: MemberExpression' : false)": 3,
    "(('A: MemberExpression' === 'B: string') ? '' : ('C: MemberExpression' || 'D: MemberExpression'))": 3,
    "(!('A: MemberExpression') || !('B: CallExpression'))": 3,
    "((!('A: MemberExpression') || !('B: Identifier')) || 'C: CallExpression')": 3,
    "(!('A: MemberExpression') || !('B: Identifier'))": 3,
    "((('A: UnaryExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) ? 'E: MemberExpression' : 'F: MemberExpression')": 3,
    "((!('A: Identifier') || ('B: string' === 'C: Identifier')) || ('D: string' === 'E: Identifier'))": 3,
    "(('A: MemberExpression' === 0) && !(('B: MemberExpression' && 'C: BinaryExpression')))": 3,
    "!(('A: MemberExpression' && (0 === 'B: CallExpression')))": 3,
    "((typeof('A: MemberExpression') === 'function') && 'B: MemberExpression')": 3,
    "('A: Identifier' && ('B: CallExpression' === -(1)))": 3,
    "((typeof('A: Identifier') !== 'undefined') && ('B: string' === 'C: CallExpression'))": 3,
    "((('A: BinaryExpression' + 'B: string') + 'C: Identifier') + ('D: Identifier' ? ('E: string' + 'F: Identifier') : ''))": 3,
    "((typeof('A: MemberExpression') === 'function') && (false === 'B: CallExpression'))": 3,
    "('A: CallExpression' && ('B: MemberExpression' === true))": 3,
    "((('A: UnaryExpression' == \"object\") && (\"undefined\" != 'B: UnaryExpression')) ? 'C: AssignmentExpression' : (('D: BinaryExpression' && 'E: MemberExpression') ? 'F: CallExpression' : 'G: AssignmentExpression'))": 3,
    "((('A: UnaryExpression' == \"function\") && 'B: MemberExpression') ? 'C: CallExpression' : 'D: AssignmentExpression')": 3,
    "((\"undefined\" != typeof('A: Identifier')) ? 'B: Identifier' : ('C: Identifier' || 'D: Identifier'))": 3,
    "('A: MemberExpression' > -(1))": 3,
    "('A: CallExpression' ? 'B: TemplateLiteral' : 'C: TemplateLiteral')": 3,
    "('A: number' / 'B: Identifier')": 3,
    "((typeof('A: Identifier') !== \"undefined\") ? 'B: Identifier' : 'C: Identifier')": 3,
    "('A: number' + 'B: number')": 3,
    "('A: Identifier' && ('B: MemberExpression' !== 'C: string'))": 3,
    "!('A: UpdateExpression')": 3,
    "('A: Identifier' === ('B: MemberExpression' & 'C: Identifier'))": 3,
    "('A: MemberExpression' === 'B: ThisExpression')": 3,
    "!(!(('A: BinaryExpression' && 'B: LogicalExpression')))": 3,
    "(!('A: MemberExpression') && 'B: CallExpression')": 3,
    "(('A: Identifier' & 'B: Identifier') !== 0)": 3,
    "('A: Identifier' && (typeof('B: MemberExpression') === \"function\"))": 3,
    "(('A: MemberExpression' !== 'B: Identifier') && ('C: MemberExpression' !== 'D: Identifier'))": 3,
    "(typeof('A: Identifier') === \"boolean\")": 3,
    "('A: CallExpression' && ('B: MemberExpression' > 0))": 3,
    "!(('A: MemberExpression' instanceof 'B: Identifier'))": 3,
    "('A: CallExpression' && ('B: CallExpression' !== 'C: string'))": 3,
    "(('A: Identifier' > 0) ? 'B: string' : \"\")": 3,
    "(typeof('A: Identifier') !== \"string\")": 3,
    "(0 === ('A: Identifier' & 'B: number'))": 3,
    "(!('A: MemberExpression') || 'B: Identifier')": 3,
    "((void(0) === 'A: Identifier') ? 0 : 'B: Identifier')": 3,
    "!((0 in 'A: Identifier'))": 3,
    "(0 in 'A: Identifier')": 3,
    "(('A: Identifier' % 'B: number') + 'C: number')": 3,
    "('A: number' * ('B: Identifier' - 'C: number'))": 3,
    "('A: AssignmentExpression' < 0)": 3,
    "(\"string\" === 'A: Identifier')": 3,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: number' == 'D: CallExpression')) && ('E: number' == 'F: CallExpression'))": 3,
    "('A: CallExpression' && 'B: UpdateExpression')": 3,
    "(1 + 'A: Identifier')": 3,
    "(0 > 'A: Identifier')": 3,
    "('A: Identifier' === ('B: MemberExpression' - 'C: number'))": 3,
    "((('A: BinaryExpression' + 'B: BinaryExpression') + 'C: string') + 'D: Identifier')": 3,
    "('A: MemberExpression' && ('B: MemberExpression' === 'C: Identifier'))": 3,
    "((typeof('A: Identifier') !== 'undefined') && (typeof('B: MemberExpression') === 'function'))": 3,
    "(0 == ('A: UpdateExpression' % 'B: Identifier'))": 3,
    "('A: UpdateExpression' % 'B: Identifier')": 3,
    "('A: CallExpression' ? '' : 'B: string')": 3,
    "('A: number' * ('B: MemberExpression' / 'C: MemberExpression'))": 3,
    "('A: MemberExpression' / 'B: MemberExpression')": 3,
    "(('A: number' * 'B: CallExpression') + 'C: number')": 3,
    "('A: Identifier' + ('B: number' * 'C: Identifier'))": 3,
    "(('A: CallExpression' + 'B: string') + 'C: MemberExpression')": 3,
    "('A: Identifier' || 'B: FunctionExpression')": 3,
    "((void(0) === 'A: Identifier') ? 'B: CallExpression' : 'C: CallExpression')": 3,
    "(('A: MemberExpression' === 'B: number') || ('C: MemberExpression' === 'D: number'))": 3,
    "(('A: Identifier' + 'B: number') - 'C: number')": 3,
    "((typeof('A: Identifier') === \"function\") ? 'B: Identifier' : void(0))": 3,
    "(('A: Identifier' - 'B: number') + 'C: number')": 3,
    "(('A: Identifier' !== 'B: Identifier') || (('C: Identifier' instanceof 'D: Identifier') && 'E: CallExpression'))": 3,
    "('A: CallExpression' !== 'B: MemberExpression')": 3,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + 'D: CallExpression')": 3,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: string')": 3,
    "((('A: string' + 'B: string') + 'C: CallExpression') + 'D: string')": 3,
    "((typeof('A: MemberExpression') !== \"boolean\") ? true : 'B: MemberExpression')": 3,
    "(('A: CallExpression' / 'B: number') - 'C: number')": 3,
    "((typeof('A: MemberExpression') === \"boolean\") ? 'B: MemberExpression' : true)": 3,
    "('A: number' * ('B: Identifier' / 'C: number'))": 3,
    "('A: MemberExpression' ? 'B: TemplateLiteral' : '')": 3,
    "('A: CallExpression' || 'B: MemberExpression')": 3,
    "('A: MemberExpression' && ('B: Identifier' === 'C: CallExpression'))": 3,
    "('A: MemberExpression' || ('B: MemberExpression' && 'C: MemberExpression'))": 3,
    "((('A: UnaryExpression' !== 'undefined') && 'B: MemberExpression') && 'C: CallExpression')": 3,
    "((('A: UnaryExpression' !== 'undefined') && 'B: MemberExpression') && 'C: MemberExpression')": 3,
    "((('A: string' + 'B: MemberExpression') + 'C: string') + 'D: string')": 3,
    "(('A: string' === 'B: Identifier') && !('C: MemberExpression'))": 3,
    "(('A: MemberExpression' === 'B: string') && (('C: MemberExpression' === 'D: string') || ('E: MemberExpression' === 'F: string')))": 3,
    "((typeof('A: Identifier') + 'B: string') + 'C: Identifier')": 3,
    "(typeof('A: Identifier') + 'B: string')": 3,
    "(!('A: Identifier') || ('B: Identifier' < 1))": 3,
    "(('A: Identifier' === 'B: Identifier') ? 'C: Identifier' : 0)": 3,
    "(('A: string' in 'B: Identifier') ? !(!('C: MemberExpression')) : 'D: Identifier')": 3,
    "(('A: Identifier' < 0) ? 0 : 'B: Identifier')": 3,
    "(('A: Identifier' === 'B: Identifier') || (('C: Identifier' !== 'D: Identifier') && ('E: Identifier' !== 'F: Identifier')))": 3,
    "(('A: Identifier' && 'B: CallExpression') ? 'C: CallExpression' : ('D: Identifier' || ''))": 3,
    "(('A: MemberExpression' && ('B: MemberExpression' === 'C: MemberExpression')) ? 'D: CallExpression' : 'E: ArrayExpression')": 3,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && 'C: MemberExpression') ? 'D: CallExpression' : 'E: Identifier')": 3,
    "((('A: BinaryExpression' && 'B: MemberExpression') && ('C: Identifier' != null)) && 'D: MemberExpression')": 3,
    "((('A: Identifier' != null) && 'B: MemberExpression') && ('C: Identifier' != null))": 3,
    "((0 === 'A: Identifier') || 'B: CallExpression')": 3,
    "(('A: Identifier' % 'B: number') != 0)": 3,
    "('A: Identifier' ? ('B: MemberExpression' == 'C: string') : ('D: Identifier' instanceof 'E: MemberExpression'))": 3,
    "('A: MemberExpression' ? 'B: NewExpression' : 'C: number')": 3,
    "(!('A: Identifier') && ('B: Identifier' !== 'C: Identifier'))": 3,
    "('A: Identifier' != 'B: number')": 3,
    "((1 == 'A: Identifier') || ('B: number' == 'C: Identifier'))": 3,
    "('A: Identifier' ? 'B: NewExpression' : 'C: ArrayExpression')": 3,
    "('A: Identifier' != 1)": 3,
    "('A: Identifier' ? 'B: ArrayExpression' : 'C: CallExpression')": 3,
    "(('A: MemberExpression' || 'B: MemberExpression') || 'C: Identifier')": 3,
    "(('A: string' in 'B: Identifier') ? 'C: MemberExpression' : 'D: Identifier')": 3,
    "('A: Identifier' ? \"\" : 'B: string')": 3,
    "('A: MemberExpression' ? 'B: ArrayExpression' : 'C: ArrayExpression')": 3,
    "((null === 'A: Identifier') || 'B: CallExpression')": 3,
    "(null === 'A: AssignmentExpression')": 3,
    "(('A: Identifier' === 'B: CallExpression') && 'C: CallExpression')": 3,
    "(('A: number' * ('B: number' * 'C: number')) + 'D: number')": 3,
    "(!('A: MemberExpression') || !('B: MemberExpression'))": 3,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' === 'string')) && ('D: MemberExpression' === 0))": 3,
    "((('A: Identifier' != null) && ('B: UnaryExpression' === 'string')) && (typeof('C: MemberExpression') === 'string'))": 3,
    "(('A: Identifier' != null) && (typeof('B: MemberExpression') === 'string'))": 3,
    "(('A: Identifier' != null) && (('B: UnaryExpression' !== 'object') || 'C: CallExpression'))": 3,
    "((typeof('A: Identifier') !== 'object') || 'B: CallExpression')": 3,
    "((('A: MemberExpression' >= 'B: number') && 'C: CallExpression') && 'D: CallExpression')": 3,
    "(('A: MemberExpression' >= 'B: number') && 'C: CallExpression')": 3,
    "((false === 'A: Identifier') || ('B: Identifier' === 'C: Identifier'))": 3,
    "('A: Identifier' ? 'B: string' : ('C: Identifier' && 'D: string'))": 3,
    "('A: Identifier' ? 'B: string' : false)": 3,
    "(('A: Identifier' != null) && ('B: MemberExpression' === 'C: string'))": 3,
    "((('A: BinaryExpression' + 'B: string') + 'C: TemplateLiteral') + 'D: string')": 3,
    "((('A: BinaryExpression' + 'B: string') + 'C: string') + 'D: TemplateLiteral')": 3,
    "(('A: MemberExpression' + 'B: MemberExpression') + 'C: MemberExpression')": 3,
    "(!('A: Identifier') && ('B: MemberExpression' > 0))": 3,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: string'))": 3,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 'D: MemberExpression')) && ('E: MemberExpression' === 'F: MemberExpression'))": 3,
    "(('A: MemberExpression' === 'B: string') && 'C: CallExpression')": 3,
    "((null === 'A: Identifier') || (typeof('B: Identifier') === 'string'))": 3,
    "(-('A: Identifier') * 'B: Identifier')": 3,
    "('A: MemberExpression' ? 'B: MemberExpression' : null)": 3,
    "((('A: LogicalExpression' && 'B: CallExpression') && 'C: CallExpression') && 'D: CallExpression')": 3,
    "((typeof('A: Identifier') === 'undefined') || (typeof('B: MemberExpression') !== 'function'))": 3,
    "(('A: Identifier' !== null) && 'B: CallExpression')": 3,
    "(('A: MemberExpression' === 'B: string') && (typeof('C: MemberExpression') === 'string'))": 3,
    "(('A: MemberExpression' !== 'B: string') || ('C: MemberExpression' !== 'D: string'))": 3,
    "('A: Identifier' === ('B: Identifier' % 'C: Identifier'))": 3,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + 'C: string') + 'D: Identifier')": 3,
    "(typeof('A: MemberExpression') === 'undefined')": 3,
    "((('A: MemberExpression' + 'B: string') + 'C: MemberExpression') + 'D: MemberExpression')": 3,
    "(('A: MemberExpression' === 0) && ('B: MemberExpression' <= 'C: number'))": 3,
    "+(0)": 3,
    "(('A: string' === 'B: Identifier') ? true : null)": 3,
    "(\"function\" === 'A: CallExpression')": 3,
    "('A: CallExpression' !== \"string\")": 3,
    "('A: CallExpression' !== \"function\")": 3,
    "('A: MemberExpression' && ('B: MemberExpression' > 0))": 3,
    "('A: MemberExpression' === \"\")": 3,
    "((\"undefined\" != typeof('A: Identifier')) ? 'B: MemberExpression' : null)": 3,
    "((\"function\" === 'A: Identifier') || ((\"object\" === 'B: Identifier') && !('C: UnaryExpression')))": 3,
    "((\"object\" === 'A: Identifier') && !(!('B: Identifier')))": 3,
    "((('A: UnaryExpression' === 'B: Identifier') || ('C: UnaryExpression' === 'D: Identifier')) || ('E: string' === 'F: CallExpression'))": 3,
    "((!(0) === 'A: Identifier') || (!(1) === 'B: Identifier'))": 3,
    "!((!('A: Identifier') || (1 !== 'B: MemberExpression')))": 3,
    "(!('A: Identifier') || (1 !== 'B: MemberExpression'))": 3,
    "(1 !== 'A: MemberExpression')": 3,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && (\"function\" != 'C: UnaryExpression')) && 'D: AssignmentExpression')": 3,
    "(((\"function\" != 'A: UnaryExpression') && (\"object\" != 'B: UnaryExpression')) && (\"function\" != typeof('C: Identifier')))": 3,
    "((\"function\" != typeof('A: object')) && (\"object\" != typeof('B: Identifier')))": 3,
    "(\"function\" != typeof('A: object'))": 3,
    "((typeof('A: Identifier') == \"function\") || !(1))": 3,
    "(((null != 'A: Identifier') && 'B: CallExpression') && 'C: CallExpression')": 3,
    "((('A: UnaryExpression' == \"number\") && ('B: Identifier' >= 0)) && ('C: Identifier' <= 'D: Identifier'))": 3,
    "((typeof('A: Identifier') == \"number\") && ('B: Identifier' >= 0))": 3,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && !('C: CallExpression')) && 'D: CallExpression')": 3,
    "((('A: AssignmentExpression' in 'B: Identifier') && ('C: MemberExpression' !== 'D: MemberExpression')) && !('E: CallExpression'))": 3,
    "(('A: AssignmentExpression' in 'B: Identifier') && ('C: MemberExpression' !== 'D: MemberExpression'))": 3,
    "('A: AssignmentExpression' in 'B: Identifier')": 3,
    "((('A: UnaryExpression' == \"number\") && ('B: LogicalExpression' || 'C: CallExpression')) ? (0 === 'D: Identifier') : (0 === 'E: CallExpression'))": 3,
    "((typeof('A: Identifier') == \"number\") && (('B: CallExpression' || 'C: CallExpression') || 'D: CallExpression'))": 3,
    "(('A: Identifier' instanceof 'B: Identifier') ? 'C: Identifier' : (('D: ThisExpression' instanceof 'E: Identifier') ? void('F: AssignmentExpression') : 'G: NewExpression'))": 3,
    "(('A: ThisExpression' instanceof 'B: Identifier') ? void('C: AssignmentExpression') : 'D: NewExpression')": 3,
    "((0 !== 'A: Identifier') || ((1 / 'B: Identifier') == (1 / 'C: Identifier')))": 3,
    "(0 !== 'A: Identifier')": 3,
    "((1 / 'A: Identifier') == (1 / 'B: Identifier'))": 3,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: UnaryExpression' == \"object\")) && 'D: CallExpression')": 3,
    "(((\"function\" === 'A: Identifier') || (\"object\" === 'B: Identifier')) || (typeof('C: Identifier') == \"object\"))": 3,
    "((\"function\" === 'A: Identifier') || (\"object\" === 'B: Identifier'))": 3,
    "((\"\" + 'A: Identifier') == (\"\" + 'B: Identifier'))": 3,
    "((+('A: Identifier') != +('B: Identifier')) ? (+('C: Identifier') != +('D: Identifier')) : (('E: UnaryExpression' == 0) ? ('F: BinaryExpression' == 'G: BinaryExpression') : ('H: UnaryExpression' == 'I: UnaryExpression')))": 3,
    "((+('A: Identifier') == 0) ? ((1 / 'B: UnaryExpression') == (1 / 'C: Identifier')) : (+('D: Identifier') == +('E: Identifier')))": 3,
    "(+('A: Identifier') == 0)": 3,
    "((1 / +('A: Identifier')) == (1 / 'B: Identifier'))": 3,
    "((\"object\" != typeof('A: Identifier')) || (\"object\" != typeof('B: Identifier')))": 3,
    "((('A: BinaryExpression' && 'B: UnaryExpression') && ('C: string' in 'D: Identifier')) && ('E: string' in 'F: Identifier'))": 3,
    "((('A: Identifier' !== 'B: Identifier') && !('C: LogicalExpression')) && ('D: string' in 'E: Identifier'))": 3,
    "('A: AssignmentExpression' !== 'B: MemberExpression')": 3,
    "(('A: Identifier' && ('B: UnaryExpression' !== 'C: MemberExpression')) || 'D: AssignmentExpression')": 3,
    "('A: Identifier' && (void(0) !== 'B: MemberExpression'))": 3,
    "('A: CallExpression' ? ('B: CallExpression' ? 'C: CallExpression' : 'D: CallExpression') : 'E: Identifier')": 3,
    "((null == 'A: Identifier') ? 'B: Identifier' : ('C: CallExpression' ? 'D: CallExpression' : ('E: LogicalExpression' ? 'F: CallExpression' : 'G: CallExpression')))": 3,
    "('A: CallExpression' ? 'B: CallExpression' : (('C: CallExpression' && 'D: UnaryExpression') ? 'E: CallExpression' : 'F: CallExpression'))": 3,
    "(('A: CallExpression' && !('B: CallExpression')) ? 'C: CallExpression' : 'D: CallExpression')": 3,
    "(('A: MemberExpression' !== 'B: Identifier') ? 'C: CallExpression' : 'D: CallExpression')": 3,
    "((null == 'A: Identifier') ? 'B: Identifier' : 'C: FunctionExpression')": 3,
    "((null == 'A: Identifier') ? \"\" : (\"\" + 'B: Identifier'))": 3,
    "((!('A: Identifier') && 'B: Identifier') && 'C: AssignmentExpression')": 3,
    "('A: Identifier' ? 'B: AssignmentExpression' : ('C: Identifier' ? 'D: AssignmentExpression' : ('E: Identifier' && 'F: AssignmentExpression')))": 3,
    "('A: Identifier' ? 'B: AssignmentExpression' : ('C: Identifier' && 'D: AssignmentExpression'))": 3,
    "((void(0) === 'A: Identifier') && 'B: SequenceExpression')": 3,
    "('A: UpdateExpression' + \"\")": 3,
    "('A: Identifier' || (0 === 'B: Identifier'))": 3,
    "(\"\" + ('A: Identifier' ? 'B: CallExpression' : 'C: Identifier'))": 3,
    "((!(1) === 'A: MemberExpression') ? 0 : 'B: CallExpression')": 3,
    "(('A: Identifier' || ('B: UnaryExpression' !== 'C: MemberExpression')) || 'D: AssignmentExpression')": 3,
    "('A: Identifier' || (!(1) !== 'B: MemberExpression'))": 3,
    "((('A: Identifier' <= 0) || ('B: Identifier' > 'C: Identifier')) ? 'D: SequenceExpression' : (('E: Identifier' || 'F: BinaryExpression') || 'G: AssignmentExpression'))": 3,
    "(('A: Identifier' || ('B: UnaryExpression' === 'C: MemberExpression')) || 'D: AssignmentExpression')": 3,
    "('A: Identifier' || (!(1) === 'B: MemberExpression'))": 3,
    "(('A: Identifier' > 'B: Identifier') ? 'C: AssignmentExpression' : 'D: SequenceExpression')": 3,
    "(('A: UpdateExpression' > 0) && 'B: AssignmentExpression')": 3,
    "(('A: Identifier' <= 1) && 'B: AssignmentExpression')": 3,
    "(('A: CallExpression' < 'B: Identifier') ? 'C: AssignmentExpression' : 'D: AssignmentExpression')": 3,
    "(('A: Identifier' > 0) ? 'B: AssignmentExpression' : 'C: AssignmentExpression')": 3,
    "(('A: AssignmentExpression' >= 0) ? ('B: Identifier' + 'C: Identifier') : -(1))": 3,
    "('A: AssignmentExpression' >= 0)": 3,
    "((void(0) !== 'A: Identifier') && (-(1) !== 'B: Identifier'))": 3,
    "(((\"number\" != 'A: UnaryExpression') || 'B: Identifier') && 'C: AssignmentExpression')": 3,
    "((\"number\" != typeof('A: Identifier')) || 'B: Identifier')": 3,
    "(((null != 'A: AssignmentExpression') && ('B: Identifier' > 'C: Identifier')) && 'D: AssignmentExpression')": 3,
    "((null != 'A: AssignmentExpression') && ('B: Identifier' > 'C: Identifier'))": 3,
    "((('A: AssignmentExpression' > 'B: Identifier') || ('C: BinaryExpression' && 'D: BinaryExpression')) && 'E: SequenceExpression')": 3,
    "(('A: AssignmentExpression' > 'B: Identifier') || (('C: Identifier' === 'D: BinaryExpression') && ('E: Identifier' === 'F: BinaryExpression')))": 3,
    "('A: AssignmentExpression' > 'B: Identifier')": 3,
    "(('A: Identifier' === ('B: UnaryExpression' / 0)) && ('C: Identifier' === ('D: UnaryExpression' / 0)))": 3,
    "(((null != 'A: AssignmentExpression') && ('B: Identifier' < 'C: Identifier')) && 'D: AssignmentExpression')": 3,
    "((null != 'A: AssignmentExpression') && ('B: Identifier' < 'C: Identifier'))": 3,
    "((('A: AssignmentExpression' < 'B: Identifier') || ('C: BinaryExpression' && 'D: BinaryExpression')) && 'E: SequenceExpression')": 3,
    "(('A: AssignmentExpression' < 'B: Identifier') || (('C: Identifier' === 'D: BinaryExpression') && ('E: Identifier' === 'F: BinaryExpression')))": 3,
    "('A: AssignmentExpression' < 'B: Identifier')": 3,
    "(('A: Identifier' === (1 / 0)) && ('B: Identifier' === (1 / 0)))": 3,
    "('A: Identifier' ? ('B: CallExpression' ? 'C: CallExpression' : ('D: CallExpression' ? 'E: CallExpression' : 'F: ConditionalExpression')) : 'G: ArrayExpression')": 3,
    "('A: CallExpression' ? 'B: CallExpression' : ('C: CallExpression' ? 'D: CallExpression' : ('E: CallExpression' ? 'F: CallExpression' : 'G: CallExpression')))": 3,
    "('A: CallExpression' ? 'B: CallExpression' : ('C: CallExpression' ? 'D: CallExpression' : 'E: CallExpression'))": 3,
    "('A: CallExpression' ? 'B: UpdateExpression' : 'C: AssignmentExpression')": 3,
    "((null == 'A: Identifier') ? 0 : ('B: CallExpression' ? 'C: MemberExpression' : 'D: MemberExpression'))": 3,
    "(('A: Identifier' && !('B: Identifier')) ? 'C: SequenceExpression' : ('D: Identifier' ? ('E: CallExpression' || 'F: SequenceExpression') : ('G: CallExpression' || 'H: CallExpression')))": 3,
    "(('A: Identifier' && ('B: Identifier' === 'C: Identifier')) || 'D: CallExpression')": 3,
    "('A: Identifier' ? ('B: CallExpression' || 'C: SequenceExpression') : ('D: CallExpression' || 'E: CallExpression'))": 3,
    "((null != 'A: Identifier') && 'B: SequenceExpression')": 3,
    "((('A: BinaryExpression' && 'B: BinaryExpression') || (0 !== 'C: MemberExpression')) || delete('D: MemberExpression'))": 3,
    "((('A: string' !== 'B: Identifier') && ('C: string' !== 'D: Identifier')) || (0 !== 'E: MemberExpression'))": 3,
    "((1 < 'A: MemberExpression') ? 'B: Identifier' : 'C: MemberExpression')": 2,
    "void(((0 >= 'A: Identifier') && 'B: CallExpression'))": 2,
    "((0 >= 'A: Identifier') && 'B: CallExpression')": 2,
    "(('A: Identifier' === 'B: Identifier') || ('C: Identifier' && (0 >= 'D: Identifier')))": 2,
    "('A: Identifier' && (0 >= 'B: Identifier'))": 2,
    "((0 === 'A: Identifier') && 'B: CallExpression')": 2,
    "(('A: number' > 'B: MemberExpression') && 'C: AssignmentExpression')": 2,
    "(1 >= 'A: MemberExpression')": 2,
    "((0 < 'A: Identifier') && 'B: CallExpression')": 2,
    "(('A: MemberExpression' === 'B: Identifier') && 'C: CallExpression')": 2,
    "('A: Identifier' ? 'B: CallExpression' : void('C: SequenceExpression'))": 2,
    "(\"function\" != typeof('A: MemberExpression'))": 2,
    "('A: number' >= 'B: MemberExpression')": 2,
    "('A: Identifier' ? 'B: CallExpression' : (('C: UnaryExpression' === 'D: Identifier') ? void(0) : ('E: Identifier' ? 'F: UnaryExpression' : 'G: CallExpression')))": 2,
    "((!(1) === 'A: Identifier') ? void(0) : ('B: Identifier' ? void('C: CallExpression') : 'D: CallExpression'))": 2,
    "('A: Identifier' ? void('B: CallExpression') : 'C: CallExpression')": 2,
    "((!(1) === 'A: Identifier') || 'B: CallExpression')": 2,
    "((('A: BinaryExpression' && 'B: Identifier') && ('C: MemberExpression' === 'D: Identifier')) && 'E: Identifier')": 2,
    "((('A: UnaryExpression' == 'object') && 'B: Identifier') && ('C: MemberExpression' === 'D: Identifier'))": 2,
    "(('A: Identifier' == 'B: Identifier') || ('C: Identifier' == 'D: Identifier'))": 2,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && (0 == 'C: BinaryExpression')) && ('D: Identifier' <= 'E: Identifier'))": 2,
    "('A: CallExpression' && ('B: Identifier' == 'C: CallExpression'))": 2,
    "(('A: CallExpression' && 'B: CallExpression') && !('C: CallExpression'))": 2,
    "((('A: BinaryExpression' && 'B: Identifier') && !('C: MemberExpression')) && 'D: Identifier')": 2,
    "((('A: UnaryExpression' == 'object') && 'B: Identifier') && !('C: MemberExpression'))": 2,
    "((('A: LogicalExpression' && 'B: Identifier') && !('C: MemberExpression')) && 'D: Identifier')": 2,
    "((('A: Identifier' && 'B: BinaryExpression') && 'C: Identifier') && !('D: MemberExpression'))": 2,
    "(('A: Identifier' && ('B: UnaryExpression' == 'object')) && 'C: Identifier')": 2,
    "('A: Identifier' && (typeof('B: Identifier') == 'object'))": 2,
    "((!('A: Identifier') && !('B: Identifier')) && 'C: CallExpression')": 2,
    "((!('A: Identifier') && !('B: Identifier')) && !('C: Identifier'))": 2,
    "('A: Identifier' ? 'B: Identifier' : 'C: UpdateExpression')": 2,
    "((('A: string' == 'B: Identifier') && ('C: BinaryExpression' == 'D: UnaryExpression')) ? 'E: string' : 'F: Identifier')": 2,
    "(('A: string' == 'B: Identifier') && ((1 / 'C: Identifier') == -('D: Identifier')))": 2,
    "((1 / 'A: Identifier') == -('B: Identifier'))": 2,
    "((-('A: Identifier') > 'B: Identifier') ? 0 : ('C: Identifier' + 'D: Identifier'))": 2,
    "(-('A: Identifier') > 'B: Identifier')": 2,
    "(('A: Identifier' > 'B: Identifier') ? 0 : (('C: Identifier' - 'D: Identifier') >>> 0))": 2,
    "(('A: Identifier' - 'B: Identifier') >>> 0)": 2,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: Identifier') + 'D: Identifier')": 2,
    "((('A: string' + 'B: Identifier') + 'C: Identifier') + 'D: Identifier')": 2,
    "('A: Identifier' > ('B: Identifier' / 'C: number'))": 2,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: CallExpression') + 'D: Identifier')": 2,
    "((('A: BinaryExpression' && 'B: MemberExpression') && 'C: MemberExpression') && 'D: MemberExpression')": 2,
    "('A: string' + ('B: MemberExpression' || ''))": 2,
    "(('A: MemberExpression' || '') + 'B: string')": 2,
    "('A: MemberExpression' ? ('B: string' + 'C: CallExpression') : '')": 2,
    "('A: Identifier' + 'B: TemplateLiteral')": 2,
    "(('A: MemberExpression' === 'B: string') ? 'C: NewExpression' : null)": 2,
    "(('A: Identifier' * ('B: Identifier' - 1)) - 'C: Identifier')": 2,
    "('A: Identifier' * ('B: Identifier' - 1))": 2,
    "(('A: Identifier' > 1) ? false : 'B: string')": 2,
    "('A: Identifier' && ('B: MemberExpression' > 'C: number'))": 2,
    "((('A: LogicalExpression' && 'B: UnaryExpression') && ('C: UnaryExpression' === 'function')) && 'D: CallExpression')": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && !('C: CallExpression')) && (typeof('D: MemberExpression') === 'function'))": 2,
    "((typeof('A: Identifier') == 'object') ? 'B: MemberExpression' : 'C: MemberExpression')": 2,
    "(('A: string' in 'B: Identifier') ? 'C: CallExpression' : null)": 2,
    "((('A: MemberExpression' || 'B: CallExpression') && 'C: MemberExpression') ? 'D: CallExpression' : 'E: Identifier')": 2,
    "((typeof('A: Identifier') === 'undefined') && ('B: string' === 'C: CallExpression'))": 2,
    "((null !== 'A: Identifier') && (typeof('B: Identifier') == \"object\"))": 2,
    "(\"object\" !== 'A: CallExpression')": 2,
    "((\"object\" != typeof('A: Identifier')) && 'B: AssignmentExpression')": 2,
    "((('A: LogicalExpression' && 'B: UnaryExpression') && ('C: UnaryExpression' == \"function\")) && 'D: CallExpression')": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && !('C: CallExpression')) && (typeof('D: MemberExpression') == \"function\"))": 2,
    "((('A: BinaryExpression' && 'B: UnaryExpression') && (null !== 'C: MemberExpression')) && !('D: CallExpression'))": 2,
    "(((null !== 'A: Identifier') && !('B: CallExpression')) && (null !== 'C: MemberExpression'))": 2,
    "((null !== 'A: Identifier') && !('B: CallExpression'))": 2,
    "((('A: UnaryExpression' == \"function\") && ('B: Identifier' instanceof 'C: Identifier')) || ('D: Identifier' === 'E: CallExpression'))": 2,
    "((typeof('A: Identifier') == \"function\") && ('B: Identifier' instanceof 'C: Identifier'))": 2,
    "(((\"undefined\" != 'A: UnaryExpression') && 'B: MemberExpression') ? 'C: CallExpression' : (('D: Identifier' && 'E: MemberExpression') && 'F: CallExpression'))": 2,
    "((('A: UnaryExpression' == \"undefined\") || ('B: LogicalExpression' && 'C: BinaryExpression')) && ((\"undefined\" != 'D: UnaryExpression') && (\"undefined\" != 'E: UnaryExpression')))": 2,
    "((typeof('A: Identifier') == \"undefined\") || (('B: BinaryExpression' && 'C: BinaryExpression') && ('D: string' !== 'E: Identifier')))": 2,
    "((('A: string' !== 'B: AssignmentExpression') && ('C: string' !== 'D: Identifier')) && ('E: string' !== 'F: Identifier'))": 2,
    "(('A: string' !== 'B: AssignmentExpression') && ('C: string' !== 'D: Identifier'))": 2,
    "('A: string' !== 'B: AssignmentExpression')": 2,
    "((\"undefined\" != typeof('A: Identifier')) && (\"undefined\" != typeof('B: Identifier')))": 2,
    "(('A: CallExpression' && 'B: CallExpression') ? 'C: AssignmentExpression' : ('D: CallExpression' ? 'E: AssignmentExpression' : ('F: CallExpression' ? 'G: AssignmentExpression' : 'H: AssignmentExpression')))": 2,
    "('A: CallExpression' ? 'B: AssignmentExpression' : ('C: CallExpression' ? 'D: AssignmentExpression' : 'E: AssignmentExpression'))": 2,
    "(('A: Identifier' && ('B: UnaryExpression' == \"function\")) ? 'C: CallExpression' : 'D: Identifier')": 2,
    "(('A: number' === 'B: CallExpression') && 'C: AssignmentExpression')": 2,
    "((('A: Identifier' && 'B: UnaryExpression') || 'C: MemberExpression') || 'D: SequenceExpression')": 2,
    "(('A: Identifier' && !('B: CallExpression')) || 'C: MemberExpression')": 2,
    "((!(1) !== 'A: Identifier') && 'B: CallExpression')": 2,
    "((('A: UnaryExpression' === 'B: Identifier') || ('C: Identifier' > 'D: MemberExpression')) && 'E: AssignmentExpression')": 2,
    "((void(0) === 'A: Identifier') || ('B: Identifier' > 'C: MemberExpression'))": 2,
    "((-(1) !== 'A: Identifier') && ('B: Identifier' === 'C: Identifier'))": 2,
    "((typeof('A: Identifier') == \"object\") ? 'B: MemberExpression' : 'C: MemberExpression')": 2,
    "(('A: MemberExpression' || ('B: BinaryExpression' && 'C: Identifier')) && (('D: LogicalExpression' && 'E: BinaryExpression') && 'F: MemberExpression'))": 2,
    "('A: MemberExpression' || ((\"undefined\" != 'B: UnaryExpression') && 'C: Identifier'))": 2,
    "((\"undefined\" != typeof('A: Identifier')) && 'B: Identifier')": 2,
    "((('A: AssignmentExpression' && 'B: CallExpression') && ('C: MemberExpression' === 'D: string')) && 'E: MemberExpression')": 2,
    "(('A: AssignmentExpression' && 'B: CallExpression') && ('C: MemberExpression' === 'D: string'))": 2,
    "(('A: CallExpression' || 'B: CallExpression') ? (('C: Identifier' && 'D: BinaryExpression') ? 'E: NewExpression' : 'F: CallExpression') : 'G: Identifier')": 2,
    "(('A: Identifier' && ('B: UnaryExpression' == \"function\")) ? 'C: NewExpression' : 'D: CallExpression')": 2,
    "(('A: Identifier' && !('B: Identifier')) && (typeof('C: Identifier') == \"object\"))": 2,
    "((('A: CallExpression' && 'B: CallExpression') || 'C: CallExpression') || ('D: CallExpression' && 'E: AssignmentExpression'))": 2,
    "((!(0) === 'A: Identifier') ? 'B: CallExpression' : ((null === 'C: Identifier') ? 'D: Identifier' : ('E: Identifier' + 'F: string')))": 2,
    "(!(!('A: CallExpression')) || 'B: SequenceExpression')": 2,
    "((!(0) === ('A: UnaryExpression' && 'B: CallExpression')) && 'C: CallExpression')": 2,
    "(!(0) === (!('A: CallExpression') && 'B: CallExpression'))": 2,
    "((-(1) !== 'A: Identifier') && 'B: AssignmentExpression')": 2,
    "((('A: UnaryExpression' === 'B: CallExpression') ? 'C: string' : 'D: string') + 'E: Identifier')": 2,
    "((-(1) === 'A: CallExpression') ? 'B: string' : 'C: string')": 2,
    "(!(!('A: Identifier')) && 'B: MemberExpression')": 2,
    "((null !== 'A: Identifier') && 'B: CallExpression')": 2,
    "((('A: Identifier' !== 'B: Identifier') && ('C: CallExpression' === 'D: CallExpression')) && 'E: SequenceExpression')": 2,
    "((\"undefined\" != typeof('A: Identifier')) ? 'B: Identifier' : 'C: Identifier')": 2,
    "('A: Identifier' ? 'B: SequenceExpression' : 'C: SequenceExpression')": 2,
    "(('A: MemberExpression' && 'B: CallExpression') || 'C: AssignmentExpression')": 2,
    "(('A: MemberExpression' === 'B: string') ? \"\" : ('C: MemberExpression' || 'D: MemberExpression'))": 2,
    "((!(0) === 'A: Identifier') && 'B: CallExpression')": 2,
    "(('A: Identifier' && !('B: CallExpression')) ? 'C: CallExpression' : 'D: Identifier')": 2,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: FunctionExpression')": 2,
    "(('A: CallExpression' && 'B: CallExpression') && delete('C: MemberExpression'))": 2,
    "(('A: string' in 'B: Identifier') ? 'C: SequenceExpression' : null)": 2,
    "('A: Identifier' ? 'B: SequenceExpression' : 'C: Identifier')": 2,
    "(('A: string' === 'B: Identifier') ? 'C: CallExpression' : ('D: MemberExpression' ? ('E: BinaryExpression' + 'F: Identifier') : 'G: Identifier'))": 2,
    "((('A: MemberExpression' && 'B: Identifier') && !('C: CallExpression')) ? 'D: CallExpression' : 'E: CallExpression')": 2,
    "(('A: MemberExpression' && 'B: Identifier') && !('C: CallExpression'))": 2,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: string' !== 'D: Identifier')) ? 'E: MemberExpression' : 'F: MemberExpression')": 2,
    "(('A: Identifier' && ('B: string' !== 'C: Identifier')) && ('D: string' !== 'E: Identifier'))": 2,
    "(('A: string' in 'B: Identifier') ? 'C: AssignmentExpression' : 'D: AssignmentExpression')": 2,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: BinaryExpression' || 'D: LogicalExpression')) && 'E: CallExpression')": 2,
    "(('A: Identifier' && ('B: MemberExpression' === 'C: number')) && ((0 !== 'D: MemberExpression') || ('E: MemberExpression' && 'F: BinaryExpression')))": 2,
    "('A: Identifier' && ('B: MemberExpression' === 'C: number'))": 2,
    "((0 !== 'A: MemberExpression') || ('B: MemberExpression' && (0 === 'C: CallExpression')))": 2,
    "((('A: MemberExpression' || 'B: CallExpression') && 'C: MemberExpression') ? 'D: CallExpression' : void(0))": 2,
    "((('A: UnaryExpression' === 'B: Identifier') && ('C: string' === 'D: CallExpression')) ? delete('E: MemberExpression') : 'F: CallExpression')": 2,
    "((void(0) === 'A: Identifier') && ('B: string' === 'C: CallExpression'))": 2,
    "(('A: Identifier' && ('B: string' !== 'C: Identifier')) && 'D: AssignmentExpression')": 2,
    "((typeof('A: MemberExpression') == \"function\") && 'B: CallExpression')": 2,
    "((('A: UnaryExpression' == \"function\") && 'B: MemberExpression') && 'C: CallExpression')": 2,
    "((typeof('A: MemberExpression') == \"function\") && 'B: MemberExpression')": 2,
    "(('A: MemberExpression' || 'B: MemberExpression') && 'C: SequenceExpression')": 2,
    "('A: MemberExpression' && ('B: MemberExpression' ? 'C: CallExpression' : 'D: CallExpression'))": 2,
    "(('A: AssignmentExpression' && 'B: MemberExpression') || \"\")": 2,
    "('A: AssignmentExpression' && 'B: MemberExpression')": 2,
    "(('A: Identifier' && ('B: UnaryExpression' === 'C: CallExpression')) ? 'D: CallExpression' : 'E: CallExpression')": 2,
    "('A: Identifier' && (-(1) === 'B: CallExpression'))": 2,
    "((!('A: CallExpression') && 'B: CallExpression') && 'C: AssignmentExpression')": 2,
    "(((\"undefined\" != 'A: UnaryExpression') || ('B: BinaryExpression' && 'C: BinaryExpression')) && 'D: AssignmentExpression')": 2,
    "((\"undefined\" != typeof('A: Identifier')) || ((\"undefined\" != 'B: UnaryExpression') && ('C: string' === 'D: CallExpression')))": 2,
    "((\"undefined\" != typeof('A: Identifier')) && ('B: string' === 'C: CallExpression'))": 2,
    "(('A: Identifier' && 'B: MemberExpression') || \"\")": 2,
    "(('A: Identifier' && 'B: CallExpression') && 'C: AssignmentExpression')": 2,
    "(('A: Identifier' && 'B: Identifier') ? 'C: CallExpression' : 'D: Identifier')": 2,
    "(('A: MemberExpression' && 'B: CallExpression') ? 'C: SequenceExpression' : 'D: CallExpression')": 2,
    "(('A: Identifier' || 'B: Identifier') ? 'C: SequenceExpression' : 'D: Identifier')": 2,
    "(!(('A: Identifier' && 'B: MemberExpression')) && 'C: Identifier')": 2,
    "!((!('A: Identifier') || !('B: MemberExpression')))": 2,
    "(('A: CallExpression' && 'B: CallExpression') ? 'C: CallExpression' : ('D: CallExpression' ? 'E: CallExpression' : ('F: CallExpression' ? 'G: CallExpression' : 'H: Identifier')))": 2,
    "(('A: Identifier' in 'B: Identifier') ? 'C: CallExpression' : (('D: Identifier' in 'E: Identifier') ? 'F: CallExpression' : void(0)))": 2,
    "(('A: Identifier' in 'B: Identifier') ? 'C: CallExpression' : void(0))": 2,
    "((('A: BinaryExpression' + 'B: string') + 'C: Identifier') + ('D: Identifier' ? ('E: string' + 'F: Identifier') : \"\"))": 2,
    "('A: string' + ('B: Identifier' ? ('C: string' + 'D: Identifier') : \"\"))": 2,
    "((void(0) === 'A: Identifier') || 'B: CallExpression')": 2,
    "((typeof('A: Identifier') == \"string\") ? 'B: AssignmentExpression' : 'C: AssignmentExpression')": 2,
    "('A: MemberExpression' ? 'B: AssignmentExpression' : ('C: MemberExpression' ? 'D: AssignmentExpression' : 'E: AssignmentExpression'))": 2,
    "((void(0) !== 'A: Identifier') && 'B: CallExpression')": 2,
    "((('A: UnaryExpression' == \"function\") && ('B: UnaryExpression' === 'C: CallExpression')) || 'D: SequenceExpression')": 2,
    "((typeof('A: MemberExpression') == \"function\") && (!(1) === 'B: CallExpression'))": 2,
    "(!(1) === 'A: CallExpression')": 2,
    "('A: MemberExpression' ? 'B: CallExpression' : ('C: MemberExpression' ? 'D: CallExpression' : 'E: AssignmentExpression'))": 2,
    "((-(1) !== 'A: Identifier') && 'B: CallExpression')": 2,
    "('A: CallExpression' && (!(0) === 'B: MemberExpression'))": 2,
    "(!('A: Identifier') && ('B: Identifier' !== false))": 2,
    "('A: MemberExpression' + ('B: MemberExpression' ? ('C: string' + 'D: MemberExpression') : ''))": 2,
    "('A: Identifier' && ('B: Identifier' || 'C: Identifier'))": 2,
    "((('A: Identifier' + 'B: string') + 'C: MemberExpression') + ('D: MemberExpression' ? ('E: string' + 'F: MemberExpression') : ''))": 2,
    "('A: Identifier' ? ('B: Identifier' / 'C: Identifier') : 'D: Identifier')": 2,
    "(('A: Identifier' - 'B: Identifier') > 'C: Identifier')": 2,
    "(('A: Identifier' === 'B: Identifier') && 'C: Identifier')": 2,
    "(('A: Identifier' + 1) % 'B: Identifier')": 2,
    "((typeof('A: Identifier') === \"function\") || (('B: UnaryExpression' === \"object\") && ('C: Identifier' !== null)))": 2,
    "((typeof('A: Identifier') !== \"undefined\") && ('B: string' === 'C: CallExpression'))": 2,
    "('A: UpdateExpression' % 'B: number')": 2,
    "((0 === 'A: Identifier') && 'B: MemberExpression')": 2,
    "(('A: MemberExpression' === 'B: Identifier') && ('C: Identifier' < 'D: Identifier'))": 2,
    "typeof('A: ThisExpression')": 2,
    "((('A: string' + 'B: CallExpression') + 'C: string') + 'D: string')": 2,
    "(('A: Identifier' - 'B: Identifier') > 0)": 2,
    "(('A: Identifier' * 'B: Identifier') / 'C: Identifier')": 2,
    "((('A: Identifier' + 'B: Identifier') / 'C: Identifier') / 'D: Identifier')": 2,
    "(('A: Identifier' + 'B: Identifier') / 'C: Identifier')": 2,
    "('A: MemberExpression' === (('B: string' + 'C: Identifier') + 'D: string'))": 2,
    "('A: Identifier' && ('B: CallExpression' <= 'C: Identifier'))": 2,
    "(!('A: MemberExpression') || ('B: MemberExpression' === 'C: Identifier'))": 2,
    "!((('A: Identifier' >= 1) && ('B: Identifier' <= 'C: Identifier')))": 2,
    "(('A: Identifier' >= 1) && ('B: Identifier' <= 'C: Identifier'))": 2,
    "((null == 'A: Identifier') || !('B: CallExpression'))": 2,
    "(('A: Identifier' | 'B: Identifier') | 'C: Identifier')": 2,
    "('A: Identifier' && ('B: MemberExpression' == null))": 2,
    "!((('A: CallExpression' != 0) && ('B: Identifier' || 'C: CallExpression')))": 2,
    "(('A: CallExpression' != 0) && ('B: Identifier' || 'C: CallExpression'))": 2,
    "(('A: string' in 'B: Identifier') && 'C: MemberExpression')": 2,
    "((('A: Identifier' & 'B: Identifier') !== 0) && 'C: CallExpression')": 2,
    "('A: MemberExpression' != 'B: string')": 2,
    "((typeof('A: MemberExpression') === \"number\") && (typeof('B: MemberExpression') === \"function\"))": 2,
    "((typeof('A: Identifier') !== \"undefined\") && (typeof('B: MemberExpression') !== \"undefined\"))": 2,
    "(('A: CallExpression' + 'B: Identifier') + 'C: CallExpression')": 2,
    "(typeof('A: MemberExpression') !== \"number\")": 2,
    "(('A: Identifier' instanceof 'B: Identifier') && ('C: CallExpression' === 'D: MemberExpression'))": 2,
    "('A: Identifier' ? 'B: Identifier' : 'C: NewExpression')": 2,
    "(('A: Identifier' === 'B: Identifier') ? 'C: string' : 'D: string')": 2,
    "(('A: MemberExpression' === 'B: Identifier') ? 'C: Identifier' : 'D: MemberExpression')": 2,
    "(('A: MemberExpression' / 'B: number') | 0)": 2,
    "(('A: Identifier' | 0) !== 'B: Identifier')": 2,
    "(0 === ('A: MemberExpression' & 'B: Identifier'))": 2,
    "(('A: Identifier' != null) && (typeof('B: MemberExpression') === \"function\"))": 2,
    "(('A: Identifier' != null) && !('B: CallExpression'))": 2,
    "((typeof('A: Identifier') == \"undefined\") || 'B: CallExpression')": 2,
    "(typeof('A: Identifier') == 'undefined')": 2,
    "(('A: Identifier' in 'B: Identifier') && !('C: CallExpression'))": 2,
    "(!('A: Identifier') && ('B: MemberExpression' == 1))": 2,
    "('A: Identifier' in 'B: ThisExpression')": 2,
    "(!('A: MemberExpression') || ('B: CallExpression' != -(1)))": 2,
    "('A: CallExpression' != -(1))": 2,
    "(('A: Identifier' && ('B: string' == 'C: CallExpression')) ? 'D: CallExpression' : 'E: CallExpression')": 2,
    "(('A: Identifier' in 'B: Identifier') && ('C: MemberExpression' === 'D: Identifier'))": 2,
    "((('A: Identifier' % 'B: number') + 'C: number') % 'D: number')": 2,
    "(('A: Identifier' > 1) ? 1 : 0)": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' < 'D: number')) && ('E: Identifier' > -(1)))": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' < 'D: number')) && ('E: Identifier' < 'F: number'))": 2,
    "((void(0) === 'A: Identifier') && (0 === 'B: Identifier'))": 2,
    "('A: Identifier' >>> 0)": 2,
    "('A: Identifier' < ('B: MemberExpression' - 'C: number'))": 2,
    "('A: Identifier' || !('B: CallExpression'))": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: string' === 'D: CallExpression')) && ('E: string' == 'F: CallExpression'))": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' === 'D: CallExpression')) && ('E: Identifier' === 'F: CallExpression'))": 2,
    "(\"null\" == 'A: CallExpression')": 2,
    "(('A: Identifier' && ('B: string' == 'C: Identifier')) || !('D: CallExpression'))": 2,
    "('A: number' > 'B: Identifier')": 2,
    "(('A: Identifier' > ('B: UnaryExpression' / 0)) && ('C: Identifier' < (1 / 0)))": 2,
    "('A: Identifier' > (-(1) / 0))": 2,
    "('A: Identifier' < (1 / 0))": 2,
    "('A: MemberExpression' ? ('B: Identifier' ? ('C: BinaryExpression' + 'D: string') : ('E: BinaryExpression' + 'F: string')) : 'G: string')": 2,
    "('A: Identifier' ? (('B: BinaryExpression' + 'C: Identifier') + 'D: string') : (('E: string' + 'F: CallExpression') + 'G: string'))": 2,
    "((('A: string' + 'B: Identifier') + 'C: CallExpression') + 'D: string')": 2,
    "('A: string' == 'B: AssignmentExpression')": 2,
    "(('A: number' == 'B: Identifier') && 'C: SequenceExpression')": 2,
    "(('A: Identifier' == 'B: Identifier') && 'C: CallExpression')": 2,
    "('A: string' == ('B: Identifier' ? 'C: CallExpression' : 'D: MemberExpression'))": 2,
    "('A: Identifier' && (('B: string' == 'C: Identifier') ? 'D: SequenceExpression' : 'E: CallExpression'))": 2,
    "(('A: string' == 'B: Identifier') ? 'C: SequenceExpression' : 'D: CallExpression')": 2,
    "('A: string' != 'B: CallExpression')": 2,
    "('A: Identifier' >= ('B: MemberExpression' + 'C: MemberExpression'))": 2,
    "((('A: MemberExpression' + 1) >= 'B: Identifier') && (('C: Identifier' + 1) >= 'D: Identifier'))": 2,
    "(('A: MemberExpression' + 1) >= 'B: Identifier')": 2,
    "(('A: Identifier' + 1) >= 'B: Identifier')": 2,
    "(('A: Identifier' + 1) < 'B: Identifier')": 2,
    "(('A: string' + 'B: Identifier') + (('C: UnaryExpression' === 'undefined') ? '' : ('D: string' + 'E: Identifier')))": 2,
    "((typeof('A: Identifier') === 'undefined') ? '' : ('B: string' + 'C: Identifier'))": 2,
    "((('A: BinaryExpression' + 'B: string') + ('C: BinaryExpression' + 'D: Identifier')) + 'E: string')": 2,
    "(('A: Identifier' - 'B: Identifier') + 'C: Identifier')": 2,
    "('A: MemberExpression' && ('B: Identifier' != 'C: Identifier'))": 2,
    "('A: MemberExpression' && ('B: Identifier' !== 'C: Identifier'))": 2,
    "('A: NewExpression' - 'B: MemberExpression')": 2,
    "(('A: string' + ('B: Identifier' + 1)) + 'C: string')": 2,
    "((('A: Identifier' + 'B: string') + 'C: Identifier') + 'D: CallExpression')": 2,
    "('A: Identifier' < ('B: number' * 'C: number'))": 2,
    "((('A: CallExpression' + 'B: CallExpression') + 'C: CallExpression') + 'D: CallExpression')": 2,
    "(('A: MemberExpression' / 'B: number') || 0)": 2,
    "(('A: string' + ('B: Identifier' ? 'C: string' : 'D: string')) + 'E: string')": 2,
    "('A: string' + ('B: Identifier' ? 'C: string' : 'D: string'))": 2,
    "(('A: CallExpression' - 'B: Identifier') < 'C: number')": 2,
    "(('A: ThisExpression' === 'B: Identifier') || ('C: ThisExpression' === 'D: Identifier'))": 2,
    "(typeof('A: MemberExpression') !== \"function\")": 2,
    "('A: CallExpression' > ('B: number' * 'C: Identifier'))": 2,
    "!(('A: Identifier' instanceof 'B: MemberExpression'))": 2,
    "((('A: string' + 'B: CallExpression') + 'C: Identifier') + 'D: string')": 2,
    "(('A: string' + 'B: CallExpression') + 'C: Identifier')": 2,
    "((('A: BinaryExpression' + 'B: string') + \"\") + 'C: string')": 2,
    "(typeof('A: MemberExpression') === \"undefined\")": 2,
    "((typeof('A: Identifier') === \"number\") && ('B: MemberExpression' !== void(0)))": 2,
    "((typeof('A: Identifier') === \"function\") ? 'B: Identifier' : 'C: Identifier')": 2,
    "('A: MemberExpression' & -('B: number'))": 2,
    "('A: Identifier' && ('B: ThisExpression' !== 'C: Identifier'))": 2,
    "(('A: MemberExpression' != null) && ('B: MemberExpression' === 'C: string'))": 2,
    "(0 + 1)": 2,
    "(('A: MemberExpression' === 'B: number') && 'C: Identifier')": 2,
    "((('A: BinaryExpression' ? 0 : 'B: Identifier') + 'C: Identifier') + 'D: number')": 2,
    "((('A: UnaryExpression' === 'B: Identifier') ? 0 : 'C: Identifier') + 'D: Identifier')": 2,
    "(('A: MemberExpression' < 'B: number') ? 'C: Identifier' : 'D: MemberExpression')": 2,
    "(('A: MemberExpression' !== 1) && ('B: MemberExpression' !== 'C: number'))": 2,
    "(!('A: CallExpression') && ('B: CallExpression' === -(1)))": 2,
    "('A: Identifier' && ('B: MemberExpression' !== 'C: Identifier'))": 2,
    "('A: CallExpression' !== 0)": 2,
    "('A: CallExpression' || ('B: MemberExpression' && 'C: CallExpression'))": 2,
    "(!(!('A: MemberExpression')) || !(!('B: MemberExpression')))": 2,
    "('A: Identifier' ? 'B: NewExpression' : 'C: ObjectExpression')": 2,
    "('A: MemberExpression' + 'B: number')": 2,
    "('A: number' / 'B: MemberExpression')": 2,
    "(('A: Identifier' >> 'B: number') & 'C: number')": 2,
    "('A: Identifier' >> 'B: number')": 2,
    "('A: Identifier' ? 'B: ObjectExpression' : false)": 2,
    "(('A: MemberExpression' === 1) ? 'B: string' : 'C: string')": 2,
    "('A: MemberExpression' ? 1 : 'B: Identifier')": 2,
    "(('A: MemberExpression' === 'B: Identifier') || !('C: CallExpression'))": 2,
    "('A: MemberExpression' && ('B: MemberExpression' !== 'C: Identifier'))": 2,
    "(('A: MemberExpression' === 'B: Identifier') ? true : 'C: MemberExpression')": 2,
    "((0 === 'A: Identifier') && 'B: Identifier')": 2,
    "(typeof('A: MemberExpression') === 'boolean')": 2,
    "((!('A: MemberExpression') && !('B: MemberExpression')) && !('C: MemberExpression'))": 2,
    "(('A: Identifier' + 'B: CallExpression') + 'C: CallExpression')": 2,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 'D: MemberExpression')) && ('E: MemberExpression' === 'F: MemberExpression'))": 2,
    "((('A: Identifier' << 'B: number') - 'C: Identifier') + 'D: CallExpression')": 2,
    "(('A: Identifier' << 'B: number') - 'C: Identifier')": 2,
    "(('A: MemberExpression' || 0) + 1)": 2,
    "('A: CallExpression' && ('B: MemberExpression' !== 0))": 2,
    "((!('A: Identifier') || !('B: MemberExpression')) || !('C: MemberExpression'))": 2,
    "(('A: Identifier' !== -(1)) ? 'B: CallExpression' : 'C: Identifier')": 2,
    "(('A: Identifier' && ('B: MemberExpression' !== 'C: string')) && ('D: MemberExpression' !== 'E: string'))": 2,
    "(typeof('A: Identifier') !== 'boolean')": 2,
    "((typeof('A: Identifier') !== 'string') || ('B: MemberExpression' === 0))": 2,
    "(('A: Identifier' !== -(1)) ? 'B: Identifier' : 'C: MemberExpression')": 2,
    "(!('A: CallExpression') ? 'B: CallExpression' : 'C: Identifier')": 2,
    "('A: MemberExpression' === 0x00)": 2,
    "('A: string' + ('B: number' * ('C: number' * 'D: BinaryExpression')))": 2,
    "(('A: string' + 'B: MemberExpression') + 'C: CallExpression')": 2,
    "(('A: MemberExpression' === 'B: string') ? 'C: Identifier' : 'D: Identifier')": 2,
    "('A: CallExpression' in 'B: MemberExpression')": 2,
    "(+('A: MemberExpression') || 0)": 2,
    "((null == 'A: Identifier') || ('B: Identifier' !== 'C: Identifier'))": 2,
    "(('A: Identifier' === 'B: Identifier') ? 1 : +('C: Identifier'))": 2,
    "(('A: Identifier' != null) && ('B: Identifier' in 'C: CallExpression'))": 2,
    "('A: Identifier' || ('B: UpdateExpression' != 'C: Identifier'))": 2,
    "('A: UpdateExpression' != 'B: Identifier')": 2,
    "((('A: UnaryExpression' && 'B: CallExpression') && 'C: CallExpression') && ('D: CallExpression' || 'E: CallExpression'))": 2,
    "((!('A: UnaryExpression') && 'B: CallExpression') && 'C: CallExpression')": 2,
    "(!(!('A: Identifier')) && 'B: CallExpression')": 2,
    "(('object' === 'A: Identifier') || ('function' === 'B: Identifier'))": 2,
    "('A: CallExpression' !== null)": 2,
    "(('object' === 'A: Identifier') && ('B: Identifier' != null))": 2,
    "(('A: Identifier' === 'B: Identifier') && !('C: CallExpression'))": 2,
    "(0 / 0)": 2,
    "((null == 'A: Identifier') ? 'B: ArrayExpression' : 'C: ArrayExpression')": 2,
    "('A: Identifier' && ('B: Identifier' < 'C: Identifier'))": 2,
    "((null == 'A: Identifier') ? 0 : 'B: Identifier')": 2,
    "((('A: Identifier' != null) && 'B: MemberExpression') ? 'C: CallExpression' : 0)": 2,
    "((('A: string' == 'B: Identifier') && ('C: string' == 'D: Identifier')) ? 'E: Identifier' : 'F: Identifier')": 2,
    "(('A: string' == 'B: Identifier') && ('C: string' == 'D: Identifier'))": 2,
    "!(('A: CallExpression' instanceof 'B: Identifier'))": 2,
    "(('A: Identifier' instanceof 'B: Identifier') || !(('C: NewExpression' instanceof 'D: Identifier')))": 2,
    "!(('A: NewExpression' instanceof 'B: Identifier'))": 2,
    "('A: Identifier' ? 'B: CallExpression' : 'C: FunctionExpression')": 2,
    "('A: UpdateExpression' == 'B: number')": 2,
    "(('A: Identifier' || 'B: Identifier') ? 'C: number' : 'D: number')": 2,
    "(('A: Identifier' === 'B: Identifier') ? 'C: ArrayExpression' : 'D: Identifier')": 2,
    "(('A: string' == 'B: Identifier') ? 'C: CallExpression' : 'D: Identifier')": 2,
    "('A: Identifier' - (('B: Identifier' > 'C: number') ? 1 : 0))": 2,
    "(('A: Identifier' > 'B: number') ? 1 : 0)": 2,
    "('A: CallExpression' ? false : 'B: Identifier')": 2,
    "('A: CallExpression' ? 'B: ArrayExpression' : 'C: ArrayExpression')": 2,
    "('A: UpdateExpression' == 1)": 2,
    "('A: Identifier' ? 'B: Identifier' : null)": 2,
    "('A: MemberExpression' ? 'B: ObjectExpression' : false)": 2,
    "('A: Identifier' || false)": 2,
    "(!('A: Identifier') && ('B: number' == 'C: Identifier'))": 2,
    "('A: Identifier' ? 0 : -('B: Identifier'))": 2,
    "(('A: Identifier' % 1) && ('B: Identifier' >= 0))": 2,
    "(1 / 'A: MemberExpression')": 2,
    "(('A: string' == 'B: Identifier') ? 'C: ArrayExpression' : 'D: ArrayExpression')": 2,
    "('A: CallExpression' ? 'B: Identifier' : 'C: ObjectExpression')": 2,
    "('A: Identifier' ? 0 : 'B: number')": 2,
    "('A: Identifier' ? 'B: Identifier' : 'C: ObjectExpression')": 2,
    "('A: Identifier' ? null : 'B: Identifier')": 2,
    "('A: UpdateExpression' < 'B: number')": 2,
    "((('A: BinaryExpression' ? 'B: string' : '') + 'C: string') + ((1 == 'D: Identifier') ? 'E: string' : ''))": 2,
    "((('A: number' == 'B: Identifier') ? 'C: string' : '') + 'D: string')": 2,
    "(('A: number' == 'B: Identifier') ? 'C: string' : '')": 2,
    "((1 == 'A: Identifier') ? 'B: string' : '')": 2,
    "('A: CallExpression' ? -(0) : 0)": 2,
    "((0 === 'A: Identifier') ? 'B: Identifier' : 0)": 2,
    "('A: CallExpression' ? 'B: TemplateLiteral' : 'C: Identifier')": 2,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: number' == 'D: BinaryExpression')) ? ('E: Identifier' + 'F: string') : ('G: Identifier' + 'H: string'))": 2,
    "((('A: BinaryExpression' && 'B: BinaryExpression') || ('C: number' == 'D: BinaryExpression')) || ('E: number' == ('F: Identifier' % 'G: number')))": 2,
    "((('A: BinaryExpression' != 'B: number') && ('C: BinaryExpression' != 'D: number')) || ('E: number' == ('F: Identifier' % 'G: number')))": 2,
    "((('A: Identifier' % 'B: number') != 'C: number') && (('D: Identifier' % 'E: number') != 'F: number'))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: Identifier' < 'D: number') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: BinaryExpression' || 'I: BinaryExpression') ? 'J: Identifier' : ('K: BinaryExpression' ? 'L: ConditionalExpression' : 'M: ConditionalExpression')))": 2,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) ? 'E: Identifier' : (('F: string' === 'G: Identifier') ? ('H: BinaryExpression' ? 'I: Identifier' : 'J: BinaryExpression') : ('K: LogicalExpression' ? 'L: BinaryExpression' : 'M: UnaryExpression')))": 2,
    "(('A: number' !== 'B: AssignmentExpression') ? 'C: Identifier' : (('D: UnaryExpression' !== 'E: MemberExpression') ? ('F: MemberExpression' + 'G: CallExpression') : 'H: Identifier'))": 2,
    "('A: number' !== 'B: AssignmentExpression')": 2,
    "((void(0) !== 'A: MemberExpression') ? ('B: MemberExpression' + 'C: CallExpression') : 'D: Identifier')": 2,
    "(((1 < 'A: Identifier') && ('B: Identifier' < 'C: number')) && (1 != ~('D: UnaryExpression')))": 2,
    "('A: Identifier' + ('B: CallExpression' ? 'C: string' : ('D: CallExpression' ? 'E: string' : 'F: string')))": 2,
    "(('A: number' < 'B: Identifier') ? 'C: AssignmentExpression' : ((0 < 'D: Identifier') && 'E: AssignmentExpression'))": 2,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: number' === 'D: Identifier')) ? 'E: string' : 'F: string')": 2,
    "((('A: UnaryExpression' == \"string\") && 'B: CallExpression') ? 'C: MemberExpression' : 'D: MemberExpression')": 2,
    "((typeof('A: Identifier') == \"string\") && 'B: CallExpression')": 2,
    "((('A: BinaryExpression' && 'B: BinaryExpression') || ('C: string' === 'D: CallExpression')) ? 'E: CallExpression' : 'F: Identifier')": 2,
    "((1 == ('A: Identifier' % 'B: number')) ? 'C: string' : 'D: string')": 2,
    "('A: Identifier' ? ('B: MemberExpression' || 'C: MemberExpression') : ('D: Identifier' ? 'E: MemberExpression' : 'F: MemberExpression'))": 2,
    "((('A: BinaryExpression' ? 'B: MemberExpression' : 'C: Identifier') + 'D: string') + 'E: Identifier')": 2,
    "((('A: AssignmentExpression' < 'B: number') ? 'C: MemberExpression' : 'D: Identifier') + 'E: string')": 2,
    "(('A: AssignmentExpression' < 'B: number') ? 'C: MemberExpression' : 'D: Identifier')": 2,
    "('A: AssignmentExpression' < 'B: number')": 2,
    "('A: Identifier' + ((1 === 'B: Identifier') ? 'C: string' : \"\"))": 2,
    "((1 === 'A: Identifier') ? 'B: string' : \"\")": 2,
    "((0 === 'A: CallExpression') ? ('B: string' + 'C: Identifier') : ('D: string' + 'E: Identifier'))": 2,
    "(('A: number' === 'B: Identifier') ? 'C: string' : (('D: BinaryExpression' && 'E: BinaryExpression') ? ('F: Identifier' + 'G: string') : ('H: Identifier' + 'I: string')))": 2,
    "(((0 == 'A: BinaryExpression') && ('B: number' !== 'C: Identifier')) ? ('D: Identifier' + 'E: string') : ('F: Identifier' + 'G: string'))": 2,
    "((0 == ('A: Identifier' % 'B: number')) && ('C: number' !== 'D: Identifier'))": 2,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: Identifier' < 'E: number') ? 'F: string' : ('G: BinaryExpression' ? 'H: ConditionalExpression' : 'I: ConditionalExpression')))": 2,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: Identifier' < 'E: number') ? ('F: Identifier' ? 'G: string' : 'H: string') : ('I: BinaryExpression' ? 'J: ConditionalExpression' : 'K: string')))": 2,
    "(('A: Identifier' < 'B: number') ? ('C: Identifier' ? 'D: string' : 'E: string') : (('F: Identifier' < 'G: number') ? ('H: Identifier' ? 'I: string' : 'J: string') : 'K: string'))": 2,
    "(('A: Identifier' < 'B: number') ? ('C: Identifier' ? 'D: string' : 'E: string') : 'F: string')": 2,
    "((('A: Identifier' ? \"\" : 'B: string') + 'C: string') + 'D: MemberExpression')": 2,
    "(('A: Identifier' ? \"\" : 'B: string') + 'C: string')": 2,
    "(('A: number' == ('B: Identifier' % 'C: number')) || (('D: Identifier' % 'E: number') != 1))": 2,
    "(('A: Identifier' % 'B: number') != 1)": 2,
    "('A: CallExpression' ? ('B: Identifier' + ('C: LogicalExpression' ? 'D: string' : 'E: string')) : ('F: Identifier' ? ('G: Identifier' + 'H: string') : ('I: Identifier' + 'J: string')))": 2,
    "('A: Identifier' ? ('B: Identifier' + 'C: string') : ('D: Identifier' + 'E: string'))": 2,
    "('A: CallExpression' ? ('B: Identifier' + ('C: LogicalExpression' ? 'D: string' : 'E: string')) : ('F: Identifier' + ('G: LogicalExpression' ? 'H: string' : 'I: string')))": 2,
    "(('A: Identifier' < 'B: number') ? (('C: UnaryExpression' === 'D: Identifier') ? 'E: string' : 'F: string') : (('G: UnaryExpression' === 'H: Identifier') ? 'I: string' : 'J: string'))": 2,
    "((1 === 'A: Identifier') ? ('B: Identifier' + 'C: string') : ('D: Identifier' + 'E: string'))": 2,
    "((0 === 'A: Identifier') ? 'B: Identifier' : ((1 === 'C: Identifier') ? ('D: Identifier' + 'E: string') : ('F: LogicalExpression' ? 'G: BinaryExpression' : 'H: BinaryExpression')))": 2,
    "((1 === 'A: Identifier') ? ('B: Identifier' + 'C: string') : (('D: LogicalExpression' || 'E: BinaryExpression') ? ('F: string' + 'G: Identifier') : ('H: Identifier' + 'I: string')))": 2,
    "((('A: BinaryExpression' || 'B: LogicalExpression') || (0 == 'C: BinaryExpression')) ? ('D: string' + 'E: Identifier') : ('F: Identifier' + 'G: string'))": 2,
    "((('A: Identifier' < 'B: number') || ('C: BinaryExpression' && 'D: BinaryExpression')) || (0 == ('E: Identifier' % 'F: number')))": 2,
    "(('A: Identifier' < 'B: number') || (('C: Identifier' <= 'D: number') && (0 == 'E: BinaryExpression')))": 2,
    "(('A: Identifier' <= 'B: number') && (0 == ('C: Identifier' % 'D: number')))": 2,
    "((0 == 'A: AssignmentExpression') ? ('B: Identifier' / 'C: number') : 'D: Identifier')": 2,
    "(0 == 'A: AssignmentExpression')": 2,
    "((0 == ('A: Identifier' % 'B: number')) || (('C: number' < 'D: Identifier') && ('E: Identifier' < 'F: number')))": 2,
    "((1 === 'A: Identifier') ? ('B: Identifier' + 'C: CallExpression') : ('D: Identifier' ? ('E: Identifier' + 'F: ConditionalExpression') : ('G: Identifier' ? 'H: BinaryExpression' : 'I: BinaryExpression')))": 2,
    "('A: Identifier' ? ('B: Identifier' + ('C: CallExpression' ? 'D: MemberExpression' : 'E: MemberExpression')) : ('F: Identifier' ? ('G: Identifier' + 'H: MemberExpression') : ('I: Identifier' + 'J: ConditionalExpression')))": 2,
    "('A: Identifier' ? ('B: Identifier' + 'C: MemberExpression') : ('D: Identifier' + ('E: CallExpression' ? 'F: MemberExpression' : 'G: MemberExpression')))": 2,
    "('A: Identifier' ? (('B: BinaryExpression' && 'C: BinaryExpression') ? 'D: MemberExpression' : 'E: MemberExpression') : (('F: BinaryExpression' && 'G: BinaryExpression') ? 'H: MemberExpression' : 'I: MemberExpression'))": 2,
    "((('A: number' <= 'B: Identifier') && ('C: Identifier' <= 'D: number')) ? 'E: MemberExpression' : 'F: MemberExpression')": 2,
    "(('A: MemberExpression' === 1) ? ('B: Identifier' ? 'C: MemberExpression' : 'D: MemberExpression') : (('E: Identifier' + 'F: string') + 'G: CallExpression'))": 2,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) ? ('E: Identifier' + 'F: number') : 'G: Identifier')": 2,
    "((('A: string' === 'B: Identifier') && ('C: number' <= 'D: Identifier')) || ('E: string' === 'F: Identifier'))": 2,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) ? 'E: Identifier' : (('F: LogicalExpression' || 'G: BinaryExpression') ? ('H: BinaryExpression' ? 'I: Identifier' : 'J: BinaryExpression') : void(0)))": 2,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) ? (('E: number' <= 'F: Identifier') ? 'G: Identifier' : ('H: Identifier' + 'I: number')) : void(0))": 2,
    "(((0 <= 'A: Identifier') && ('B: Identifier' < 'C: number')) ? 'D: string' : (('E: Identifier' < 'F: number') ? 'G: string' : ('H: BinaryExpression' ? 'I: string' : 'J: ConditionalExpression')))": 2,
    "((0 <= 'A: Identifier') && ('B: Identifier' < 'C: number'))": 2,
    "((('A: BinaryExpression' < 'B: number') && (1 < 'C: BinaryExpression')) && (('D: UnaryExpression' % 'E: number') != 1))": 2,
    "((('A: Identifier' % 'B: number') < 'C: number') && (1 < ('D: Identifier' % 'E: number')))": 2,
    "(1 < ('A: Identifier' % 'B: number'))": 2,
    "((~('A: UnaryExpression') % 'B: number') != 1)": 2,
    "(('A: Identifier' + ('B: LogicalExpression' ? 'C: string' : 'D: string')) + 'E: MemberExpression')": 2,
    "('A: Identifier' + (('B: BinaryExpression' || 'C: LogicalExpression') ? 'D: string' : 'E: string'))": 2,
    "((('A: number' <= 'B: BinaryExpression') || ('C: BinaryExpression' && 'D: BinaryExpression')) ? 'E: string' : 'F: string')": 2,
    "(('A: number' <= ('B: Identifier' % 'C: number')) || (('D: number' <= 'E: Identifier') && (0 == 'F: BinaryExpression')))": 2,
    "(('A: number' <= 'B: Identifier') && (0 == ('C: Identifier' % 'D: number')))": 2,
    "((1 === 'A: Identifier') ? ('B: Identifier' ? 'C: string' : 'D: string') : (('E: number' === 'F: Identifier') ? ('G: LogicalExpression' ? 'H: string' : 'I: string') : ('J: BinaryExpression' ? 'K: ConditionalExpression' : 'L: string')))": 2,
    "(('A: number' === 'B: Identifier') ? (('C: Identifier' || 'D: Identifier') ? 'E: string' : 'F: string') : (('G: Identifier' < 'H: number') ? ('I: LogicalExpression' ? 'J: string' : 'K: string') : 'L: string'))": 2,
    "(('A: Identifier' < 'B: number') ? (('C: Identifier' || 'D: Identifier') ? 'E: string' : 'F: string') : 'G: string')": 2,
    "((1 === 'A: Identifier') ? (('B: Identifier' || 'C: Identifier') ? 'D: string' : 'E: string') : (('F: number' === 'G: Identifier') ? ('H: LogicalExpression' ? 'I: string' : 'J: string') : ('K: LogicalExpression' ? 'L: string' : 'M: string')))": 2,
    "(('A: number' === 'B: Identifier') ? (('C: Identifier' || 'D: Identifier') ? 'E: string' : 'F: string') : (('G: Identifier' || 'H: Identifier') ? 'I: string' : 'J: string'))": 2,
    "(('A: string' === 'B: Identifier') ? 'C: Identifier' : (('D: string' === 'E: Identifier') ? ('F: BinaryExpression' ? 'G: Identifier' : 'H: BinaryExpression') : ('I: LogicalExpression' ? 'J: ConditionalExpression' : 'K: UnaryExpression')))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: number' <= 'D: Identifier') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: BinaryExpression' || 'I: BinaryExpression') ? ('J: BinaryExpression' ? 0 : 'K: BinaryExpression') : void(0)))": 2,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) ? ((0 === 'E: Identifier') ? 0 : ('F: Identifier' + 'G: number')) : void(0))": 2,
    "((0 === 'A: Identifier') ? 0 : ('B: Identifier' + 'C: number'))": 2,
    "('A: Identifier' + (('B: BinaryExpression' && 'C: LogicalExpression') ? 'D: string' : 'E: string'))": 2,
    "(((1 != 'A: UnaryExpression') && ('B: BinaryExpression' || 'C: BinaryExpression')) ? 'D: string' : 'E: string')": 2,
    "((1 != ~('A: UnaryExpression')) && ((1 == 'B: Identifier') || ('C: number' == 'D: Identifier')))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: Identifier' < 'D: number') ? 'E: Identifier' : ('F: Identifier' + 'G: number')) : (('H: LogicalExpression' || 'I: LogicalExpression') ? 'J: Identifier' : ('K: Identifier' + 'L: number')))": 2,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: BinaryExpression' && 'D: BinaryExpression')) ? 'E: Identifier' : ('F: Identifier' + 'G: number'))": 2,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) || (('E: string' === 'F: Identifier') && ('G: number' <= 'H: Identifier')))": 2,
    "((('A: BinaryExpression' ? 'B: string' : \"\") + 'C: MemberExpression') + 'D: string')": 2,
    "((\"\" === 'A: Identifier') ? 'B: string' : 'C: Identifier')": 2,
    "((('A: Identifier' + 'B: string') + ('C: BinaryExpression' ? 'D: string' : \"\")) + 'E: string')": 2,
    "(('A: Identifier' + 'B: string') + (('C: number' === 'D: CallExpression') ? 'E: string' : \"\"))": 2,
    "(('A: number' === 'B: CallExpression') ? 'C: string' : \"\")": 2,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: number' === 'E: Identifier') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: string')))": 2,
    "(('A: number' === 'B: Identifier') ? 'C: string' : (('D: Identifier' < 'E: number') ? 'F: string' : 'G: string'))": 2,
    "((null != 'A: Identifier') && ('B: string' === 'C: CallExpression'))": 2,
    "((typeof('A: Identifier') == \"number\") || ('B: string' === 'C: CallExpression'))": 2,
    "(('A: MemberExpression' == null) && 'B: AssignmentExpression')": 2,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: MemberExpression' === 0)) && (void(0) === 'D: MemberExpression'))": 2,
    "((null != 'A: Identifier') ? 'B: CallExpression' : 'C: AssignmentExpression')": 2,
    "((null != 'A: MemberExpression') ? 'B: CallExpression' : 'C: Identifier')": 2,
    "((!(1) === 'A: Identifier') && 'B: SequenceExpression')": 2,
    "(('A: Identifier' instanceof 'B: Identifier') || ((null != 'C: Identifier') && (null != 'D: MemberExpression')))": 2,
    "((null != 'A: Identifier') && (null != 'B: MemberExpression'))": 2,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && 'C: MemberExpression') && 'D: CallExpression')": 2,
    "((('A: UnaryExpression' === 'B: MemberExpression') && (\"undefined\" != 'C: UnaryExpression')) && 'D: MemberExpression')": 2,
    "((!(1) === 'A: MemberExpression') && (\"undefined\" != typeof('B: Identifier')))": 2,
    "(typeof('A: MemberExpression') == \"object\")": 2,
    "('A: CallExpression' && (('B: CallExpression' && 'C: CallExpression') ? 'D: SequenceExpression' : ('E: BinaryExpression' ? 'F: AssignmentExpression' : 'G: UnaryExpression')))": 2,
    "(('A: CallExpression' && 'B: CallExpression') ? 'C: SequenceExpression' : ((null != 'D: MemberExpression') ? 'E: AssignmentExpression' : delete('F: MemberExpression')))": 2,
    "((null != 'A: MemberExpression') ? 'B: AssignmentExpression' : delete('C: MemberExpression'))": 2,
    "((('A: CallExpression' && 'B: UnaryExpression') && 'C: CallExpression') && 'D: AssignmentExpression')": 2,
    "((('A: BinaryExpression' ? 'B: ConditionalExpression' : 'C: string') + 'D: CallExpression') + 'E: Identifier')": 2,
    "(((0 <= 'A: Identifier') ? ('B: Identifier' ? 'C: string' : \"\") : 'D: string') + 'E: CallExpression')": 2,
    "((0 <= 'A: Identifier') ? ('B: Identifier' ? 'C: string' : \"\") : 'D: string')": 2,
    "((typeof('A: Identifier') == \"string\") ? 'B: FunctionExpression' : 'C: Identifier')": 2,
    "('A: CallExpression' ? 'B: SequenceExpression' : 'C: CallExpression')": 2,
    "((0 <= 'A: Identifier') && 'B: CallExpression')": 2,
    "((typeof('A: Identifier') == \"string\") ? ('B: MemberExpression' || 'C: MemberExpression') : void(0))": 2,
    "(('A: CallExpression' && 'B: AssignmentExpression') && 'C: AssignmentExpression')": 2,
    "(((0 == 'A: BinaryExpression') && ('B: BinaryExpression' != 0)) || (0 == ('C: Identifier' % 'D: number')))": 2,
    "((0 == ('A: Identifier' % 'B: number')) && (('C: Identifier' % 'D: number') != 0))": 2,
    "(('A: Identifier' < 0) ? ('B: CallExpression' || 0) : 'C: CallExpression')": 2,
    "(((0 != 'A: Identifier') && 'B: CallExpression') ? 'C: CallExpression' : 'D: Identifier')": 2,
    "((0 != 'A: Identifier') && 'B: CallExpression')": 2,
    "(0 != 'A: Identifier')": 2,
    "(('A: CallExpression' && !('B: CallExpression')) && (('C: LogicalExpression' && 'D: BinaryExpression') ? 'E: SequenceExpression' : 'F: CallExpression'))": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: number' === 'D: CallExpression')) ? 'E: SequenceExpression' : 'F: CallExpression')": 2,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: NewExpression')": 2,
    "((('A: Identifier' % 'B: AssignmentExpression') + 'C: Identifier') % 'D: Identifier')": 2,
    "(('A: Identifier' % 'B: AssignmentExpression') + 'C: Identifier')": 2,
    "('A: Identifier' % 'B: AssignmentExpression')": 2,
    "((1 == 'A: Identifier') ? ('B: CallExpression' ? 'C: number' : 'D: number') : ('E: number' - ('F: BinaryExpression' % 'G: number')))": 2,
    "(('A: string' + ('B: MemberExpression' ? 'C: string' : \"\")) + 'D: string')": 2,
    "('A: CallExpression' + (('B: number' < 'C: CallExpression') ? 'D: number' : 'E: number'))": 2,
    "(('A: number' < 'B: CallExpression') ? 'C: number' : 'D: number')": 2,
    "(('A: Identifier' - ('B: BinaryExpression' % 'C: number')) - 1)": 2,
    "('A: Identifier' - (('B: BinaryExpression' - 'C: Identifier') % 'D: number'))": 2,
    "(((1 + 'A: BinaryExpression') + ('B: BinaryExpression' % 'C: number')) + 'D: CallExpression')": 2,
    "((1 + ('A: number' * 'B: BinaryExpression')) + (('C: BinaryExpression' - 'D: Identifier') % 'E: number'))": 2,
    "(('A: Identifier' <= 0) ? ('B: CallExpression' + 'C: Identifier') : (('D: Identifier' > 'E: CallExpression') ? 'F: SequenceExpression' : 'G: SequenceExpression'))": 2,
    "(('A: Identifier' < 1) ? 'B: AssignmentExpression' : (('C: Identifier' > 'D: CallExpression') ? 'E: SequenceExpression' : 'F: SequenceExpression'))": 2,
    "('A: AssignmentExpression' ? 'B: CallExpression' : null)": 2,
    "((('A: LogicalExpression' && 'B: Identifier') && 'C: MemberExpression') && (null != 'D: CallExpression'))": 2,
    "((('A: UnaryExpression' === 'B: MemberExpression') && (\"undefined\" != 'C: UnaryExpression')) && 'D: Identifier')": 2,
    "((void(0) === 'A: MemberExpression') && (\"undefined\" != typeof('B: Identifier')))": 2,
    "(null != 'A: CallExpression')": 2,
    "('A: Identifier' && ('B: AssignmentExpression' ? 'C: AssignmentExpression' : ('D: LogicalExpression' && 'E: CallExpression')))": 2,
    "('A: AssignmentExpression' ? 'B: AssignmentExpression' : (('C: BinaryExpression' && 'D: MemberExpression') && 'E: CallExpression'))": 2,
    "(((\"undefined\" != 'A: UnaryExpression') && 'B: MemberExpression') && 'C: CallExpression')": 2,
    "(null == 'A: AssignmentExpression')": 2,
    "((('A: Identifier' && 'B: MemberExpression') && 'C: MemberExpression') ? 'D: MemberExpression' : 'E: Identifier')": 2,
    "(('A: Identifier' && ('B: UnaryExpression' === 'C: MemberExpression')) && 'D: SequenceExpression')": 2,
    "('A: Identifier' && (-('B: number') === 'C: MemberExpression'))": 2,
    "(-('A: number') === 'B: MemberExpression')": 2,
    "((('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression')) ? 'D: Identifier' : (('E: BinaryExpression' || 'F: BinaryExpression') ? 'G: Identifier' : ('H: LogicalExpression' ? 'I: Identifier' : 'J: ConditionalExpression')))": 2,
    "((('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression')) || (('D: MemberExpression' === 'E: number') && ('F: LogicalExpression' || 'G: BinaryExpression')))": 2,
    "(('A: MemberExpression' === 'B: number') && (('C: BinaryExpression' || 'D: BinaryExpression') || (0 !== 'E: MemberExpression')))": 2,
    "(((0 !== 'A: MemberExpression') || (0 !== 'B: MemberExpression')) || (0 !== 'C: MemberExpression'))": 2,
    "((0 !== 'A: MemberExpression') || (0 !== 'B: MemberExpression'))": 2,
    "((('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression')) ? 'D: Identifier' : (('E: BinaryExpression' || 'F: BinaryExpression') ? 'G: Identifier' : ('H: LogicalExpression' ? 'I: Identifier' : 'J: UnaryExpression')))": 2,
    "((('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression')) ? 'D: Identifier' : (('E: BinaryExpression' || 'F: BinaryExpression') ? 'G: Identifier' : -(1)))": 2,
    "((('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression')) ? 'D: Identifier' : -(1))": 2,
    "(('A: MemberExpression' && ('B: BinaryExpression' || 'C: BinaryExpression')) && 'D: AssignmentExpression')": 2,
    "('A: MemberExpression' && (('B: Identifier' < 'C: Identifier') || ('D: Identifier' < 'E: Identifier')))": 2,
    "(('A: Identifier' < 'B: Identifier') || ('C: Identifier' < 'D: Identifier'))": 2,
    "('A: Identifier' || (null == 'B: Identifier'))": 2,
    "(('A: Identifier' + ('B: Identifier' || \"\")) + ('C: Identifier' || \"\"))": 2,
    "('A: Identifier' + ('B: Identifier' || \"\"))": 2,
    "('A: Identifier' ? 'B: SequenceExpression' : 'C: AssignmentExpression')": 2,
    "(('A: Identifier' && ('B: CallExpression' !== 'C: CallExpression')) ? 'D: SequenceExpression' : 'E: SequenceExpression')": 2,
    "('A: Identifier' && ('B: CallExpression' !== 'C: CallExpression'))": 2,
    "('A: Identifier' ? 'B: MemberExpression' : ('C: Identifier' ? 0 : ('D: BinaryExpression' + 'E: Identifier')))": 2,
    "('A: Identifier' ? 0 : (('B: number' * 'C: BinaryExpression') + 'D: Identifier'))": 2,
    "(('A: number' * ('B: BinaryExpression' / 'C: number')) + 'D: Identifier')": 2,
    "('A: number' * (('B: AssignmentExpression' - 'C: AssignmentExpression') / 'D: number'))": 2,
    "(('A: AssignmentExpression' - 'B: AssignmentExpression') / 'C: number')": 2,
    "('A: AssignmentExpression' - 'B: AssignmentExpression')": 2,
    "((null != 'A: Identifier') ? 'B: Identifier' : ((null != 'C: Identifier') ? 'D: Identifier' : 'E: Identifier'))": 2,
    "((null != 'A: Identifier') ? 'B: Identifier' : 'C: Identifier')": 2,
    "((('A: MemberExpression' && 'B: BinaryExpression') && ('C: MemberExpression' == null)) && 'D: SequenceExpression')": 2,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || (null != 'C: MemberExpression')) ? 'D: SequenceExpression' : 'E: SequenceExpression')": 2,
    "(((null != 'A: MemberExpression') || (null != 'B: MemberExpression')) || (null != 'C: MemberExpression'))": 2,
    "((null != 'A: MemberExpression') || (null != 'B: MemberExpression'))": 2,
    "((('A: AssignmentExpression' < 1) || ('B: number' < 'C: Identifier')) && 'D: AssignmentExpression')": 2,
    "(('A: AssignmentExpression' < 1) || ('B: number' < 'C: Identifier'))": 2,
    "('A: AssignmentExpression' < 1)": 2,
    "((null != 'A: MemberExpression') ? (('B: BinaryExpression' || 'C: BinaryExpression') && 'D: AssignmentExpression') : ((null != 'E: MemberExpression') ? 'F: SequenceExpression' : 'G: AssignmentExpression'))": 2,
    "((('A: AssignmentExpression' < 0) || ('B: number' < 'C: Identifier')) && 'D: AssignmentExpression')": 2,
    "(('A: AssignmentExpression' < 0) || ('B: number' < 'C: Identifier'))": 2,
    "((null != 'A: MemberExpression') ? 'B: SequenceExpression' : 'C: AssignmentExpression')": 2,
    "((('A: MemberExpression' < 0) || ('B: number' < 'C: MemberExpression')) && 'D: AssignmentExpression')": 2,
    "((('A: Identifier' < 1) || ('B: Identifier' > 'C: CallExpression')) ? 'D: AssignmentExpression' : ((null != 'E: Identifier') ? 'F: AssignmentExpression' : 'G: SequenceExpression'))": 2,
    "((null != 'A: Identifier') ? 'B: AssignmentExpression' : 'C: SequenceExpression')": 2,
    "((null != 'A: MemberExpression') && 'B: SequenceExpression')": 2,
    "((('A: MemberExpression' > 'B: CallExpression') || ('C: MemberExpression' === 0)) && 'D: AssignmentExpression')": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 0)) && 'D: SequenceExpression')": 2,
    "((('A: MemberExpression' && 'B: BinaryExpression') && ('C: MemberExpression' !== 'D: Identifier')) && 'E: AssignmentExpression')": 2,
    "(('A: MemberExpression' && ('B: UnaryExpression' !== 'C: MemberExpression')) && ('D: MemberExpression' !== 'E: Identifier'))": 2,
    "('A: MemberExpression' && (void(0) !== 'B: MemberExpression'))": 2,
    "('A: AssignmentExpression' && 'B: SequenceExpression')": 2,
    "('A: MemberExpression' ? 'B: SequenceExpression' : (('C: MemberExpression' && 'D: UnaryExpression') && 'E: CallExpression'))": 2,
    "('A: Identifier' ? 'B: AssignmentExpression' : 'C: CallExpression')": 2,
    "(((null != 'A: AssignmentExpression') && 'B: CallExpression') && 'C: CallExpression')": 2,
    "((null != 'A: AssignmentExpression') && 'B: CallExpression')": 2,
    "(('A: MemberExpression' && !('B: Identifier')) && 'C: CallExpression')": 2,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && (0 < 'C: MemberExpression')) && 'D: AssignmentExpression')": 2,
    "((('A: MemberExpression' <= 'B: number') && ('C: UnaryExpression' === 'D: MemberExpression')) && (0 < 'E: MemberExpression'))": 2,
    "(('A: MemberExpression' <= 'B: number') && (!(0) === 'C: MemberExpression'))": 2,
    "((null != 'A: MemberExpression') ? 'B: CallExpression' : ((null != 'C: MemberExpression') ? 'D: SequenceExpression' : 'E: Identifier'))": 2,
    "((null != 'A: MemberExpression') ? 'B: SequenceExpression' : 'C: Identifier')": 2,
    "(('A: AssignmentExpression' && ('B: Identifier' < 'C: number')) && 'D: AssignmentExpression')": 2,
    "('A: AssignmentExpression' && ('B: Identifier' < 'C: number'))": 2,
    "(('A: Identifier' || ('B: number' !== 'C: Identifier')) ? 'D: Identifier' : 0)": 2,
    "('A: Identifier' || ('B: number' !== 'C: Identifier'))": 2,
    "((null !== 'A: AssignmentExpression') && 'B: AssignmentExpression')": 2,
    "((null === 'A: Identifier') || (('B: UnaryExpression' === 'C: Identifier') && (\"\" === 'D: Identifier')))": 2,
    "((void(0) === 'A: Identifier') && (\"\" === 'B: Identifier'))": 2,
    "((null != 'A: MemberExpression') && 'B: AssignmentExpression')": 2,
    "('A: AssignmentExpression' + ('B: MemberExpression' * 'C: number'))": 2,
    "('A: Identifier' ? (('B: Identifier' < 'C: Identifier') && 'D: SequenceExpression') : (('E: LogicalExpression' || 'F: Identifier') && 'G: SequenceExpression'))": 2,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || 'C: Identifier') && 'D: SequenceExpression')": 2,
    "('A: CallExpression' ? 'B: AssignmentExpression' : (('C: UnaryExpression' == \"string\") ? 'D: SequenceExpression' : ('E: CallExpression' ? 'F: SequenceExpression' : 'G: ConditionalExpression')))": 2,
    "((typeof('A: Identifier') == \"string\") ? 'B: SequenceExpression' : ('C: CallExpression' ? 'D: SequenceExpression' : ('E: CallExpression' ? 'F: LogicalExpression' : 'G: ConditionalExpression')))": 2,
    "((null !== 'A: AssignmentExpression') ? 'B: AssignmentExpression' : 'C: SequenceExpression')": 2,
    "('A: MemberExpression' ? 'B: AssignmentExpression' : 'C: CallExpression')": 2,
    "('A: CallExpression' ? 'B: SequenceExpression' : ('C: CallExpression' ? ('D: MemberExpression' || 'E: SequenceExpression') : ('F: CallExpression' ? 'G: AssignmentExpression' : 'H: CallExpression')))": 2,
    "('A: CallExpression' ? ('B: MemberExpression' || 'C: SequenceExpression') : ('D: CallExpression' ? 'E: AssignmentExpression' : 'F: CallExpression'))": 2,
    "((void(0) === 'A: MemberExpression') ? 'B: MemberExpression' : 'C: MemberExpression')": 2,
    "('A: CallExpression' ? 'B: AssignmentExpression' : 'C: CallExpression')": 2,
    "((('A: CallExpression' && 'B: CallExpression') || ('C: CallExpression' && 'D: BinaryExpression')) && 'E: AssignmentExpression')": 2,
    "('A: MemberExpression' + ('B: MemberExpression' ? 'C: string' : \"\"))": 2,
    "(('A: CallExpression' && 'B: CallExpression') ? (('C: Identifier' < 'D: ThisExpression') ? 'E: ThisExpression' : 'F: Identifier') : 'G: CallExpression')": 2,
    "(('A: CallExpression' && 'B: CallExpression') ? (('C: ThisExpression' < 'D: Identifier') ? 'E: ThisExpression' : 'F: Identifier') : 'G: CallExpression')": 2,
    "(('A: ThisExpression' < 'B: Identifier') ? 'C: ThisExpression' : 'D: Identifier')": 2,
    "('A: ThisExpression' < 'B: Identifier')": 2,
    "((('A: MemberExpression' === 1) && 'B: CallExpression') ? 'C: MemberExpression' : 'D: Identifier')": 2,
    "(('A: CallExpression' && !('B: CallExpression')) || 'C: AssignmentExpression')": 2,
    "('A: CallExpression' && (('B: UnaryExpression' === 'C: CallExpression') || ('D: BinaryExpression' && 'E: CallExpression')))": 2,
    "((-(1) === 'A: CallExpression') || ((null != 'B: MemberExpression') && 'C: CallExpression'))": 2,
    "(('A: CallExpression' !== 'B: CallExpression') && 'C: AssignmentExpression')": 2,
    "(('A: Identifier' < 0) ? (-(1) * 'B: CallExpression') : 'C: CallExpression')": 2,
    "(-(1) * 'A: CallExpression')": 2,
    "(('A: Identifier' < 0) && 'B: SequenceExpression')": 2,
    "((null === 'A: Identifier') ? null : ((0 === 'B: AssignmentExpression') ? 0 : ('C: BinaryExpression' ? 'D: Identifier' : 'E: UnaryExpression')))": 2,
    "((0 === 'A: AssignmentExpression') ? 0 : (('B: MemberExpression' === 'C: string') ? 'D: Identifier' : -('E: Identifier')))": 2,
    "(0 === 'A: AssignmentExpression')": 2,
    "(('A: MemberExpression' * 'B: number') + 'C: CallExpression')": 2,
    "(('A: MemberExpression' || 'B: ArrayExpression') + \"\")": 2,
    "(('A: CallExpression' || 'B: CallExpression') ? 'C: Identifier' : 'D: CallExpression')": 2,
    "(!(!('A: CallExpression')) && ('B: MemberExpression' && ('C: MemberExpression' === 0)))": 2,
    "('A: CallExpression' ? 'B: AssignmentExpression' : (('C: CallExpression' || 'D: UnaryExpression') ? 'E: SequenceExpression' : ('F: AssignmentExpression' ? 'G: SequenceExpression' : 'H: ConditionalExpression')))": 2,
    "(('A: CallExpression' || !('B: CallExpression')) ? 'C: SequenceExpression' : ('D: AssignmentExpression' ? 'E: SequenceExpression' : ('F: AssignmentExpression' ? 'G: SequenceExpression' : 'H: ConditionalExpression')))": 2,
    "('A: AssignmentExpression' ? 'B: SequenceExpression' : ('C: AssignmentExpression' ? 'D: SequenceExpression' : ('E: BinaryExpression' ? 'F: AssignmentExpression' : 'G: LogicalExpression')))": 2,
    "('A: AssignmentExpression' ? 'B: SequenceExpression' : ((null == 'C: Identifier') ? 'D: AssignmentExpression' : ('E: LogicalExpression' && 'F: SequenceExpression')))": 2,
    "((null == 'A: Identifier') ? 'B: AssignmentExpression' : (('C: BinaryExpression' && 'D: LogicalExpression') && 'E: SequenceExpression'))": 2,
    "((('A: UnaryExpression' == \"object\") && ('B: BinaryExpression' || 'C: BinaryExpression')) && 'D: SequenceExpression')": 2,
    "((typeof('A: Identifier') == \"object\") && (('B: string' in 'C: Identifier') || ('D: string' in 'E: Identifier')))": 2,
    "(((null === 'A: Identifier') || 'B: CallExpression') || 'C: SequenceExpression')": 2,
    "((typeof('A: Identifier') == \"string\") || ('B: Identifier' instanceof 'C: Identifier'))": 2,
    "((('A: LogicalExpression' || 'B: CallExpression') || 'C: CallExpression') || (null == 'D: Identifier'))": 2,
    "((('A: Identifier' - 'B: Identifier') < 0) ? (('C: Identifier' - 'D: Identifier') / ('E: Identifier' - 'F: CallExpression')) : (('G: Identifier' - 'H: Identifier') / ('I: CallExpression' - 'J: Identifier')))": 2,
    "(('A: Identifier' - 'B: Identifier') / ('C: Identifier' - 'D: CallExpression'))": 2,
    "(('A: Identifier' - 'B: Identifier') / ('C: CallExpression' - 'D: Identifier'))": 2,
    "((null != 'A: AssignmentExpression') && 'B: AssignmentExpression')": 2,
    "((('A: Identifier' < 'B: number') && (0 <= 'C: Identifier')) ? ('D: NewExpression' - 'E: Identifier') : 'F: CallExpression')": 2,
    "((('A: Identifier' < 'B: number') && (0 <= 'C: Identifier')) ? ('D: CallExpression' - 'E: Identifier') : 'F: CallExpression')": 2,
    "((null == 'A: Identifier') ? 'B: MemberExpression' : 'C: SequenceExpression')": 2,
    "(('A: MemberExpression' === 1) && ('B: MemberExpression' ? ('C: CallExpression' ? 'D: SequenceExpression' : 'E: LogicalExpression') : 'F: AssignmentExpression'))": 2,
    "('A: MemberExpression' ? ('B: CallExpression' ? 'C: SequenceExpression' : ('D: CallExpression' && 'E: SequenceExpression')) : 'F: AssignmentExpression')": 2,
    "('A: CallExpression' ? 'B: SequenceExpression' : ('C: CallExpression' && 'D: SequenceExpression'))": 2,
    "('A: Identifier' || ('B: CallExpression' ? 'C: MemberExpression' : 'D: MemberExpression'))": 2,
    "('A: CallExpression' ? 'B: CallExpression' : 'C: ThisExpression')": 2,
    "(!(('A: UnaryExpression' || 'B: UnaryExpression')) && (('C: string' === 'D: AssignmentExpression') ? ('E: CallExpression' > 'F: CallExpression') : ('G: CallExpression' < 'H: CallExpression')))": 2,
    "(('A: string' === 'B: AssignmentExpression') ? ('C: CallExpression' > 'D: CallExpression') : ('E: CallExpression' < 'F: CallExpression'))": 2,
    "(!(('A: UnaryExpression' || 'B: UnaryExpression')) && (('C: string' === 'D: AssignmentExpression') ? ('E: CallExpression' < 'F: CallExpression') : ('G: CallExpression' < 'H: CallExpression')))": 2,
    "(('A: string' === 'B: AssignmentExpression') ? ('C: CallExpression' < 'D: CallExpression') : ('E: CallExpression' < 'F: CallExpression'))": 2,
    "(!(!('A: LogicalExpression')) && (('B: BinaryExpression' ? 'C: CallExpression' : 'D: UnaryExpression') && ('E: BinaryExpression' ? 'F: CallExpression' : 'G: UnaryExpression')))": 2,
    "(!(('A: UnaryExpression' || 'B: UnaryExpression')) && (('C: string' === 'D: AssignmentExpression') ? ('E: CallExpression' === 'F: CallExpression') : 'G: SequenceExpression'))": 2,
    "(('A: string' === 'B: AssignmentExpression') ? ('C: CallExpression' === 'D: CallExpression') : 'E: SequenceExpression')": 2,
    "('A: AssignmentExpression' ? 'B: CallExpression' : 'C: ThisExpression')": 2,
    "((('A: CallExpression' < 0) || ('B: number' < 'C: CallExpression')) ? 'D: CallExpression' : ('E: CallExpression' ? ('F: Identifier' ? 'G: CallExpression' : 'H: CallExpression') : 'I: CallExpression'))": 2,
    "(('A: CallExpression' < 0) || ('B: number' < 'C: CallExpression'))": 2,
    "('A: CallExpression' ? ('B: Identifier' ? 'C: CallExpression' : 'D: CallExpression') : 'E: CallExpression')": 2,
    "((('A: Identifier' + 'B: Identifier') + 'C: string') + ('D: Identifier' + 'E: string'))": 2,
    "(((\"undefined\" != 'A: UnaryExpression') && (null != 'B: MemberExpression')) && 'C: AssignmentExpression')": 2,
    "((\"undefined\" != typeof('A: Identifier')) && (null != 'B: MemberExpression'))": 2,
    "((null != 'A: Identifier') ? 'B: SequenceExpression' : 'C: Identifier')": 2,
    "((\"string\" != typeof('A: Identifier')) ? 'B: Identifier' : ('C: CallExpression' ? ('D: BinaryExpression' ? 'E: Identifier' : null) : 'F: CallExpression'))": 2,
    "('A: CallExpression' ? (('B: UnaryExpression' == \"number\") ? 'C: Identifier' : null) : 'D: CallExpression')": 2,
    "((typeof('A: AssignmentExpression') == \"number\") ? 'B: Identifier' : null)": 2,
    "(typeof('A: AssignmentExpression') == \"number\")": 2,
    "typeof('A: AssignmentExpression')": 2,
    "('A: CallExpression' ? ((null != 'B: Identifier') ? 'C: SequenceExpression' : ('D: CallExpression' || 'E: number')) : ((null != 'F: Identifier') ? 'G: ThisExpression' : 'H: Identifier'))": 2,
    "((null != 'A: Identifier') ? 'B: SequenceExpression' : ('C: CallExpression' || 'D: number'))": 2,
    "((typeof('A: Identifier') == \"string\") ? (('B: CallExpression' % 'C: number') || 'D: number') : ('E: CallExpression' ? null : 'F: Identifier'))": 2,
    "((('A: CallExpression' < 'B: number') && !('C: Identifier')) && 'D: AssignmentExpression')": 2,
    "((!('A: MemberExpression') && 'B: Identifier') && 'C: AssignmentExpression')": 2,
    "(('A: Identifier' !== 'B: Identifier') && (('C: UnaryExpression' || 'D: MemberExpression') ? 'E: CallExpression' : ('F: MemberExpression' || 'G: SequenceExpression')))": 2,
    "((!('A: Identifier') || 'B: MemberExpression') ? 'C: CallExpression' : ('D: MemberExpression' || 'E: SequenceExpression'))": 2,
    "((null != 'A: MemberExpression') ? 'B: CallExpression' : (('C: UnaryExpression' == \"string\") && ('D: BinaryExpression' ? 'E: CallExpression' : 'F: CallExpression')))": 2,
    "((typeof('A: MemberExpression') == \"string\") && ((null != 'B: AssignmentExpression') ? 'C: CallExpression' : 'D: CallExpression'))": 2,
    "(typeof('A: MemberExpression') == \"string\")": 2,
    "((null != 'A: AssignmentExpression') ? 'B: CallExpression' : 'C: CallExpression')": 2,
    "(!(!('A: CallExpression')) && 'B: SequenceExpression')": 2,
    "(0 == (('A: CallExpression' - 'B: Identifier') % 'C: number'))": 2,
    "(!(!('A: CallExpression')) && !('B: MemberExpression'))": 2,
    "(!(!('A: CallExpression')) && 'B: MemberExpression')": 2,
    "((null != 'A: Identifier') ? 'B: SequenceExpression' : -('C: CallExpression'))": 2,
    "((\"string\" != typeof('A: Identifier')) ? -('B: Identifier') : 'C: Identifier')": 2,
    "('A: MemberExpression' ? 'B: SequenceExpression' : 'C: AssignmentExpression')": 2,
    "('A: CallExpression' && (0 < 'B: CallExpression'))": 2,
    "((('A: Identifier' && 'B: BinaryExpression') || ('C: UnaryExpression' && 'D: BinaryExpression')) && 'E: UpdateExpression')": 2,
    "((typeof('A: Identifier') == \"boolean\") ? ('B: CallExpression' && 'C: SequenceExpression') : 'D: SequenceExpression')": 2,
    "(('A: Identifier' || !('B: Identifier')) ? 'C: Identifier' : 'D: SequenceExpression')": 2,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) ? 'E: CallExpression' : 'F: Identifier')": 2,
    "((0 < 'A: Identifier') ? 'B: string' : 'C: string')": 2,
    "('A: CallExpression' && ('B: CallExpression' ? 'C: AssignmentExpression' : 'D: AssignmentExpression'))": 2,
    "((void(0) === 'A: Identifier') ? 'B: CallExpression' : ('C: CallExpression' + ('D: Identifier' * 'E: BinaryExpression')))": 2,
    "('A: Identifier' ? (('B: string' === 'C: Identifier') ? ('D: BinaryExpression' ? 'E: Identifier' : null) : ('F: BinaryExpression' ? 'G: Identifier' : null)) : (('H: string' === 'I: Identifier') ? ('J: LogicalExpression' ? 'K: Identifier' : null) : ('L: LogicalExpression' ? 'M: Identifier' : null)))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: BinaryExpression' || 'D: BinaryExpression') ? 'E: Identifier' : null) : (('F: BinaryExpression' || 'G: BinaryExpression') ? 'H: Identifier' : null))": 2,
    "(('A: Identifier' || 'B: MemberExpression') || 'C: SequenceExpression')": 2,
    "(('A: Identifier' && ('B: UnaryExpression' !== 'C: Identifier')) && 'D: CallExpression')": 2,
    "('A: Identifier' && (!(0) !== 'B: Identifier'))": 2,
    "((!(0) === 'A: Identifier') ? 'B: CallExpression' : ('C: Identifier' ? 'D: MemberExpression' : 'E: Identifier'))": 2,
    "('A: Identifier' ? (('B: string' === 'C: Identifier') ? ('D: BinaryExpression' ? 'E: Identifier' : null) : ('F: BinaryExpression' ? 'G: ConditionalExpression' : 'H: ConditionalExpression')) : (('I: string' === 'J: Identifier') ? ('K: LogicalExpression' ? 'L: Identifier' : null) : ('M: BinaryExpression' ? 'N: ConditionalExpression' : 'O: ConditionalExpression')))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: UnaryExpression' !== 'D: AssignmentExpression') ? 'E: Identifier' : null) : (('F: string' === 'G: Identifier') ? ('H: BinaryExpression' ? 'I: Identifier' : null) : ('J: BinaryExpression' ? 'K: Identifier' : null)))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: LogicalExpression' || 'D: BinaryExpression') ? 'E: Identifier' : null) : (('F: string' === 'G: Identifier') ? ('H: LogicalExpression' ? 'I: Identifier' : null) : ('J: LogicalExpression' ? 'K: Identifier' : null)))": 2,
    "(('A: string' === 'B: Identifier') ? (('C: LogicalExpression' || 'D: BinaryExpression') ? 'E: Identifier' : null) : (('F: LogicalExpression' || 'G: BinaryExpression') ? 'H: Identifier' : null))": 2,
    "('A: Identifier' + ((1 === 'B: CallExpression') ? 'C: string' : ('D: BinaryExpression' ? 'E: string' : 'F: ConditionalExpression')))": 2,
    "((1 === 'A: CallExpression') ? 'B: string' : ((1 == 'C: Identifier') ? 'D: string' : ('E: BinaryExpression' ? 'F: string' : 'G: ConditionalExpression')))": 2,
    "((('A: ConditionalExpression' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || (('E: Identifier' <= 1) && 'F: ArrayExpression'))": 2,
    "((('A: BinaryExpression' ? 'B: ArrayExpression' : 'C: LogicalExpression') || ('D: BinaryExpression' && 'E: ArrayExpression')) || (('F: Identifier' < 'G: MemberExpression') && 'H: ArrayExpression'))": 2,
    "((('A: Identifier' <= 'B: MemberExpression') ? 'C: ArrayExpression' : ('D: BinaryExpression' && 'E: ArrayExpression')) || (('F: Identifier' <= 1) && 'G: ArrayExpression'))": 2,
    "(('A: Identifier' <= 'B: MemberExpression') ? 'C: ArrayExpression' : (('D: Identifier' < 'E: MemberExpression') && 'F: ArrayExpression'))": 2,
    "((('A: AssignmentExpression' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: ArrayExpression')) || (('E: Identifier' <= 1) && 'F: ArrayExpression'))": 2,
    "(('A: AssignmentExpression' || ('B: BinaryExpression' && 'C: ArrayExpression')) || (('D: Identifier' < 'E: MemberExpression') && 'F: ArrayExpression'))": 2,
    "('A: AssignmentExpression' || (('B: Identifier' <= 1) && 'C: ArrayExpression'))": 2,
    "((null != 'A: MemberExpression') ? (('B: Identifier' || 'C: LogicalExpression') || ('D: BinaryExpression' && 'E: ArrayExpression')) : 'F: Identifier')": 2,
    "(0 < +('A: Identifier'))": 2,
    "(((0 < 'A: Identifier') - ('B: Identifier' < 0)) || +('C: Identifier'))": 2,
    "((0 < 'A: Identifier') - ('B: Identifier' < 0))": 2,
    "('A: Identifier' ? 'B: SequenceExpression' : 'C: string')": 2,
    "('A: Identifier' ? 'B: CallExpression' : \"\")": 2,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: LogicalExpression' ? 'D: string' : \"\")) + ('E: Identifier' ? ('F: BinaryExpression' + 'G: string') : \"\"))": 2,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: Identifier' ? 'D: BinaryExpression' : \"\")) + (('E: LogicalExpression' || 'F: Identifier') ? 'G: string' : \"\"))": 2,
    "((('A: ConditionalExpression' + 'B: string') + ('C: Identifier' ? 'D: BinaryExpression' : \"\")) + ('E: Identifier' ? ('F: BinaryExpression' + 'G: string') : \"\"))": 2,
    "((('A: BinaryExpression' ? 'B: string' : \"\") + 'C: string') + ('D: Identifier' ? ('E: BinaryExpression' + 'F: string') : \"\"))": 2,
    "((('A: Identifier' < 0) ? 'B: string' : \"\") + 'C: string')": 2,
    "(('A: Identifier' < 0) ? 'B: string' : \"\")": 2,
    "((('A: Identifier' || 'B: Identifier') || 'C: Identifier') ? 'D: string' : \"\")": 2,
    "('A: CallExpression' ? (('B: BinaryExpression' + 'C: BinaryExpression') + ('D: number' * 'E: CallExpression')) : 'F: Identifier')": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') || ('C: LogicalExpression' && 'D: BinaryExpression')) || 'E: SequenceExpression')": 2,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && (0 <= 'C: Identifier')) || (('D: BinaryExpression' && 'E: BinaryExpression') && ('F: Identifier' <= 0)))": 2,
    "(((0 <= 'A: Identifier') && (0 <= 'B: Identifier')) && (0 <= 'C: Identifier'))": 2,
    "((0 <= 'A: Identifier') && (0 <= 'B: Identifier'))": 2,
    "((typeof('A: Identifier') == \"boolean\") && 'B: AssignmentExpression')": 2,
    "(((null != 'A: MemberExpression') && ('B: MemberExpression' == null)) && 'C: AssignmentExpression')": 2,
    "((null != 'A: MemberExpression') && ('B: MemberExpression' == null))": 2,
    "((null != 'A: Identifier') ? 'B: SequenceExpression' : ((null != 'C: MemberExpression') && ('D: BinaryExpression' ? 'E: SequenceExpression' : 'F: LogicalExpression')))": 2,
    "(((null != 'A: MemberExpression') && (null != 'B: MemberExpression')) ? 'C: CallExpression' : 'D: SequenceExpression')": 2,
    "((null != 'A: MemberExpression') && (null != 'B: MemberExpression'))": 2,
    "((null != 'A: AssignmentExpression') ? 'B: MemberExpression' : 'C: Identifier')": 2,
    "((null == 'A: Identifier') && 'B: AssignmentExpression')": 2,
    "((null != 'A: MemberExpression') && ((null != 'B: MemberExpression') ? 'C: SequenceExpression' : ('D: BinaryExpression' && 'E: UnaryExpression')))": 2,
    "((null != 'A: MemberExpression') ? 'B: SequenceExpression' : ((null != 'C: MemberExpression') && delete('D: MemberExpression')))": 2,
    "((null != 'A: MemberExpression') && delete('B: MemberExpression'))": 2,
    "((void(0) === 'A: Identifier') ? 'B: Identifier' : (('C: UnaryExpression' == \"function\") && 'D: SequenceExpression'))": 2,
    "((typeof('A: Identifier') == \"function\") && 'B: SequenceExpression')": 2,
    "((void(0) !== 'A: MemberExpression') && (('B: UnaryExpression' === 'C: Identifier') ? 'D: MemberExpression' : 'E: SequenceExpression'))": 2,
    "(('A: AssignmentExpression' < -('B: number')) ? 'C: string' : (('D: Identifier' < 'E: UnaryExpression') ? 'F: string' : ('G: BinaryExpression' ? 'H: string' : 'I: ConditionalExpression')))": 2,
    "('A: AssignmentExpression' < -('B: number'))": 2,
    "('A: string' + ((1 === 'B: BinaryExpression') ? 'C: string' : 'D: string'))": 2,
    "((('A: Identifier' + 'B: string') + ('C: BinaryExpression' ? 'D: string' : 'E: string')) + 'F: string')": 2,
    "(('A: Identifier' + 'B: string') + ((1 === 'C: BinaryExpression') ? 'D: string' : 'E: string'))": 2,
    "((0 === 'A: Identifier') ? 'B: string' : 'C: string')": 2,
    "(('A: Identifier' + 'B: Identifier') < 'C: number')": 2,
    "((('A: number' === 'B: Identifier') || ('C: number' === 'D: Identifier')) ? 'E: string' : 'F: string')": 2,
    "('A: CallExpression' !== 'B: number')": 2,
    "(('A: Identifier' < 1) ? 'B: string' : (('C: Identifier' < 'D: number') ? 'E: string' : ('F: BinaryExpression' ? 'G: string' : 'H: ConditionalExpression')))": 2,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: Identifier' < 'E: number') ? 'F: string' : ('G: LogicalExpression' ? 'H: string' : 'I: ConditionalExpression')))": 2,
    "(('A: Identifier' < 'B: number') ? 'C: string' : (('D: BinaryExpression' && 'E: BinaryExpression') ? 'F: string' : ('G: LogicalExpression' ? 'H: string' : 'I: string')))": 2,
    "((('A: CallExpression' === 'B: CallExpression') && ('C: CallExpression' === 'D: CallExpression')) ? 'E: string' : (('F: BinaryExpression' && 'G: BinaryExpression') ? 'H: string' : 'I: string'))": 2,
    "((('A: CallExpression' === 'B: CallExpression') && ('C: CallExpression' === 'D: CallExpression')) ? 'E: string' : 'F: string')": 2,
    "('A: number' - 1)": 2,
    "(+('A: number') * 'B: number')": 2,
    "+((('A: number' * 'B: number') + 'C: number'))": 2,
    "-((('A: number' * 'B: number') + 'C: number'))": 2,
    "(('A: Identifier' >= 0) ? (('B: BinaryExpression' + 'C: string') + 'D: CallExpression') : (('E: BinaryExpression' + 'F: string') + 'G: CallExpression'))": 2,
    "(('A: number' + 'B: Identifier') % 'C: number')": 2,
    "(+('A: Identifier') + (('B: UnaryExpression' > 'C: number') ? 'D: number' : 'E: number'))": 2,
    "((+('A: Identifier') > 'B: number') ? 'C: number' : 'D: number')": 2,
    "((('A: BinaryExpression' ? 'B: string' : '') + 'C: Identifier') + 'D: string')": 2,
    "((('A: Identifier' < 'B: number') ? 'C: string' : '') + 'D: Identifier')": 2,
    "(('A: Identifier' < 'B: number') ? 'C: string' : '')": 2,
    "(-(('A: CallExpression' - 'B: CallExpression')) / 'C: number')": 2,
    "-(('A: CallExpression' - 'B: CallExpression'))": 2,
    "((('A: number' - 'B: MemberExpression') / 'C: number') / 'D: number')": 2,
    "(-(1) > 'A: CallExpression')": 2,
    "((-('A: number') / 'B: number') < 'C: CallExpression')": 2,
    "-(('A: number' / 'B: number'))": 2,
    "(-(1) - (('A: number' / 'B: number') / 'C: number'))": 2,
    "(-('A: number') - (('B: number' / 'C: number') / 'D: number'))": 2,
    "((1 / 'A: Identifier') < 0)": 2,
    "('A: CallExpression' + ('B: number' * 'C: CallExpression'))": 2,
    "((('A: Identifier' === 'B: Identifier') && ('C: Identifier' === 'D: BinaryExpression')) || (('E: Identifier' === 'F: BinaryExpression') && (0 === 'G: Identifier')))": 2,
    "(('A: Identifier' === 'B: Identifier') && ('C: Identifier' === ('D: Identifier' + 1)))": 2,
    "(('A: Identifier' === ('B: Identifier' + 1)) && (0 === 'C: Identifier'))": 2,
    "((('A: number' * 'B: BinaryExpression') + ('C: number' * 'D: BinaryExpression')) + 'E: number')": 2,
    "(('A: number' * ('B: number' * 'C: BinaryExpression')) + ('D: number' * ('E: number' * 'F: number')))": 2,
    "(('A: number' * ('B: number' * 'C: BinaryExpression')) - 'D: number')": 2,
    "((('A: number' * 'B: BinaryExpression') + ('C: number' * 'D: BinaryExpression')) - 'E: number')": 2,
    "(('A: number' * ('B: number' * 'C: BinaryExpression')) + ('D: number' * (1 * 'E: number')))": 2,
    "('A: number' * (1 * 'B: number'))": 2,
    "(1 * 'A: number')": 2,
    "('A: string' instanceof 'B: Identifier')": 2,
    "(1 instanceof 'A: Identifier')": 2,
    "(null instanceof 'A: Identifier')": 2,
    "(('A: Identifier' <= +('B: Identifier')) && (+('C: Identifier') <= 'D: Identifier'))": 2,
    "('A: Identifier' <= +('B: Identifier'))": 2,
    "(+('A: Identifier') <= 'B: Identifier')": 2,
    "(('A: number' / 'B: number') - 'C: CallExpression')": 2,
    "((('' + 'A: Identifier') + 'B: string') + ('C: number' * 'D: Identifier'))": 2,
    "('A: CallExpression' < -('B: number'))": 2,
    "((('A: number' + 'B: number') + 'C: Identifier') % 'D: number')": 2,
    "(('A: number' + 'B: number') + 'C: Identifier')": 2,
    "('A: Identifier' < ('B: Identifier' + 'C: number'))": 2,
    "(('A: number' === 'B: CallExpression') ? 1 : 0)": 2,
    "(('A: MemberExpression' != null) ? 'B: MemberExpression' : 'C: string')": 2,
    "(('A: MemberExpression' === 'B: CallExpression') ? 'C: number' : 'D: number')": 2,
    "(('A: CallExpression' !== 'B: string') && !('C: CallExpression'))": 2,
    "(('A: CallExpression' !== 'B: string') && ('C: CallExpression' > 'D: Identifier'))": 2,
    "(('A: string' in 'B: Identifier') ? !(!('C: MemberExpression')) : true)": 2,
    "(('A: string' in 'B: Identifier') ? !(!('C: MemberExpression')) : 'D: MemberExpression')": 2,
    "('A: MemberExpression' && ('B: MemberExpression' === 'C: string'))": 2,
    "((typeof('A: Identifier') === 'function') ? false : 'B: Identifier')": 2,
    "(('A: Identifier' && 'B: CallExpression') ? 'C: string' : 'D: string')": 2,
    "('A: CallExpression' ? 'B: Identifier' : 'C: MemberExpression')": 2,
    "(('A: string' === 'B: Identifier') ? 'C: string' : 'D: Identifier')": 2,
    "('A: Identifier' && ('B: MemberExpression' & 'C: number'))": 2,
    "('A: CallExpression' * (1 << 'B: number'))": 2,
    "(('A: UpdateExpression' === 0) ? 'B: CallExpression' : 'C: Identifier')": 2,
    "(('A: MemberExpression' === 'B: string') ? 'C: Identifier' : 'D: MemberExpression')": 2,
    "(('A: MemberExpression' || 'B: MemberExpression') || false)": 2,
    "(('A: MemberExpression' === 'B: string') ? null : 'C: Identifier')": 2,
    "('A: MemberExpression' ? 'B: ArrowFunctionExpression' : 'C: ArrowFunctionExpression')": 2,
    "((('A: string' === 'B: Identifier') && ('C: Identifier' !== 'D: Identifier')) && ('E: CallExpression' === 'F: CallExpression'))": 2,
    "(('A: string' === 'B: Identifier') && ('C: Identifier' !== 'D: Identifier'))": 2,
    "(('A: Identifier' === 'B: Identifier') || ('C: MemberExpression' === 'D: Identifier'))": 2,
    "((('A: BinaryExpression' + 'B: string') + ('C: BinaryExpression' + 'D: string')) + (('E: string' + 'F: Identifier') + 'G: string'))": 2,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: MemberExpression' === 'D: Identifier')) || ('E: MemberExpression' === -(1)))": 2,
    "((('A: MemberExpression' > 'B: Identifier') || ('C: BinaryExpression' > 'D: Identifier')) || ('E: MemberExpression' === 'F: Identifier'))": 2,
    "(('A: MemberExpression' > 'B: Identifier') || ((0 - 'C: MemberExpression') > 'D: Identifier'))": 2,
    "((0 - 'A: MemberExpression') > 'B: Identifier')": 2,
    "(0 - 'A: MemberExpression')": 2,
    "('A: MemberExpression' === -(1))": 2,
    "('A: Identifier' && 'B: ObjectExpression')": 2,
    "(('A: Identifier' && 'B: Identifier') && 'C: NewExpression')": 2,
    "('A: MemberExpression' ? 'B: TemplateLiteral' : 'C: Identifier')": 2,
    "((typeof('A: Identifier') === 'string') ? ('B: string' + 'C: Identifier') : ('D: string' + 'E: Identifier'))": 2,
    "(('A: MemberExpression' > 0) || ('B: MemberExpression' > 0))": 2,
    "(!('A: Identifier') || 'B: Identifier')": 2,
    "((typeof('A: Identifier') === 'object') && 'B: MemberExpression')": 2,
    "(('A: Identifier' && 'B: Identifier') && (typeof('C: MemberExpression') === 'string'))": 2,
    "((('A: Identifier' >= 1) && ('B: Identifier' >= 0)) && ('C: MemberExpression' !== 'D: MemberExpression'))": 2,
    "(('A: Identifier' !== 1) || ('B: Identifier' !== 1))": 2,
    "(('A: Identifier' < 0) || ('B: MemberExpression' !== 'C: MemberExpression'))": 2,
    "('A: Identifier' ? ('B: MemberExpression' || 'C: MemberExpression') : '')": 2,
    "((typeof('A: Identifier') === 'string') && ('B: CallExpression' || 'C: CallExpression'))": 2,
    "((!('A: Identifier') && ('B: string' === 'C: Identifier')) && 'D: CallExpression')": 2,
    "('A: Identifier' ? 1 : (('B: Identifier' != null) ? 'C: Identifier' : 'D: Identifier'))": 2,
    "(('A: Identifier' != null) ? 'B: Identifier' : 'C: Identifier')": 2,
    "((0 === 'A: Identifier') ? 'B: Identifier' : 'C: Identifier')": 2,
    "((0 === 'A: Identifier') ? 'B: Identifier' : ('C: Identifier' + 'D: Identifier'))": 2,
    "(((null == 'A: Identifier') || ('B: MemberExpression' === 'C: MemberExpression')) ? 'D: MemberExpression' : 'E: MemberExpression')": 2,
    "((null == 'A: Identifier') || ('B: MemberExpression' === 'C: MemberExpression'))": 2,
    "((('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: number')) && 'E: CallExpression')": 2,
    "(('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: number'))": 2,
    "((('A: LogicalExpression' && 'B: UnaryExpression') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: string'))": 2,
    "(('function' === 'A: Identifier') ? 'B: string' : 'C: string')": 2,
    "(('A: MemberExpression' > 1) ? 'B: string' : 'C: string')": 2,
    "((null == 'A: Identifier') || ('B: MemberExpression' == null))": 2,
    "(('A: CallExpression' != null) || ('B: CallExpression' != null))": 2,
    "!((('A: MemberExpression' && 'B: MemberExpression') && 'C: CallExpression'))": 2,
    "(('A: MemberExpression' && 'B: MemberExpression') && 'C: CallExpression')": 2,
    "((('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: Identifier')) && ('E: MemberExpression' === 'F: string'))": 2,
    "((('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: Identifier')) && !('E: MemberExpression'))": 2,
    "('A: Identifier' - ('B: Identifier' + 'C: Identifier'))": 2,
    "(-('A: Identifier') + ('B: Identifier' + 'C: Identifier'))": 2,
    "(-('A: Identifier') * 'B: number')": 2,
    "((('A: CallExpression' && 'B: CallExpression') && 'C: CallExpression') && 'D: CallExpression')": 2,
    "((typeof('A: Identifier') === 'number') && 'B: CallExpression')": 2,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: string' in 'D: Identifier')) ? 'E: MemberExpression' : 'F: Identifier')": 2,
    "(('A: Identifier' && ('B: UnaryExpression' === 'object')) && ('C: string' in 'D: Identifier'))": 2,
    "(('A: Identifier' != null) ? 'B: MemberExpression' : 'C: CallExpression')": 2,
    "(('A: MemberExpression' === 'B: MemberExpression') && 'C: CallExpression')": 2,
    "((('A: Identifier' && 'B: BinaryExpression') && 'C: CallExpression') ? 'D: Identifier' : 'E: SequenceExpression')": 2,
    "(('A: Identifier' && ('B: ThisExpression' === 'C: Identifier')) && 'D: CallExpression')": 2,
    "('A: Identifier' && ('B: ThisExpression' === 'C: Identifier'))": 2,
    "((('A: UnaryExpression' == \"object\") && ('B: UnaryExpression' == \"function\")) ? 'C: FunctionExpression' : 'D: FunctionExpression')": 2,
    "((('A: CallExpression' - 'B: Identifier') >= 'C: Identifier') ? 'D: CallExpression' : 'E: AssignmentExpression')": 2,
    "(('A: MemberExpression' > 0) ? 'B: AssignmentExpression' : 'C: SequenceExpression')": 2,
    "(('A: MemberExpression' === 0) ? 'B: string' : 'C: string')": 2,
    "((('A: MemberExpression' === 'B: Identifier') && ('C: MemberExpression' === 'D: Identifier')) ? null : 'E: ObjectExpression')": 2,
    "(('A: CallExpression' > 'B: Identifier') ? 'C: Identifier' : 0)": 2,
    "((('A: UnaryExpression' == \"function\") && ('B: Identifier' > 0)) && ('C: Identifier' > 0))": 2,
    "((typeof('A: Identifier') == \"function\") && ('B: Identifier' > 0))": 2,
    "(((\"undefined\" != 'A: UnaryExpression') && ('B: UnaryExpression' !== 'C: MemberExpression')) && 'D: SequenceExpression')": 2,
    "((\"undefined\" != typeof('A: Identifier')) && (void(0) !== 'B: MemberExpression'))": 2,
    "(((null == 'A: Identifier') && (null == 'B: Identifier')) || (('C: Identifier' && 'D: UnaryExpression') && 'E: SequenceExpression'))": 2,
    "((null == 'A: Identifier') && (null == 'B: Identifier'))": 2,
    "(('A: string' === 'B: Identifier') ? 'C: AssignmentExpression' : 'D: AssignmentExpression')": 2,
    "((void(0) === 'A: Identifier') || 'B: Identifier')": 2,
    "('A: Identifier' ? 0 : 'B: Identifier')": 2,
    "(('A: MemberExpression' === 'B: Identifier') ? null : 'C: ObjectExpression')": 2,
    "((typeof('A: Identifier') == \"number\") && (null != 'B: MemberExpression'))": 2,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) ? 'E: AssignmentExpression' : 'F: AssignmentExpression')": 2,
    "((typeof('A: MemberExpression') == \"function\") && ('B: MemberExpression' > 0))": 2,
    "(('A: CallExpression' >= 0) || 'B: AssignmentExpression')": 2,
    "('A: Identifier' ? 'B: FunctionExpression' : 'C: FunctionExpression')": 2,
    "(('A: Identifier' > 0) && ('B: Identifier' > 0))": 2,
    "((typeof('A: Identifier') === 'number') || (typeof('B: Identifier') === 'number'))": 2,
    "((void(0) === 'A: Identifier') ? true : 'B: Identifier')": 2,
    "(!('A: Identifier') ? 'B: Identifier' : 0)": 2,
    "(!('A: Identifier') ? 'B: Identifier' : 'C: string')": 2,
    "((typeof('A: Identifier') === 'number') && ('B: MemberExpression' != null))": 2,
    "('A: Identifier' && (typeof('B: Identifier') !== 'number'))": 2,
    "(!('A: Identifier') && (typeof('B: Identifier') !== 'number'))": 2,
    "(((null == 'A: Identifier') || ('B: UnaryExpression' === 'boolean')) || ('' === 'C: Identifier'))": 2,
    "((null == 'A: Identifier') || (typeof('B: Identifier') === 'boolean'))": 2,
    "(('A: Identifier' === 'B: Identifier') && ((0 === 'C: Identifier') || ('D: MemberExpression' === 'E: Identifier')))": 2,
    "((0 === 'A: Identifier') || ('B: MemberExpression' === 'C: Identifier'))": 2,
    "(('A: Identifier' === 'B: Identifier') && ('C: UpdateExpression' === 'D: Identifier'))": 2,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: Identifier' !== 'D: string')) && ('E: Identifier' !== 'F: string'))": 2,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' !== 'D: string')) && ('E: Identifier' !== 'F: string'))": 2,
    "('A: CallExpression' ? 'B: Identifier' : null)": 2,
    "(('A: string' === 'B: Identifier') && 'C: MemberExpression')": 2,
    "((('A: CallExpression' + 'B: MemberExpression') + 'C: string') + 'D: CallExpression')": 2,
    "(('A: CallExpression' + 'B: MemberExpression') + 'C: string')": 2,
    "('A: Identifier' ? 'B: MemberExpression' : ('C: Identifier' ? 1 : 0))": 2,
    "(typeof('A: MemberExpression') !== 'B: string')": 2,
    "('A: CallExpression' || null)": 2,
    "(('A: MemberExpression' === 'B: string') ? 'C: string' : '')": 2,
    "(('A: MemberExpression' === 'B: Identifier') ? null : 'C: MemberExpression')": 2,
    "('A: MemberExpression' / 'B: Identifier')": 2,
    "((typeof('A: Identifier') === 'function') ? 'B: Identifier' : null)": 2,
    "!(('A: Identifier' && 'B: Identifier'))": 2,
    "((('A: BinaryExpression' && 'B: LogicalExpression') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: string'))": 2,
    "((('A: MemberExpression' === 'B: string') && ('C: BinaryExpression' || 'D: BinaryExpression')) && ('E: MemberExpression' === 'F: string'))": 2,
    "('A: Identifier' === ('B: MemberExpression' - 1))": 2,
    "('A: MemberExpression' ? 'B: CallExpression' : null)": 2,
    "(('A: Identifier' && 'B: MemberExpression') || ('C: Identifier' && 'D: MemberExpression'))": 2,
    "((+('A: CallExpression') + 'B: string') + 'C: CallExpression')": 2,
    "(+('A: CallExpression') + 'B: string')": 2,
    "('A: CallExpression' || (('B: Identifier' !== null) && 'C: CallExpression'))": 2,
    "(('A: MemberExpression' && ('B: MemberExpression' !== 'C: string')) && 'D: MemberExpression')": 2,
    "(('A: MemberExpression' === 'B: string') && !('C: Identifier'))": 2,
    "(('A: CallExpression' !== -(1)) || ('B: CallExpression' !== -(1)))": 2,
    "(('A: string' === 'B: Identifier') || 'C: Identifier')": 2,
    "('A: Identifier' ? 'B: Identifier' : ('C: string' + 'D: Identifier'))": 2,
    "(typeof('A: MemberExpression') !== 'boolean')": 2,
    "((typeof('A: Identifier') === 'string') ? 'B: Identifier' : 'C: Identifier')": 2,
    "('A: Identifier' || (typeof('B: Identifier') === 'undefined'))": 2,
    "((('A: MemberExpression' || 'B: MemberExpression') || 'C: MemberExpression') || 'D: MemberExpression')": 2,
    "((('A: BinaryExpression' + 'B: string') + ('C: MemberExpression' || '')) + 'D: string')": 2,
    "('A: MemberExpression' + ('B: MemberExpression' || ''))": 2,
    "(('A: MemberExpression' >= 'B: number') && ('C: MemberExpression' < 'D: number'))": 2,
    "('A: MemberExpression' ? 'B: ObjectExpression' : 'C: string')": 2,
    "('A: MemberExpression' ? 1 : 0)": 2,
    "('A: MemberExpression' ? 'B: number' : 0)": 2,
    "('A: MemberExpression' && ('B: CallExpression' !== -(1)))": 2,
    "(('A: MemberExpression' === 'B: string') && ('C: Identifier' < 'D: MemberExpression'))": 2,
    "('A: MemberExpression' <= ('B: Identifier' - 'C: Identifier'))": 2,
    "('A: string' + ('B: CallExpression' ? 'C: string' : 'D: Identifier'))": 2,
    "('A: CallExpression' ? 'B: string' : 'C: Identifier')": 2,
    "('A: Identifier' && ('B: number' === ('C: MemberExpression' * 'D: MemberExpression')))": 2,
    "('A: Identifier' & 1)": 2,
    "('A: ThisExpression' + 'B: Identifier')": 2,
    "(('A: MemberExpression' === 'B: number') && ('C: ThisExpression' === 'D: Identifier'))": 2,
    "void(1)": 2,
    "('A: Identifier' && (typeof('B: MemberExpression') !== \"undefined\"))": 2,
    "(\"object\" === (('A: UnaryExpression' === \"undefined\") ? \"undefined\" : 'B: CallExpression'))": 2,
    "('A: Identifier' && ('B: MemberExpression' === null))": 2,
    "((null === 'A: Identifier') && ('B: MemberExpression' === 'C: Identifier'))": 2,
    "(('A: string' in 'B: Identifier') ? 'C: MemberExpression' : 'D: MemberExpression')": 2,
    "('A: MemberExpression' && ('B: MemberExpression' > 'C: MemberExpression'))": 2,
    "((('A: Identifier' !== null) && 'B: MemberExpression') || 'C: MemberExpression')": 2,
    "((typeof('A: Identifier') === 'undefined') ? 'undefined' : 'B: CallExpression')": 2,
    "(\"undefined\" === 'A: CallExpression')": 2,
    "(('A: MemberExpression' > 0) ? 'B: MemberExpression' : !('C: MemberExpression'))": 2,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + ('D: MemberExpression' || 'E: Identifier'))": 2,
    "(('A: MemberExpression' && ('B: MemberExpression' > 0)) && !('C: CallExpression'))": 2,
    "((('A: ThisExpression' instanceof 'B: Identifier') && 'C: MemberExpression') || 'D: MemberExpression')": 2,
    "(('A: ThisExpression' instanceof 'B: Identifier') && 'C: MemberExpression')": 2,
    "(\"string\" === 'A: CallExpression')": 2,
    "((\"function\" === 'A: Identifier') && ('B: Identifier' instanceof 'C: Identifier'))": 2,
    "((('A: Identifier' instanceof 'B: MemberExpression') && ('C: MemberExpression' === 'D: MemberExpression')) && ('E: MemberExpression' === 'F: MemberExpression'))": 2,
    "(('A: Identifier' instanceof 'B: MemberExpression') && ('C: MemberExpression' === 'D: MemberExpression'))": 2,
    "((typeof('A: Identifier') !== \"undefined\") && 'B: Identifier')": 2,
    "('A: MemberExpression' || (('B: MemberExpression' + 'C: string') + 'D: MemberExpression'))": 2,
    "((('A: BinaryExpression' + 'B: string') + ('C: BinaryExpression' ? 'D: LogicalExpression' : \"\")) + 'E: string')": 2,
    "('A: AssignmentExpression' && 'B: string')": 2,
    "((('A: MemberExpression' + 'B: MemberExpression') + 'C: MemberExpression') + 'D: MemberExpression')": 2,
    "(('A: Identifier' > 0) ? 'B: MemberExpression' : -(1))": 2,
    "((!('A: Identifier') || !('B: Identifier')) || ('C: CallExpression' !== 'D: CallExpression'))": 2,
    "((('A: Identifier' - 'B: Identifier') / 'C: number') + 'D: Identifier')": 2,
    "('A: Identifier' <= ('B: Identifier' - 'C: Identifier'))": 2,
    "((-('A: Identifier') === 'B: Identifier') || (('C: Identifier' !== 'D: Identifier') && ('E: MemberExpression' < 'F: MemberExpression')))": 2,
    "(('A: Identifier' !== 'B: Identifier') && ('C: MemberExpression' < 'D: MemberExpression'))": 2,
    "((('A: Identifier' < 'B: Identifier') && ('C: Identifier' < 'D: Identifier')) && ('E: CallExpression' === 'F: CallExpression'))": 2,
    "(('A: Identifier' < 'B: Identifier') && ('C: Identifier' < 'D: Identifier'))": 2,
    "((('A: Identifier' >= 0) && ('B: Identifier' < 'C: Identifier')) && ('D: MemberExpression' !== -(1)))": 2,
    "('A: MemberExpression' !== -(1))": 2,
    "('A: MemberExpression' <= 'B: CallExpression')": 2,
    "(('A: Identifier' >= ('B: MemberExpression' / 'C: number')) || ('D: Identifier' >= ('E: MemberExpression' / 'F: number')))": 2,
    "((('A: Identifier' - 'B: Identifier') - 'C: Identifier') - 1)": 2,
    "((('A: UnaryExpression' == \"object\") && (\"undefined\" != 'B: UnaryExpression')) ? 'C: AssignmentExpression' : (('D: BinaryExpression' && 'E: MemberExpression') ? 'F: CallExpression' : 'G: SequenceExpression'))": 2,
    "((('A: UnaryExpression' == \"function\") && 'B: MemberExpression') ? 'C: CallExpression' : 'D: SequenceExpression')": 2,
    "('A: Identifier' ? 'B: FunctionExpression' : 'C: CallExpression')": 2,
    "(('A: string' === 'B: Identifier') || 'C: CallExpression')": 2,
    "('A: CallExpression' ? 'B: FunctionExpression' : 'C: CallExpression')": 1,
    "(('A: Identifier' && ('B: UnaryExpression' == \"function\")) ? 'C: CallExpression' : void('D: CallExpression'))": 1,
    "('A: Identifier' && (typeof('B: MemberExpression') == \"function\"))": 1,
    "((typeof('A: MemberExpression') == \"function\") ? 'B: CallExpression' : 'C: NewExpression')": 1,
    "((('A: Identifier' && 'B: BinaryExpression') && (0 <= 'C: MemberExpression')) && (0 == ('D: MemberExpression' % 1)))": 1,
    "(('A: Identifier' && ('B: UnaryExpression' == \"number\")) && (0 <= 'C: MemberExpression'))": 1,
    "('A: Identifier' && (typeof('B: MemberExpression') == \"number\"))": 1,
    "(0 <= 'A: MemberExpression')": 1,
    "(0 == ('A: MemberExpression' % 1))": 1,
    "('A: MemberExpression' ? null : 'B: SequenceExpression')": 1,
    "(('A: string' === 'B: Identifier') ? 'C: CallExpression' : (('D: Identifier' < 'E: Identifier') ? 'F: ObjectExpression' : null))": 1,
    "((('A: BinaryExpression' || 'B: Identifier') || 'C: Identifier') || 'D: SequenceExpression')": 1,
    "('A: Identifier' ? 'B: SequenceExpression' : void('C: SequenceExpression'))": 1,
    "('A: Identifier' ? void(0) : ('B: Identifier' ? 'C: CallExpression' : ('D: BinaryExpression' ? 'E: SequenceExpression' : 'F: ConditionalExpression')))": 1,
    "('A: Identifier' ? 'B: CallExpression' : (('C: UnaryExpression' === 'D: Identifier') ? 'E: SequenceExpression' : ('F: LogicalExpression' ? 'G: SequenceExpression' : 'H: UnaryExpression')))": 1,
    "((!(1) === 'A: Identifier') ? 'B: SequenceExpression' : (('C: BinaryExpression' || 'D: LogicalExpression') ? 'E: SequenceExpression' : void('F: CallExpression')))": 1,
    "((('A: Identifier' === 'B: Identifier') || ('C: Identifier' && 'D: BinaryExpression')) ? 'E: SequenceExpression' : void('F: CallExpression'))": 1,
    "((!(1) === 'A: Identifier') && 'B: AssignmentExpression')": 1,
    "((!(0) === 'A: Identifier') || ('B: Identifier' ? 'C: CallExpression' : ('D: LogicalExpression' && 'E: CallExpression')))": 1,
    "('A: Identifier' ? 'B: CallExpression' : (('C: BinaryExpression' || 'D: BinaryExpression') && 'E: CallExpression'))": 1,
    "((('A: UpdateExpression' === 'B: Identifier') || ('C: Identifier' === 'D: Identifier')) && 'E: CallExpression')": 1,
    "((1 < 'A: MemberExpression') ? 'B: CallExpression' : 'C: CallExpression')": 1,
    "(('A: CallExpression' && (0 <= 'B: CallExpression')) && 'C: CallExpression')": 1,
    "('A: CallExpression' && (0 <= 'B: CallExpression'))": 1,
    "((\"number\" != typeof('A: Identifier')) && 'B: SequenceExpression')": 1,
    "((0 === 'A: Identifier') ? 'B: SequenceExpression' : void('C: SequenceExpression'))": 1,
    "(('A: UpdateExpression' == 0) && 'B: CallExpression')": 1,
    "('A: UpdateExpression' == 0)": 1,
    "((('A: UnaryExpression' !== 'B: Identifier') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: string'))": 1,
    "((-(1) !== 'A: Identifier') && ('B: MemberExpression' === 'C: string'))": 1,
    "((-(1) === 'A: Identifier') ? 'B: SequenceExpression' : 'C: SequenceExpression')": 1,
    "((0 < 'A: MemberExpression') ? 'B: Identifier' : 'C: Identifier')": 1,
    "('A: Identifier' ? ('B: Identifier' ? void('C: AssignmentExpression') : 'D: AssignmentExpression') : 'E: CallExpression')": 1,
    "('A: Identifier' ? void('B: AssignmentExpression') : 'C: AssignmentExpression')": 1,
    "('A: Identifier' ? ('B: Identifier' ? 'C: CallExpression' : 'D: CallExpression') : ((1 >= 'E: MemberExpression') ? 'F: CallExpression' : void('G: CallExpression')))": 1,
    "((1 >= 'A: MemberExpression') ? 'B: CallExpression' : void('C: CallExpression'))": 1,
    "((null != 'A: Identifier') && (\"function\" != typeof('B: Identifier')))": 1,
    "((0 === 'A: Identifier') ? 'B: CallExpression' : ((0 < 'C: Identifier') && 'D: CallExpression'))": 1,
    "(('A: Identifier' <= ('B: MemberExpression' - 'C: MemberExpression')) && 'D: CallExpression')": 1,
    "(!(!('A: LogicalExpression')) && 'B: SequenceExpression')": 1,
    "!(!(('A: BinaryExpression' && 'B: CallExpression')))": 1,
    "!((('A: MemberExpression' === 0) && 'B: CallExpression'))": 1,
    "('A: Identifier' ? void('B: SequenceExpression') : 'C: NewExpression')": 1,
    "((!(1) === 'A: MemberExpression') || 'B: SequenceExpression')": 1,
    "((typeof('A: Identifier') == \"function\") ? 'B: CallExpression' : 'C: AssignmentExpression')": 1,
    "(('A: Identifier' || ('B: UnaryExpression' === 'C: Identifier')) ? 'D: CallExpression' : (('E: CallExpression' && 'F: UnaryExpression') ? 'G: SequenceExpression' : void('H: CallExpression')))": 1,
    "('A: Identifier' || (!(1) === 'B: Identifier'))": 1,
    "(('A: CallExpression' && !('B: Identifier')) ? 'C: SequenceExpression' : void('D: CallExpression'))": 1,
    "((typeof('A: Identifier') == \"object\") && ('B: Identifier' ? ('C: MemberExpression' && 'D: CallExpression') : ('E: MemberExpression' && 'F: CallExpression')))": 1,
    "('A: Identifier' ? ('B: MemberExpression' && 'C: CallExpression') : ('D: MemberExpression' && 'E: CallExpression'))": 1,
    "(('A: Identifier' in 'B: Identifier') ? 'C: CallExpression' : (('D: Identifier' in 'E: Identifier') ? 'F: CallExpression' : 'G: SequenceExpression'))": 1,
    "(('A: Identifier' in 'B: Identifier') ? 'C: CallExpression' : 'D: SequenceExpression')": 1,
    "(('A: MemberExpression' === 'B: MemberExpression') ? ('C: MemberExpression' < 'D: MemberExpression') : ('E: MemberExpression' < 'F: MemberExpression'))": 1,
    "((1 >= 'A: MemberExpression') && 'B: AssignmentExpression')": 1,
    "((!(1) === 'A: Identifier') || (('B: LogicalExpression' && 'C: LogicalExpression') ? 'D: CallExpression' : 'E: CallExpression'))": 1,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: BinaryExpression' || 'D: CallExpression')) ? 'E: CallExpression' : 'F: CallExpression')": 1,
    "(('A: Identifier' && ('B: UpdateExpression' < 'C: MemberExpression')) && ((\"function\" != 'D: UnaryExpression') || 'E: CallExpression'))": 1,
    "((\"function\" != typeof('A: MemberExpression')) || 'B: CallExpression')": 1,
    "((('A: number' > 'B: MemberExpression') && ('C: UnaryExpression' == \"function\")) ? 'D: SequenceExpression' : 'E: SequenceExpression')": 1,
    "(('A: number' > 'B: MemberExpression') && (typeof('C: Identifier') == \"function\"))": 1,
    "((typeof('A: MemberExpression') == \"function\") ? 'B: MemberExpression' : 'C: CallExpression')": 1,
    "((typeof('A: Identifier') == \"number\") || (typeof('B: Identifier') == \"string\"))": 1,
    "((('A: MemberExpression' < 'B: BinaryExpression') || (null == 'C: Identifier')) && 'D: SequenceExpression')": 1,
    "((('A: number' >= 'B: MemberExpression') && ('C: UnaryExpression' == \"function\")) && 'D: SequenceExpression')": 1,
    "(('A: number' >= 'B: MemberExpression') && (typeof('C: Identifier') == \"function\"))": 1,
    "('A: Identifier' ? 'B: Identifier' : ('C: Identifier' ? 'D: Identifier' : ('E: Identifier' ? 'F: MemberExpression' : 'G: Identifier')))": 1,
    "('A: Identifier' ? 'B: Identifier' : ('C: Identifier' ? 'D: MemberExpression' : 'E: Identifier'))": 1,
    "('A: Identifier' ? 'B: CallExpression' : void(('C: BinaryExpression' || 'D: SequenceExpression')))": 1,
    "void((('A: UnaryExpression' === 'B: Identifier') || 'C: SequenceExpression'))": 1,
    "((!(1) === 'A: Identifier') || 'B: SequenceExpression')": 1,
    "('A: Identifier' ? 'B: CallExpression' : void(('C: BinaryExpression' || 'D: CallExpression')))": 1,
    "void((('A: UnaryExpression' === 'B: Identifier') || 'C: CallExpression'))": 1,
    "('A: Identifier' ? 'B: MemberExpression' : ('C: Identifier' ? 'D: Identifier' : 'E: Identifier'))": 1,
    "(('A: AssignmentExpression' < 'B: MemberExpression') && 'C: SequenceExpression')": 1,
    "((('A: BinaryExpression' < 'B: MemberExpression') && 'C: CallExpression') && 'D: UpdateExpression')": 1,
    "((!(1) === 'A: Identifier') ? 'B: CallExpression' : void('C: SequenceExpression'))": 1,
    "(('A: number' > 'B: MemberExpression') ? 'C: AssignmentExpression' : 'D: AssignmentExpression')": 1,
    "((!(1) === 'A: Identifier') ? void(0) : (('B: Identifier' || 'C: BinaryExpression') ? 'D: CallExpression' : void('E: CallExpression')))": 1,
    "(('A: Identifier' || ('B: MemberExpression' === 'C: Identifier')) ? 'D: CallExpression' : void('E: CallExpression'))": 1,
    "(('A: Identifier' != null) && (('object' == 'B: Identifier') || ('function' == 'C: Identifier')))": 1,
    "(('object' == 'A: Identifier') || ('function' == 'B: Identifier'))": 1,
    "('object' == 'A: Identifier')": 1,
    "('function' == 'A: Identifier')": 1,
    "('A: CallExpression' && (typeof('B: MemberExpression') === 'function'))": 1,
    "('A: MemberExpression' ? 'B: Identifier' : 'C: NewExpression')": 1,
    "(('A: Identifier' || 'B: Identifier') || 'C: CallExpression')": 1,
    "(('A: Identifier' && ('B: Identifier' in 'C: CallExpression')) ? 'D: CallExpression' : 'E: CallExpression')": 1,
    "('A: Identifier' && ('B: Identifier' in 'C: CallExpression'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: Identifier' == 'D: Identifier')) || ('E: Identifier' == 'F: Identifier'))": 1,
    "((('A: Identifier' == 'B: Identifier') || ('C: Identifier' == 'D: Identifier')) || ('E: Identifier' == 'F: Identifier'))": 1,
    "((('A: UnaryExpression' == 'number') && ('B: Identifier' > 'C: UnaryExpression')) && (0 == ('D: Identifier' % 1)))": 1,
    "((typeof('A: Identifier') == 'number') && ('B: Identifier' > -(1)))": 1,
    "((('A: Identifier' != null) && 'B: CallExpression') && !('C: CallExpression'))": 1,
    "(('A: Identifier' != null) && (typeof('B: Identifier') == 'object'))": 1,
    "((null == 'A: Identifier') ? 'B: Identifier' : 'C: Identifier')": 1,
    "((!('A: UnaryExpression') && ('B: BinaryExpression' || 'C: LogicalExpression')) && (('D: BinaryExpression' && 'E: BinaryExpression') && ('F: Identifier' < 'G: Identifier')))": 1,
    "(!(!('A: Identifier')) && (('number' == 'B: Identifier') || ('C: BinaryExpression' && 'D: CallExpression')))": 1,
    "(('number' == 'A: Identifier') || (('B: Identifier' != 'C: string') && 'D: CallExpression'))": 1,
    "('number' == 'A: Identifier')": 1,
    "(('A: Identifier' != 'B: string') && 'C: CallExpression')": 1,
    "((('A: Identifier' > 'B: UnaryExpression') && (0 == 'C: BinaryExpression')) && ('D: Identifier' < 'E: Identifier'))": 1,
    "(('A: Identifier' > -(1)) && (0 == ('B: Identifier' % 1)))": 1,
    "(('A: CallExpression' && 'B: CallExpression') && !(!('C: MemberExpression')))": 1,
    "((('A: UnaryExpression' && 'B: UnaryExpression') && !('C: Identifier')) && 'D: CallExpression')": 1,
    "(('A: Identifier' || 'B: CallExpression') && !(('C: Identifier' && 'D: LogicalExpression')))": 1,
    "!(('A: Identifier' && ('B: LogicalExpression' || 'C: CallExpression')))": 1,
    "('A: Identifier' && (('B: LogicalExpression' || 'C: LogicalExpression') || 'D: CallExpression'))": 1,
    "((('A: BinaryExpression' || 'B: LogicalExpression') || ('C: Identifier' && 'D: LogicalExpression')) || 'E: CallExpression')": 1,
    "((('A: string' == 'B: Identifier') || ('C: Identifier' && 'D: LogicalExpression')) || ('E: Identifier' && ('F: LogicalExpression' || 'G: BinaryExpression')))": 1,
    "(('A: string' == 'B: Identifier') || ('C: Identifier' && ('D: BinaryExpression' || 'E: BinaryExpression')))": 1,
    "('A: Identifier' && (('B: string' == 'C: Identifier') || ('D: string' == 'E: Identifier')))": 1,
    "('A: Identifier' && (('B: BinaryExpression' || 'C: BinaryExpression') || ('D: string' == 'E: Identifier')))": 1,
    "((('A: string' == 'B: Identifier') || ('C: string' == 'D: Identifier')) || ('E: string' == 'F: Identifier'))": 1,
    "((('A: UnaryExpression' == 'function') && 'B: MemberExpression') || 'C: Identifier')": 1,
    "((typeof('A: Identifier') == 'function') && 'B: MemberExpression')": 1,
    "(('A: Identifier' <= 0) || !('B: Identifier'))": 1,
    "('A: Identifier' + ('B: Identifier' ? 1 : -(1)))": 1,
    "('A: Identifier' ? 1 : -(1))": 1,
    "('A: Identifier' ? 'B: UpdateExpression' : ('C: UpdateExpression' < 'D: Identifier'))": 1,
    "((typeof('A: Identifier') == 'B: string') || ('C: CallExpression' && ('D: Identifier' == 'E: CallExpression')))": 1,
    "(typeof('A: Identifier') == 'B: string')": 1,
    "((!('A: Identifier') && ('B: Identifier' >= 'C: Identifier')) ? 'D: Identifier' : 'E: CallExpression')": 1,
    "(!('A: Identifier') && ('B: Identifier' >= 'C: Identifier'))": 1,
    "('A: UpdateExpression' && ('B: CallExpression' > -(1)))": 1,
    "(('A: UpdateExpression' < 'B: Identifier') && ('C: CallExpression' > -(1)))": 1,
    "((null == 'A: Identifier') ? '' : 'B: CallExpression')": 1,
    "('A: Identifier' && ('B: Identifier' || ('C: Identifier' === 'D: Identifier')))": 1,
    "('A: Identifier' || ('B: Identifier' === 'C: Identifier'))": 1,
    "(!('A: Identifier') || !('B: AssignmentExpression'))": 1,
    "('A: Identifier' && ('B: Identifier' >= 'C: MemberExpression'))": 1,
    "(('A: Identifier' - 'B: Identifier') / ('C: Identifier' || 1))": 1,
    "(('A: Identifier' / 'B: Identifier') - 1)": 1,
    "(('A: string' + +('B: CallExpression')) + 'C: string')": 1,
    "('A: string' + +('B: CallExpression'))": 1,
    "('A: string' + ('B: Identifier' + 'C: number'))": 1,
    "(('A: Identifier' !== 1) && ('B: Identifier' !== 'C: string'))": 1,
    "('A: Identifier' ? '' : 'B: Identifier')": 1,
    "(('A: MemberExpression' === 'function') || ('B: MemberExpression' === 'C: string'))": 1,
    "((('A: MemberExpression' === 'B: string') && 'C: MemberExpression') && 'D: MemberExpression')": 1,
    "('function' === 'A: CallExpression')": 1,
    "('A: MemberExpression' && ('B: CallExpression' === -(1)))": 1,
    "((('A: string' + 'B: LogicalExpression') + 'C: string') + 'D: string')": 1,
    "(('A: string' + ('B: MemberExpression' || '')) + 'C: string')": 1,
    "((('A: LogicalExpression' + 'B: string') + ('C: MemberExpression' ? 'D: BinaryExpression' : '')) + 'E: string')": 1,
    "((('A: MemberExpression' || '') + 'B: string') + ('C: MemberExpression' ? ('D: string' + 'E: CallExpression') : ''))": 1,
    "(('A: MemberExpression' && ('B: MemberExpression' !== 'null')) ? 'C: CallExpression' : 'D: MemberExpression')": 1,
    "('A: MemberExpression' && ('B: MemberExpression' !== 'null'))": 1,
    "('A: MemberExpression' !== 'null')": 1,
    "((false === 'A: Identifier') ? false : true)": 1,
    "('A: MemberExpression' || ('B: MemberExpression' === 'C: string'))": 1,
    "(('A: MemberExpression' === 'B: string') || ('C: MemberExpression' === 'function'))": 1,
    "(('A: MemberExpression' !== 'B: string') && !('C: CallExpression'))": 1,
    "(('A: MemberExpression' || 'B: MemberExpression') || 'C: ArrayExpression')": 1,
    "(('A: MemberExpression' && ('B: MemberExpression' !== false)) ? true : false)": 1,
    "('A: MemberExpression' && ('B: MemberExpression' !== false))": 1,
    "((!('A: Identifier') || !('B: Identifier')) || !('C: Identifier'))": 1,
    "(('A: Identifier' < 'B: MemberExpression') ? 'C: ObjectExpression' : 'D: ObjectExpression')": 1,
    "('A: number' - ('B: number' * 'C: Identifier'))": 1,
    "(('A: number' === 'B: Identifier') ? 'C: Identifier' : ('D: Identifier' + 'E: Identifier'))": 1,
    "('A: Identifier' && ('B: Identifier' === ('C: Identifier' + 'D: Identifier')))": 1,
    "('A: Identifier' === ('B: Identifier' + 'C: Identifier'))": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: Identifier' : ('D: Identifier' + 'E: Identifier'))": 1,
    "(('A: number' === 'B: Identifier') ? 'C: string' : 'D: Identifier')": 1,
    "(('A: MemberExpression' - 1) * 'B: MemberExpression')": 1,
    "('A: MemberExpression' * -(1))": 1,
    "(('A: Identifier' <= 'B: Identifier') && ('C: Identifier' > 0))": 1,
    "('A: number' * ('B: number' - 'C: Identifier'))": 1,
    "(('A: string' === 'B: CallExpression') && ('C: Identifier' >= 'D: Identifier'))": 1,
    "(('A: CallExpression' && 'B: MemberExpression') && ('C: MemberExpression' === 'D: number'))": 1,
    "((('A: MemberExpression' || '') + 'B: string') + ('C: MemberExpression' || ''))": 1,
    "(('A: MemberExpression' > -(1)) && ('B: MemberExpression' > 'C: MemberExpression'))": 1,
    "((('A: BinaryExpression' + 'B: MemberExpression') + ('C: MemberExpression' ? 'D: BinaryExpression' : '')) + 'E: MemberExpression')": 1,
    "(('A: Identifier' && ('B: MemberExpression' === 0)) && 'C: MemberExpression')": 1,
    "(('A: MemberExpression' > 1) ? 'B: CallExpression' : 'C: MemberExpression')": 1,
    "(('A: MemberExpression' > -(1)) && ('B: Identifier' > 'C: MemberExpression'))": 1,
    "(('A: MemberExpression' === 1) ? 'B: MemberExpression' : 'C: CallExpression')": 1,
    "((('A: Identifier' && 'B: Identifier') && 'C: Identifier') ? (('D: Identifier' - 'E: Identifier') / 'F: Identifier') : 'G: Identifier')": 1,
    "((('A: MemberExpression' || 'B: CallExpression') && 'C: MemberExpression') && 'D: CallExpression')": 1,
    "((('A: UnaryExpression' && 'B: BinaryExpression') && ('C: Identifier' !== 0)) && ('D: Identifier' !== ''))": 1,
    "((!('A: Identifier') && ('B: Identifier' !== false)) && ('C: Identifier' !== 0))": 1,
    "((false === 'A: Identifier') || (null == 'B: Identifier'))": 1,
    "(('A: Identifier' && ('B: Identifier' !== true)) && (('C: MemberExpression' === false) || (false === 'D: Identifier')))": 1,
    "(('A: MemberExpression' === false) || (false === 'B: Identifier'))": 1,
    "!(!(('A: Identifier' && 'B: LogicalExpression')))": 1,
    "!(('A: Identifier' && ('B: UnaryExpression' || 'C: CallExpression')))": 1,
    "((null == 'A: Identifier') || (false === 'B: Identifier'))": 1,
    "(('A: Identifier' instanceof 'B: ThisExpression') ? 'C: Identifier' : 'D: NewExpression')": 1,
    "('A: Identifier' instanceof 'B: ThisExpression')": 1,
    "((('A: Identifier' && 'B: Identifier') && ('C: Identifier' <= 'D: Identifier')) ? (('E: Identifier' - 'F: Identifier') / 'G: Identifier') : 'H: Identifier')": 1,
    "(('A: Identifier' && 'B: Identifier') && ('C: Identifier' <= 'D: Identifier'))": 1,
    "(('A: MemberExpression' !== false) ? 'B: CallExpression' : 0)": 1,
    "(!('A: MemberExpression') || ('B: AssignmentExpression' >= 'C: Identifier'))": 1,
    "('A: AssignmentExpression' >= 'B: Identifier')": 1,
    "(('A: Identifier' < 0) ? -('B: Identifier') : 0)": 1,
    "(('A: Identifier' && ('B: Identifier' > 'C: Identifier')) && (('D: Identifier' - 'E: Identifier') > 'F: Identifier'))": 1,
    "('A: Identifier' && ('B: Identifier' > 'C: Identifier'))": 1,
    "('A: Identifier' ? 'B: ArrowFunctionExpression' : 'C: Identifier')": 1,
    "((('A: BinaryExpression' + 'B: string') + ('C: Identifier' ? 'D: BinaryExpression' : '')) + 'E: string')": 1,
    "((('A: string' + 'B: Identifier') + 'C: string') + ('D: Identifier' ? ('E: BinaryExpression' + 'F: string') : ''))": 1,
    "('A: Identifier' ? (('B: string' + 'C: Identifier') + 'D: string') : '')": 1,
    "(!('A: Identifier') || ('B: MemberExpression' && 'C: MemberExpression'))": 1,
    "('A: Identifier' || 'B: number')": 1,
    "(('A: Identifier' !== 'B: Identifier') ? 'C: Identifier' : 'D: number')": 1,
    "(('A: Identifier' - 'B: Identifier') < 'C: Identifier')": 1,
    "('A: Identifier' && ('B: Identifier' - 'C: Identifier'))": 1,
    "(('A: number' * 'B: Identifier') / 'C: Identifier')": 1,
    "('A: Identifier' || (('B: Identifier' - 'C: Identifier') > 'D: Identifier'))": 1,
    "((('A: UnaryExpression' !== 'undefined') && 'B: Identifier') || null)": 1,
    "((('A: LogicalExpression' && 'B: UnaryExpression') && 'C: CallExpression') && 'D: CallExpression')": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && !('C: CallExpression')) && 'D: CallExpression')": 1,
    "('A: CallExpression' !== false)": 1,
    "(('A: string' + 'B: NewExpression') + 'C: string')": 1,
    "('A: string' + 'B: NewExpression')": 1,
    "((('A: UnaryExpression' !== \"undefined\") && ('B: UnaryExpression' !== \"undefined\")) && (typeof('C: Identifier') !== \"undefined\"))": 1,
    "((typeof('A: Identifier') !== \"undefined\") && (typeof('B: Identifier') !== \"undefined\"))": 1,
    "(('A: Identifier' === 'B: Identifier') && (typeof('C: Identifier') === \"function\"))": 1,
    "(('A: MemberExpression' === 'B: Identifier') && ('C: MemberExpression' !== 'D: Identifier'))": 1,
    "(('A: Identifier' && ('B: UnaryExpression' === \"object\")) && ('C: MemberExpression' === 'D: Identifier'))": 1,
    "('A: Identifier' && (typeof('B: Identifier') === \"object\"))": 1,
    "((('A: Identifier' === 'B: Identifier') && !('C: Identifier')) || (('D: Identifier' === 'E: Identifier') && !('F: Identifier')))": 1,
    "(('A: Identifier' && ('B: string' === 'C: CallExpression')) && !('D: MemberExpression'))": 1,
    "(typeof('A: ThisExpression') !== \"undefined\")": 1,
    "('A: Identifier' * ('B: Identifier' * 'C: Identifier'))": 1,
    "('A: UpdateExpression' > 'B: Identifier')": 1,
    "('A: CallExpression' - ('B: number' * ('C: number' * 'D: BinaryExpression')))": 1,
    "(1 + (1 / 'A: Identifier'))": 1,
    "((('A: Identifier' - 'B: Identifier') > 0) ? ('C: Identifier' < ('D: Identifier' * 'E: Identifier')) : ('F: Identifier' > ('G: Identifier' * 'H: Identifier')))": 1,
    "('A: Identifier' < ('B: Identifier' * 'C: Identifier'))": 1,
    "('A: Identifier' > ('B: Identifier' * 'C: Identifier'))": 1,
    "('A: MemberExpression' | 0)": 1,
    "(('A: MemberExpression' + 'B: MemberExpression') - 'C: Identifier')": 1,
    "(!('A: Identifier') || ('B: Identifier' < 0))": 1,
    "!(('A: Identifier' < 'B: Identifier'))": 1,
    "((('A: Identifier' - 'B: Identifier') / 'C: number') / 'D: number')": 1,
    "(('A: MemberExpression' != null) ? 'B: MemberExpression' : 'C: Identifier')": 1,
    "((typeof('A: Identifier') === \"string\") && ('B: string' === 'C: CallExpression'))": 1,
    "(('A: string' + ('B: BinaryExpression' ? 'C: MemberExpression' : 'D: Identifier')) + 'E: string')": 1,
    "('A: string' + (('B: Identifier' instanceof 'C: Identifier') ? 'D: MemberExpression' : 'E: Identifier'))": 1,
    "(('A: Identifier' instanceof 'B: Identifier') ? 'C: MemberExpression' : 'D: Identifier')": 1,
    "(('A: Identifier' !== null) ? 'B: Identifier' : 'C: Identifier')": 1,
    "(('A: MemberExpression' === 'B: Identifier') || ('C: MemberExpression' <= 0))": 1,
    "(('A: Identifier' === 'B: Identifier') || (('C: Identifier' != null) && ('D: MemberExpression' instanceof 'E: Identifier')))": 1,
    "(('A: Identifier' != null) && ('B: MemberExpression' instanceof 'C: Identifier'))": 1,
    "('A: MemberExpression' != 'B: MemberExpression')": 1,
    "(0x0 | 0)": 1,
    "((('A: Identifier' | 'B: Identifier') | 'C: Identifier') | 'D: Identifier')": 1,
    "((1 << 'A: number') | 0)": 1,
    "!((('A: CallExpression' != 0) && ('B: LogicalExpression' || 'C: BinaryExpression')))": 1,
    "(('A: CallExpression' != 0) && (('B: Identifier' || 'C: CallExpression') || ('D: string' === 'E: CallExpression')))": 1,
    "(('A: Identifier' || 'B: CallExpression') || ('C: string' === 'D: CallExpression'))": 1,
    "(('A: CallExpression' != 0) && ('B: Identifier' || !('C: UnaryExpression')))": 1,
    "('A: Identifier' || !(!('B: CallExpression')))": 1,
    "(('A: MemberExpression' & ~('B: Identifier')) | 'C: Identifier')": 1,
    "('A: Identifier' || 'B: ThisExpression')": 1,
    "((('A: string' in 'B: Identifier') && 'C: MemberExpression') && !('D: MemberExpression'))": 1,
    "((('A: Identifier' === 'B: Identifier') && ('C: Identifier' !== null)) && 'D: Identifier')": 1,
    "(('A: Identifier' === 'B: Identifier') && ('C: Identifier' !== null))": 1,
    "(('A: MemberExpression' === 0) || (('B: BinaryExpression' < 'C: MemberExpression') && ('D: MemberExpression' === 'E: MemberExpression')))": 1,
    "((('A: Identifier' + 1) < 'B: MemberExpression') && ('C: MemberExpression' === 'D: MemberExpression'))": 1,
    "('A: Identifier' && ('B: CallExpression' !== 'C: string'))": 1,
    "(('A: Identifier' > 0) && ('B: MemberExpression' != 'C: string'))": 1,
    "((('A: UnaryExpression' === \"string\") && ('B: MemberExpression' > 0)) ? 'C: CallExpression' : 'D: ArrayExpression')": 1,
    "((typeof('A: Identifier') === \"string\") && ('B: MemberExpression' > 0))": 1,
    "(('A: MemberExpression' == 'B: string') ? 'C: Identifier' : 'D: CallExpression')": 1,
    "((typeof('A: MemberExpression') === \"function\") || (typeof('B: MemberExpression') === \"object\"))": 1,
    "(typeof('A: MemberExpression') === \"object\")": 1,
    "(!('A: CallExpression') && !('B: Identifier'))": 1,
    "(('A: string' + ('B: MemberExpression' || 'C: string')) + 'D: string')": 1,
    "(('A: Identifier' && ('B: UnaryExpression' === \"function\")) ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "((('A: LogicalExpression' || 'B: UnaryExpression') || ('C: Identifier' !== 'D: Identifier')) || ('E: Identifier' >= 'F: Identifier'))": 1,
    "((('A: LogicalExpression' || 'B: UnaryExpression') || !('C: Identifier')) || ('D: Identifier' !== 'E: Identifier'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || !('C: Identifier')) || !('D: Identifier'))": 1,
    "((('A: Identifier' < 0) || ('B: Identifier' < 0)) || !('C: Identifier'))": 1,
    "(('A: Identifier' < 0) || ('B: Identifier' < 0))": 1,
    "(('A: MemberExpression' === 'B: Identifier') && (('C: Identifier' <= 'D: MemberExpression') && ('E: MemberExpression' <= 'F: Identifier')))": 1,
    "(('A: Identifier' <= 'B: MemberExpression') && ('C: MemberExpression' <= 'D: Identifier'))": 1,
    "(('A: Identifier' === 'B: Identifier') || ('C: Identifier' instanceof 'D: Identifier'))": 1,
    "(1 + (('A: Identifier' === 'B: Identifier') ? 0 : 'C: MemberExpression'))": 1,
    "(('A: Identifier' === 'B: Identifier') ? 0 : 'C: MemberExpression')": 1,
    "(('A: Identifier' > 0) ? 'B: MemberExpression' : 'C: ThisExpression')": 1,
    "((typeof('A: MemberExpression') === \"string\") && ('B: CallExpression' >= 0))": 1,
    "((!('A: BinaryExpression') && 'B: Identifier') && (typeof('C: MemberExpression') === \"number\"))": 1,
    "(!(('A: string' in 'B: Identifier')) && 'C: Identifier')": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') && ('C: MemberExpression' !== 'D: Identifier')) && ('E: MemberExpression' !== 'F: Identifier'))": 1,
    "((('A: UnaryExpression' === \"object\") || ('B: UnaryExpression' === \"function\")) && ('C: MemberExpression' !== 'D: Identifier'))": 1,
    "(!('A: MemberExpression') && (typeof('B: MemberExpression') === \"string\"))": 1,
    "((typeof('A: Identifier') === \"string\") ? 'B: Identifier' : 'C: Identifier')": 1,
    "(('A: MemberExpression' === 'B: ThisExpression') ? 'C: string' : ('D: MemberExpression' + \"\"))": 1,
    "!(!(('A: LogicalExpression' || 'B: MemberExpression')))": 1,
    "!((('A: UnaryExpression' || 'B: MemberExpression') || 'C: MemberExpression'))": 1,
    "((!('A: Identifier') || 'B: MemberExpression') || 'C: MemberExpression')": 1,
    "((typeof('A: Identifier') === \"function\") ? 'B: CallExpression' : 'C: Identifier')": 1,
    "('A: CallExpression' && ('B: MemberExpression' !== null))": 1,
    "((null === 'A: Identifier') || ('B: Identifier' instanceof 'C: Identifier'))": 1,
    "(('A: Identifier' > 0) && (typeof('B: MemberExpression') === \"function\"))": 1,
    "(('A: Identifier' <= 'B: Identifier') && 'C: Identifier')": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: NewExpression' : null)": 1,
    "((-(1) * 'A: Identifier') - 1)": 1,
    "(('A: Identifier' >= 1) && ('B: MemberExpression' >= 'C: Identifier'))": 1,
    "(('A: Identifier' !== null) ? 'B: string' : 'C: string')": 1,
    "(('A: Identifier' + 1) * -(1))": 1,
    "(('A: MemberExpression' > 0) && ('B: MemberExpression' < 'C: Identifier'))": 1,
    "((('A: BinaryExpression' && 'B: CallExpression') && ('C: Identifier' >= 1)) ? 'D: Identifier' : 0)": 1,
    "((('A: UnaryExpression' === \"number\") && 'B: CallExpression') && ('C: Identifier' >= 1))": 1,
    "((typeof('A: Identifier') === \"number\") && 'B: CallExpression')": 1,
    "(('A: Identifier' !== 'B: Identifier') && 'C: MemberExpression')": 1,
    "('A: CallExpression' ? 'B: NewExpression' : 'C: MemberExpression')": 1,
    "((null == 'A: Identifier') || ('B: MemberExpression' !== 'C: Identifier'))": 1,
    "((('A: CallExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' !== \"function\")) && (typeof('D: Identifier') !== \"function\"))": 1,
    "(('A: CallExpression' && ('B: MemberExpression' > 0)) && (typeof('C: Identifier') !== \"function\"))": 1,
    "(('A: MemberExpression' > 1) ? !(!('B: MemberExpression')) : false)": 1,
    "(('A: ThisExpression' === 'B: Identifier') ? 'C: Identifier' : 'D: MemberExpression')": 1,
    "(('A: MemberExpression' & 'B: Identifier') | ('C: Identifier' & 'D: Identifier'))": 1,
    "('A: Identifier' | (('B: BinaryExpression' >> 'C: Identifier') ^ 'D: Identifier'))": 1,
    "((('A: Identifier' & 'B: Identifier') >> 'C: Identifier') ^ 'D: Identifier')": 1,
    "(('A: Identifier' & 'B: Identifier') >> 'C: Identifier')": 1,
    "(('A: MemberExpression' | 'B: Identifier') & ~('C: Identifier'))": 1,
    "((0 === 'A: Identifier') ? 'B: MemberExpression' : 'C: MemberExpression')": 1,
    "('A: Identifier' ? 'B: Identifier' : false)": 1,
    "(!('A: Identifier') || (typeof('B: MemberExpression') !== \"number\"))": 1,
    "('A: Identifier' || ('B: Identifier' instanceof 'C: Identifier'))": 1,
    "(('A: CallExpression' && ('B: CallExpression' !== 'C: string')) && ('D: Identifier' !== 'E: string'))": 1,
    "(('A: Identifier' === 'B: Identifier') ? true : 'C: CallExpression')": 1,
    "((('A: BinaryExpression' && 'B: UnaryExpression') && !('C: CallExpression')) && 'D: CallExpression')": 1,
    "((('A: UnaryExpression' === \"function\") && !('B: CallExpression')) && !('C: CallExpression'))": 1,
    "((typeof('A: Identifier') === \"function\") && !('B: CallExpression'))": 1,
    "(('A: Identifier' - 1) - 'B: Identifier')": 1,
    "((typeof('A: Identifier') === \"string\") || ('B: Identifier' === 'C: Identifier'))": 1,
    "((typeof('A: Identifier') === \"string\") ? (('B: string' + 'C: Identifier') + 'D: string') : 'E: string')": 1,
    "((('A: UnaryExpression' === \"string\") && ('B: ThisExpression' !== 'C: Identifier')) ? 'D: MemberExpression' : 'E: Identifier')": 1,
    "((typeof('A: Identifier') === \"string\") && ('B: ThisExpression' !== 'C: Identifier'))": 1,
    "((typeof('A: Identifier') !== \"function\") && (typeof('B: Identifier') !== \"object\"))": 1,
    "(('A: MemberExpression' !== 'B: string') && 'C: CallExpression')": 1,
    "(('A: Identifier' !== 'B: Identifier') && ('C: Identifier' instanceof 'D: Identifier'))": 1,
    "('A: Identifier' >> 1)": 1,
    "(('A: MemberExpression' + 'B: Identifier') & ('C: MemberExpression' - 1))": 1,
    "(('A: MemberExpression' + 'B: Identifier') - 'C: number')": 1,
    "(('A: Identifier' + 0) & 'B: Identifier')": 1,
    "(('A: Identifier' + 1) & 'B: Identifier')": 1,
    "(('A: Identifier' + 'B: number') & 'C: Identifier')": 1,
    "(('A: Identifier' + 1) & ('B: MemberExpression' - 1))": 1,
    "('A: MemberExpression' << 1)": 1,
    "(('A: Identifier' + 'B: Identifier') & ('C: Identifier' - 1))": 1,
    "(('A: Identifier' === 'B: Identifier') && !(('C: Identifier' in 'D: Identifier')))": 1,
    "((('A: MemberExpression' !== 'B: Identifier') && ('C: MemberExpression' !== null)) && ('D: Identifier' !== 'E: Identifier'))": 1,
    "(('A: MemberExpression' !== 'B: Identifier') && ('C: MemberExpression' !== null))": 1,
    "(('A: MemberExpression' !== 'B: Identifier') ? 'C: MemberExpression' : 'D: MemberExpression')": 1,
    "(('A: MemberExpression' !== 'B: Identifier') ? 'C: string' : 'D: string')": 1,
    "('A: MemberExpression' && (typeof('B: Identifier') === \"undefined\"))": 1,
    "('A: MemberExpression' ? 'B: FunctionExpression' : 'C: FunctionExpression')": 1,
    "((typeof('A: Identifier') === \"function\") && (typeof('B: MemberExpression') === \"function\"))": 1,
    "((('A: UnaryExpression' !== \"undefined\") && !('B: LogicalExpression')) && ('C: string' in 'D: MemberExpression'))": 1,
    "((typeof('A: Identifier') !== \"undefined\") && !(('B: LogicalExpression' && 'C: LogicalExpression')))": 1,
    "!((('A: BinaryExpression' && 'B: MemberExpression') && ('C: MemberExpression' || 'D: MemberExpression')))": 1,
    "((('A: UnaryExpression' !== \"undefined\") && 'B: MemberExpression') && ('C: MemberExpression' || 'D: MemberExpression'))": 1,
    "((!('A: CallExpression') && 'B: Identifier') && ('C: MemberExpression' > 'D: CallExpression'))": 1,
    "(!('A: CallExpression') && 'B: Identifier')": 1,
    "((1 === 'A: CallExpression') && 'B: MemberExpression')": 1,
    "(('A: MemberExpression' instanceof 'B: Identifier') || ('C: MemberExpression' == null))": 1,
    "('A: MemberExpression' - 'B: CallExpression')": 1,
    "((('A: Identifier' | 0) !== 'B: Identifier') || ('C: Identifier' < 0))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' === \"function\")) && 'D: CallExpression')": 1,
    "((('A: Identifier' !== 'B: Identifier') && ('C: UnaryExpression' === \"function\")) && (typeof('D: MemberExpression') === \"function\"))": 1,
    "(('A: Identifier' !== 'B: Identifier') && (typeof('C: MemberExpression') === \"function\"))": 1,
    "(('A: Identifier' !== 'B: Identifier') ? 'C: CallExpression' : null)": 1,
    "((('A: Identifier' != null) && ('B: UnaryExpression' === \"function\")) && (typeof('C: MemberExpression') === \"function\"))": 1,
    "(('A: number' === 'B: Identifier') && 'C: CallExpression')": 1,
    "((typeof('A: Identifier') !== \"undefined\") ? 'B: Identifier' : (('C: UnaryExpression' !== \"undefined\") ? 'D: Identifier' : ('E: BinaryExpression' ? 'F: Identifier' : 'G: ConditionalExpression')))": 1,
    "((typeof('A: Identifier') !== \"undefined\") ? 'B: Identifier' : (('C: UnaryExpression' !== \"undefined\") ? 'D: Identifier' : ('E: BinaryExpression' ? 'F: ThisExpression' : null)))": 1,
    "((typeof('A: Identifier') !== \"undefined\") ? 'B: Identifier' : (('C: ThisExpression' !== 'D: Identifier') ? 'E: ThisExpression' : null))": 1,
    "(('A: ThisExpression' !== 'B: Identifier') ? 'C: ThisExpression' : null)": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: UnaryExpression' === \"string\")) || (typeof('D: Identifier') === \"number\"))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || (false === 'C: Identifier')) || (typeof('D: Identifier') === \"string\"))": 1,
    "(((null == 'A: Identifier') || (true === 'B: Identifier')) || (false === 'C: Identifier'))": 1,
    "((null == 'A: Identifier') || (true === 'B: Identifier'))": 1,
    "((('A: MemberExpression' == null) && ('B: MemberExpression' == null)) ? 'C: MemberExpression' : 'D: Identifier')": 1,
    "(('A: MemberExpression' == null) && ('B: MemberExpression' == null))": 1,
    "((('A: Identifier' != null) && ('B: MemberExpression' == null)) && ('C: MemberExpression' == null))": 1,
    "(('A: Identifier' != null) && ('B: MemberExpression' == null))": 1,
    "('A: MemberExpression' && ('B: MemberExpression' > 1))": 1,
    "(('A: MemberExpression' > 0) && !(('B: BinaryExpression' && 'C: BinaryExpression')))": 1,
    "!((('A: MemberExpression' === 1) && ('B: MemberExpression' === 'C: string')))": 1,
    "(('A: Identifier' !== null) && typeof('B: MemberExpression'))": 1,
    "((null == 'A: Identifier') ? 'B: CallExpression' : 'C: Identifier')": 1,
    "(('A: Identifier' instanceof 'B: Identifier') || (('C: LogicalExpression' && 'D: BinaryExpression') && ('E: UnaryExpression' === \"string\")))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' === \"string\")) && (typeof('D: MemberExpression') === \"string\"))": 1,
    "((('A: Identifier' !== null) && ('B: UnaryExpression' === \"object\")) && (typeof('C: MemberExpression') === \"string\"))": 1,
    "(('A: Identifier' !== null) && (typeof('B: Identifier') === \"object\"))": 1,
    "(('A: Identifier' instanceof 'B: MemberExpression') || ('C: MemberExpression' === true))": 1,
    "!(('A: string' in 'B: NewExpression'))": 1,
    "('A: string' in 'B: NewExpression')": 1,
    "((typeof('A: MemberExpression') === \"function\") ? 'B: FunctionExpression' : 'C: FunctionExpression')": 1,
    "(((null === 'A: Identifier') || ('B: UnaryExpression' !== \"function\")) || ('C: Identifier' === 'D: Identifier'))": 1,
    "((null === 'A: Identifier') || (typeof('B: Identifier') !== \"function\"))": 1,
    "((('A: MemberExpression' === 0) && ('B: MemberExpression' > 'C: number')) || ('D: MemberExpression' > 0))": 1,
    "(('A: MemberExpression' === 0) && ('B: MemberExpression' > 'C: number'))": 1,
    "('A: MemberExpression' || ('B: MemberExpression' ? 'C: MemberExpression' : 'D: Identifier'))": 1,
    "('A: Identifier' || (typeof('B: Identifier') == 'undefined'))": 1,
    "('A: Identifier' && ('B: CallExpression' || 'C: CallExpression'))": 1,
    "('A: MemberExpression' != 'B: number')": 1,
    "(('A: Identifier' + 1) == 'B: MemberExpression')": 1,
    "((void(0) === 'A: Identifier') ? ('B: MemberExpression' - 'C: Identifier') : 'D: Identifier')": 1,
    "('A: CallExpression' != 1)": 1,
    "(('A: MemberExpression' != 'B: string') || !((0 in 'C: Identifier')))": 1,
    "('A: UpdateExpression' >= 'B: Identifier')": 1,
    "('A: UpdateExpression' < 0)": 1,
    "(('A: Identifier' >= 0) ? 'B: Identifier' : ('C: Identifier' - 'D: CallExpression'))": 1,
    "(!('A: MemberExpression') || ('B: CallExpression' === -(1)))": 1,
    "((('A: Identifier' < 0) ? 'B: string' : ('C: BinaryExpression' ? 'D: string' : \"\")) + 'E: CallExpression')": 1,
    "(('A: Identifier' < 0) ? 'B: string' : (('C: Identifier' > 'D: number') ? 'E: string' : \"\"))": 1,
    "(('A: Identifier' > 'B: number') ? 'C: string' : \"\")": 1,
    "(((0 <= 'A: Identifier') && ('B: Identifier' <= 'C: number')) ? -('D: number') : -('E: number'))": 1,
    "((0 <= 'A: Identifier') && ('B: Identifier' <= 'C: number'))": 1,
    "((('A: MemberExpression' && 'B: BinaryExpression') && ('C: CallExpression' !== 'D: UnaryExpression')) && 'E: CallExpression')": 1,
    "(('A: MemberExpression' && (null === 'B: CallExpression')) && ('C: CallExpression' !== -(1)))": 1,
    "('A: MemberExpression' && (null === 'B: CallExpression'))": 1,
    "((typeof('A: Identifier') === \"number\") && !('B: CallExpression'))": 1,
    "(!('A: MemberExpression') || 'B: string')": 1,
    "(((1 == 'A: Identifier') && ('B: Identifier' === 'C: CallExpression')) ? 'D: NewExpression' : (('E: Identifier' >= 'F: number') ? 'G: NewExpression' : ('H: BinaryExpression' ? 'I: NewExpression' : 'J: ConditionalExpression')))": 1,
    "((1 == 'A: Identifier') && ('B: Identifier' === 'C: CallExpression'))": 1,
    "(('A: Identifier' >= 'B: number') ? 'C: NewExpression' : (('D: Identifier' >= 'E: number') ? 'F: NewExpression' : ('G: BinaryExpression' ? 'H: NewExpression' : 'I: NewExpression')))": 1,
    "(('A: Identifier' >= 'B: number') ? 'C: NewExpression' : (('D: Identifier' >= 1) ? 'E: NewExpression' : 'F: NewExpression'))": 1,
    "(('A: Identifier' >= 1) ? 'B: NewExpression' : 'C: NewExpression')": 1,
    "((('A: BinaryExpression' - 'B: CallExpression') + 'C: CallExpression') + ('D: number' * ('E: Identifier' - 'F: number')))": 1,
    "((('A: MemberExpression' + 'B: CallExpression') - 'C: CallExpression') + 'D: CallExpression')": 1,
    "(('A: MemberExpression' + 'B: CallExpression') - 'C: CallExpression')": 1,
    "(('A: MemberExpression' === 'B: string') ? 1 : -(1))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' > 'D: UnaryExpression')) && ('E: Identifier' < ('F: CallExpression' - 'G: CallExpression')))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' > 'D: UnaryExpression')) && ('E: Identifier' < 'F: number'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: Identifier' < 'D: number')) && ('E: Identifier' < 'F: number'))": 1,
    "((('A: Identifier' < 'B: ConditionalExpression') && ('C: Identifier' < 'D: number')) && ('E: Identifier' < 'F: number'))": 1,
    "(('A: Identifier' < ('B: LogicalExpression' ? 'C: number' : 'D: number')) && ('E: Identifier' < 'F: number'))": 1,
    "('A: Identifier' < (('B: LogicalExpression' || 'C: BinaryExpression') ? 'D: number' : 'E: number'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: Identifier' > 0)) ? 'D: number' : 'E: number')": 1,
    "((('A: Identifier' > 0) || ('B: Identifier' > 0)) || ('C: Identifier' > 0))": 1,
    "(('A: Identifier' > 0) || ('B: Identifier' > 0))": 1,
    "('A: Identifier' < ('B: CallExpression' - 'C: CallExpression'))": 1,
    "('A: number' * (('B: BinaryExpression' + 'C: Identifier') + ('D: Identifier' * 'E: Identifier')))": 1,
    "((('A: number' * 'B: BinaryExpression') + 'C: Identifier') + ('D: Identifier' * 'E: Identifier'))": 1,
    "(('A: number' * ('B: CallExpression' + 'C: Identifier')) + 'D: Identifier')": 1,
    "('A: number' * ('B: CallExpression' + 'C: Identifier'))": 1,
    "(('A: number' * ('B: BinaryExpression' + 'C: Identifier')) + 'D: Identifier')": 1,
    "('A: number' * (('B: number' * 'C: BinaryExpression') + 'D: Identifier'))": 1,
    "(('A: number' * ('B: BinaryExpression' + 'C: BinaryExpression')) + 'D: Identifier')": 1,
    "('A: number' * (('B: Identifier' + 'C: Identifier') + ('D: Identifier' * 'E: Identifier')))": 1,
    "(('A: Identifier' + 'B: Identifier') + ('C: Identifier' * 'D: Identifier'))": 1,
    "((-('A: number') <= 'B: Identifier') && ('C: Identifier' <= 'D: number'))": 1,
    "(-('A: number') <= 'B: Identifier')": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: CallExpression' !== 'D: string')) || ('E: CallExpression' !== 'F: string'))": 1,
    "((('A: UnaryExpression' || 'B: BinaryExpression') || ('C: string' === 'D: CallExpression')) || ('E: CallExpression' !== 'F: string'))": 1,
    "((!('A: MemberExpression') || ('B: CallExpression' !== 'C: string')) || ('D: string' === 'E: CallExpression'))": 1,
    "(!('A: MemberExpression') || ('B: CallExpression' !== 'C: string'))": 1,
    "('A: Identifier' * ('B: Identifier' % 'C: Identifier'))": 1,
    "((('A: Identifier' !== '') || (0 === 'B: Identifier')) || ('C: MemberExpression' !== 0))": 1,
    "(('A: Identifier' !== '') || (0 === 'B: Identifier'))": 1,
    "((0 === 'A: Identifier') ? 'B: Identifier' : ((1 === 'C: BinaryExpression') ? 'D: CallExpression' : 'E: CallExpression'))": 1,
    "((1 === ('A: Identifier' % 'B: number')) ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "(('A: Identifier' !== 'B: Identifier') ? 0 : 'C: CallExpression')": 1,
    "(('A: Identifier' <= -('B: number')) || ('C: Identifier' >= 'D: number'))": 1,
    "('A: Identifier' <= -('B: number'))": 1,
    "(('A: Identifier' < 0) ? ('B: Identifier' * 'C: CallExpression') : ('D: Identifier' / 'E: CallExpression'))": 1,
    "('A: Identifier' / 'B: CallExpression')": 1,
    "(1 << 'A: Identifier')": 1,
    "(1 << -('A: Identifier'))": 1,
    "(('A: Identifier' - 'B: Identifier') + 'C: number')": 1,
    "((('A: Identifier' + 'B: CallExpression') + 'C: string') + 'D: CallExpression')": 1,
    "(('A: Identifier' + 'B: CallExpression') + 'C: string')": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || 'C: MemberExpression') || ('D: MemberExpression' > 1))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: MemberExpression' === 'D: string')) || 'E: MemberExpression')": 1,
    "((('A: MemberExpression' !== 'B: number') || ('C: MemberExpression' !== 'D: number')) || ('E: MemberExpression' === 'F: string'))": 1,
    "(('A: MemberExpression' !== 'B: number') || ('C: MemberExpression' !== 'D: number'))": 1,
    "((('A: ConditionalExpression' + 'B: ConditionalExpression') + ('C: MemberExpression' ? 'D: string' : \"\")) + ('E: MemberExpression' ? 'F: string' : \"\"))": 1,
    "((('A: MemberExpression' ? 'B: string' : \"\") + ('C: MemberExpression' ? 'D: string' : \"\")) + ('E: MemberExpression' ? 'F: string' : \"\"))": 1,
    "(('A: MemberExpression' ? 'B: string' : \"\") + ('C: MemberExpression' ? 'D: string' : \"\"))": 1,
    "((void(0) === 'A: Identifier') ? (-(1) >>> 0) : ('B: Identifier' >>> 0))": 1,
    "(-(1) >>> 0)": 1,
    "(!('A: Identifier') && ('B: MemberExpression' > 1))": 1,
    "(('A: MemberExpression' > 1) && ('B: MemberExpression' < 'C: MemberExpression'))": 1,
    "(('A: MemberExpression' > 'B: Identifier') ? 'C: CallExpression' : 'D: Identifier')": 1,
    "('A: MemberExpression' && ('B: CallExpression' !== 'C: string'))": 1,
    "(('A: Identifier' < 0) ? (('B: AssignmentExpression' < 0) ? 0 : 'C: Identifier') : 'D: Identifier')": 1,
    "(('A: AssignmentExpression' < 0) ? 0 : 'B: Identifier')": 1,
    "(!('A: MemberExpression') || 'B: CallExpression')": 1,
    "(('A: ThisExpression' === void(0)) || ('B: ThisExpression' === null))": 1,
    "('A: ThisExpression' === void(0))": 1,
    "('A: ThisExpression' === null)": 1,
    "(('A: string' + 'B: ThisExpression') + 'C: string')": 1,
    "('A: string' + 'B: ThisExpression')": 1,
    "((('A: Identifier' !== 0) && ('B: Identifier' !== 'C: BinaryExpression')) && ('D: Identifier' !== -('E: BinaryExpression')))": 1,
    "(('A: Identifier' !== 0) && ('B: Identifier' !== (1 / 0)))": 1,
    "('A: Identifier' !== (1 / 0))": 1,
    "('A: Identifier' !== -((1 / 0)))": 1,
    "-((1 / 0))": 1,
    "((('A: Identifier' > 0) || -(1)) * 'B: CallExpression')": 1,
    "(('A: Identifier' > 0) || -(1))": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || (\"number\" === 'C: Identifier')) || (\"string\" === 'D: Identifier'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || (\"boolean\" === 'C: Identifier')) || (\"number\" === 'D: Identifier'))": 1,
    "(((null === 'A: Identifier') || (\"undefined\" === 'B: Identifier')) || (\"boolean\" === 'C: Identifier'))": 1,
    "((null === 'A: Identifier') || (\"undefined\" === 'B: Identifier'))": 1,
    "(\"undefined\" === 'A: Identifier')": 1,
    "(\"boolean\" === 'A: Identifier')": 1,
    "(\"number\" === 'A: Identifier')": 1,
    "('A: string' != 'B: MemberExpression')": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: string' == 'D: CallExpression')) && ('E: string' === 'F: CallExpression'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && (\"null\" == 'C: CallExpression')) && ('D: string' == 'E: CallExpression'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: string' == 'D: CallExpression')) && (\"null\" == 'E: CallExpression'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' === 'D: CallExpression')) && ('E: string' === 'F: CallExpression'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: string' == 'D: CallExpression')) && ('E: Identifier' === 'F: CallExpression'))": 1,
    "((('A: string' === 'B: CallExpression') && ('C: string' === 'D: CallExpression')) && ('E: string' == 'F: CallExpression'))": 1,
    "(('A: string' === 'B: CallExpression') && ('C: string' === 'D: CallExpression'))": 1,
    "((0 === 'A: CallExpression') && !('B: CallExpression'))": 1,
    "(('A: MemberExpression' == 'B: number') && ('C: MemberExpression' === 1))": 1,
    "('A: MemberExpression' == 'B: number')": 1,
    "((('A: UnaryExpression' == \"object\") && 'B: Identifier') && 'C: SequenceExpression')": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && (1 === 'C: CallExpression')) && ('D: number' == 'E: CallExpression'))": 1,
    "((('A: UnaryExpression' == 'B: CallExpression') && (0 === 'C: CallExpression')) && (1 === 'D: CallExpression'))": 1,
    "((-('A: number') == 'B: CallExpression') && (0 === 'C: CallExpression'))": 1,
    "(-('A: number') == 'B: CallExpression')": 1,
    "((('A: BinaryExpression' + 'B: CallExpression') - 'C: CallExpression') + 'D: CallExpression')": 1,
    "((('A: MemberExpression' + 'B: BinaryExpression') + 'C: CallExpression') - 'D: CallExpression')": 1,
    "(('A: MemberExpression' + ('B: number' * 'C: BinaryExpression')) + 'D: CallExpression')": 1,
    "('A: MemberExpression' + ('B: number' * ('C: Identifier' - 'D: number')))": 1,
    "((('A: Identifier' - 'B: number') + 'C: AssignmentExpression') / 'D: number')": 1,
    "(('A: Identifier' - 'B: number') + 'C: AssignmentExpression')": 1,
    "+((1 < 'A: Identifier'))": 1,
    "('A: AssignmentExpression' || 'B: AssignmentExpression')": 1,
    "(('A: MemberExpression' != 'B: Identifier') ? 'C: AssignmentExpression' : 'D: SequenceExpression')": 1,
    "('A: MemberExpression' != 'B: Identifier')": 1,
    "('A: Identifier' in 'B: SequenceExpression')": 1,
    "(('A: Identifier' in 'B: ThisExpression') && !(('C: BinaryExpression' && 'D: BinaryExpression')))": 1,
    "!((('A: Identifier' in 'B: Identifier') && ('C: MemberExpression' === 'D: MemberExpression')))": 1,
    "(('A: Identifier' in 'B: Identifier') && ('C: MemberExpression' === 'D: MemberExpression'))": 1,
    "('A: Identifier' ? 'B: AssignmentExpression' : 'C: SequenceExpression')": 1,
    "(('A: number' == 'B: Identifier') ? 'C: FunctionExpression' : 'D: FunctionExpression')": 1,
    "((('A: LogicalExpression' || 'B: UnaryExpression') || !('C: CallExpression')) || 'D: CallExpression')": 1,
    "((('A: LogicalExpression' || 'B: CallExpression') || !('C: AssignmentExpression')) || !('D: CallExpression'))": 1,
    "((('A: Identifier' && 'B: BinaryExpression') || 'C: CallExpression') || !('D: AssignmentExpression'))": 1,
    "(('A: Identifier' && ('B: string' == 'C: Identifier')) || 'D: CallExpression')": 1,
    "((('A: LogicalExpression' || 'B: UnaryExpression') || 'C: AssignmentExpression') || 'D: CallExpression')": 1,
    "((('A: Identifier' && 'B: BinaryExpression') || !('C: CallExpression')) || 'D: AssignmentExpression')": 1,
    "(('A: Identifier' || 'B: CallExpression') && 'C: CallExpression')": 1,
    "((\"object\" == 'A: Identifier') ? !(!('B: MemberExpression')) : !('C: MemberExpression'))": 1,
    "(\"object\" == 'A: Identifier')": 1,
    "((('A: Identifier' && 'B: BinaryExpression') || !('C: CallExpression')) || 'D: CallExpression')": 1,
    "('A: string' + ('B: Identifier' || 0))": 1,
    "(!('A: Identifier') || ('B: number' < 'C: Identifier'))": 1,
    "('A: Identifier' && ('B: Identifier' ? 'C: CallExpression' : 'D: Identifier'))": 1,
    "('A: Identifier' ? 'B: MemberExpression' : 'C: CallExpression')": 1,
    "(('A: string' != 'B: Identifier') || 'C: CallExpression')": 1,
    "((('A: UnaryExpression' == \"function\") && ('B: LogicalExpression' || 'C: CallExpression')) && 'D: AssignmentExpression')": 1,
    "((typeof('A: MemberExpression') == \"function\") && (('B: LogicalExpression' && 'C: BinaryExpression') || 'D: CallExpression'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: string' != 'D: Identifier')) || 'E: CallExpression')": 1,
    "((('A: string' != 'B: Identifier') && ('C: string' != 'D: Identifier')) && ('E: string' != 'F: Identifier'))": 1,
    "(('A: string' != 'B: Identifier') && ('C: string' != 'D: Identifier'))": 1,
    "(('A: CallExpression' + 'B: number') - 1)": 1,
    "(('A: Identifier' - 'B: CallExpression') / 'C: number')": 1,
    "((1 + 'A: Identifier') - 'B: CallExpression')": 1,
    "((('A: ConditionalExpression' + 'B: string') + 'C: CallExpression') + 'D: string')": 1,
    "((('A: LogicalExpression' ? 'B: BinaryExpression' : 'C: CallExpression') + 'D: string') + 'E: CallExpression')": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') ? ('C: ConditionalExpression' + 'D: CallExpression') : 'E: CallExpression') + 'F: string')": 1,
    "(((0 >= 'A: Identifier') || ('B: number' <= 'C: Identifier')) ? (('D: BinaryExpression' ? 'E: string' : 'F: string') + 'G: CallExpression') : 'H: CallExpression')": 1,
    "((0 >= 'A: Identifier') || ('B: number' <= 'C: Identifier'))": 1,
    "(((0 > 'A: Identifier') ? 'B: string' : 'C: string') + 'D: CallExpression')": 1,
    "((0 > 'A: Identifier') ? 'B: string' : 'C: string')": 1,
    "((0 > 'A: Identifier') ? -('B: Identifier') : 'C: Identifier')": 1,
    "((('A: Identifier' > 'B: BinaryExpression') && ('C: Identifier' < 'D: BinaryExpression')) ? (\"\" + 'E: Identifier') : \"null\")": 1,
    "(('A: Identifier' === 'B: Identifier') ? \"null\" : 'C: Identifier')": 1,
    "((('A: CallExpression' + 'B: string') + ('C: Identifier' ? 'D: string' : \"\")) + 'E: Identifier')": 1,
    "(('A: CallExpression' + 'B: string') + ('C: Identifier' ? 'D: string' : \"\"))": 1,
    "((typeof('A: Identifier') == \"function\") || (('B: UnaryExpression' == \"object\") && 'C: Identifier'))": 1,
    "('A: SequenceExpression' && 'B: AssignmentExpression')": 1,
    "(0 < 'A: AssignmentExpression')": 1,
    "(('A: number' < 'B: Identifier') && 'C: AssignmentExpression')": 1,
    "(('A: string' == 'B: Identifier') && 'C: AssignmentExpression')": 1,
    "(('A: number' >= 'B: MemberExpression') ? 'C: Identifier' : 'D: CallExpression')": 1,
    "((('A: LogicalExpression' || 'B: LogicalExpression') || ('C: BinaryExpression' && 'D: BinaryExpression')) || 'E: CallExpression')": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') || ('C: BinaryExpression' && 'D: BinaryExpression')) || (('E: number' <= 'F: Identifier') && ('G: number' >= 'H: Identifier')))": 1,
    "((('A: number' <= 'B: Identifier') && ('C: number' >= 'D: Identifier')) || (('E: number' <= 'F: Identifier') && ('G: number' >= 'H: Identifier')))": 1,
    "((('A: number' <= 'B: Identifier') && ('C: number' != 'D: Identifier')) && ('E: number' != 'F: Identifier'))": 1,
    "(('A: number' <= 'B: Identifier') && ('C: number' != 'D: Identifier'))": 1,
    "((('A: number' == 'B: Identifier') && 'C: SequenceExpression') && 'D: CallExpression')": 1,
    "((('A: number' != 'B: Identifier') && ('C: number' != 'D: Identifier')) || 'E: UpdateExpression')": 1,
    "(('A: number' != 'B: Identifier') && ('C: number' != 'D: Identifier'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: string' == 'D: CallExpression')) || 'E: CallExpression')": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: string' == 'D: ConditionalExpression')) && ('E: string' == 'F: CallExpression'))": 1,
    "((('A: string' != 'B: Identifier') && ('C: UnaryExpression' == \"string\")) && ('D: string' == ('E: Identifier' ? 'F: CallExpression' : 'G: MemberExpression')))": 1,
    "(('A: string' != 'B: Identifier') && (typeof('C: Identifier') == \"string\"))": 1,
    "(('A: Identifier' === 'B: Identifier') ? delete('C: MemberExpression') : 'D: AssignmentExpression')": 1,
    "(('A: string' != 'B: CallExpression') && 'C: CallExpression')": 1,
    "((!('A: Identifier') || ('B: BinaryExpression' && 'C: BinaryExpression')) || 'D: AssignmentExpression')": 1,
    "(!('A: Identifier') || (('B: MemberExpression' !== 'C: Identifier') && ('D: MemberExpression' !== 'E: Identifier')))": 1,
    "((('A: BinaryExpression' || 'B: UnaryExpression') || 'C: MemberExpression') || 'D: Identifier')": 1,
    "(((\"object\" != 'A: UnaryExpression') || !('B: Identifier')) || 'C: MemberExpression')": 1,
    "((\"object\" != typeof('A: Identifier')) || !('B: Identifier'))": 1,
    "((('A: MemberExpression' && 'B: Identifier') || ('C: MemberExpression' && 'D: Identifier')) || 'E: Identifier')": 1,
    "(('A: MemberExpression' && 'B: Identifier') || ('C: MemberExpression' && 'D: Identifier'))": 1,
    "(('A: Identifier' ? 'B: MemberExpression' : 0) - 'C: Identifier')": 1,
    "('A: Identifier' && (('B: MemberExpression' + 1) < 'C: Identifier'))": 1,
    "(('A: MemberExpression' + 1) < 'B: Identifier')": 1,
    "(('A: Identifier' && (0 <= 'B: Identifier')) && ('C: Identifier' < 'D: Identifier'))": 1,
    "('A: Identifier' && (0 <= 'B: Identifier'))": 1,
    "(!('A: Identifier') || ('B: Identifier' && ('C: MemberExpression' < 'D: MemberExpression')))": 1,
    "('A: Identifier' && ('B: MemberExpression' < 'C: MemberExpression'))": 1,
    "(('A: Identifier' && ('B: MemberExpression' === 'C: Identifier')) && ('D: MemberExpression' === 'E: Identifier'))": 1,
    "((('A: BinaryExpression' < 'B: Identifier') && ('C: BinaryExpression' < 'D: Identifier')) && 'E: CallExpression')": 1,
    "((('A: Identifier' + 1) < 'B: Identifier') && (('C: Identifier' + 1) < 'D: Identifier'))": 1,
    "(('A: MemberExpression' && !('B: CallExpression')) && !('C: CallExpression'))": 1,
    "(('A: Identifier' === ('B: MemberExpression' - 'C: number')) && (('D: MemberExpression' !== 'E: MemberExpression') || ('F: MemberExpression' !== 'G: MemberExpression')))": 1,
    "(('A: MemberExpression' !== 'B: MemberExpression') || ('C: MemberExpression' !== 'D: MemberExpression'))": 1,
    "(!('A: CallExpression') && ('B: Identifier' || 'C: Identifier'))": 1,
    "(('A: MemberExpression' ? 'B: string' : 'C: string') + 'D: Identifier')": 1,
    "(('A: MemberExpression' <= 'B: number') && ('C: Identifier' < ('D: MemberExpression' - 'E: number')))": 1,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + (('D: Identifier' - 'E: Identifier') + 'F: Identifier'))": 1,
    "((('A: string' + 'B: Identifier') + 'C: string') + (('D: Identifier' - 'E: Identifier') + 'F: Identifier'))": 1,
    "(('A: MemberExpression' === 'B: string') ? 'C: number' : 0)": 1,
    "(('A: MemberExpression' - 1) + 'B: Identifier')": 1,
    "('A: MemberExpression' ? 1 : ('B: MemberExpression' ? -(1) : 0))": 1,
    "('A: MemberExpression' ? -(1) : 0)": 1,
    "(('A: MemberExpression' === 'B: Identifier') || ('C: MemberExpression' && ('D: MemberExpression' === 'E: Identifier')))": 1,
    "(('A: Identifier' === 'B: Identifier') || ('C: MemberExpression' && ('D: MemberExpression' === 'E: Identifier')))": 1,
    "(('A: MemberExpression' * 'B: number') * ('C: Identifier' / 'D: number'))": 1,
    "('A: MemberExpression' || (('B: Identifier' | 0) + 'C: string'))": 1,
    "(('A: Identifier' | 0) + 'B: string')": 1,
    "(('A: Identifier' - ('B: Identifier' / 'C: number')) + 1)": 1,
    "('A: Identifier' - ('B: Identifier' / 'C: number'))": 1,
    "(('A: Identifier' + ('B: Identifier' / 'C: number')) - 1)": 1,
    "(typeof('A: MemberExpression') == 'function')": 1,
    "('A: UpdateExpression' || ('B: Identifier' && 'C: CallExpression'))": 1,
    "((typeof('A: Identifier') == 'string') ? 'B: NewExpression' : 'C: Identifier')": 1,
    "(('A: MemberExpression' && ('B: Identifier' != 'C: Identifier')) ? 'D: Identifier' : true)": 1,
    "(('A: MemberExpression' && ('B: Identifier' != 'C: Identifier')) ? 'D: Identifier' : false)": 1,
    "(('A: MemberExpression' && ('B: Identifier' !== 'C: Identifier')) ? 'D: Identifier' : true)": 1,
    "(false !== 'A: MemberExpression')": 1,
    "((('A: LogicalExpression' || 'B: CallExpression') || 'C: CallExpression') || ('D: Identifier' + 'E: string'))": 1,
    "('A: Identifier' < ('B: number' * 'C: Identifier'))": 1,
    "('A: Identifier' || ('B: MemberExpression' !== 'C: Identifier'))": 1,
    "('A: Identifier' ? ('B: MemberExpression' ? 'C: MemberExpression' : 'D: MemberExpression') : 'E: number')": 1,
    "(('A: MemberExpression' && ('B: UnaryExpression' == 'string')) && (typeof('C: Identifier') == 'string'))": 1,
    "('A: MemberExpression' && (typeof('B: Identifier') == 'string'))": 1,
    "('A: Identifier' ? ('B: Identifier' + 1) : 'C: Identifier')": 1,
    "('A: MemberExpression' || 'B: UpdateExpression')": 1,
    "(('A: MemberExpression' > 'B: CallExpression') ? 'C: string' : (('D: MemberExpression' > 'E: Identifier') ? 'F: string' : 'G: string'))": 1,
    "(('A: MemberExpression' > 'B: Identifier') ? 'C: string' : 'D: string')": 1,
    "(('A: Identifier' - 'B: MemberExpression') + 1)": 1,
    "((('A: CallExpression' + 'B: string') + 'C: string') + 'D: Identifier')": 1,
    "(('A: CallExpression' + 'B: string') + 'C: string')": 1,
    "(('A: number' * ('B: MemberExpression' / 'C: MemberExpression')) | 0)": 1,
    "((!('A: MemberExpression') && 'B: MemberExpression') && ('C: MemberExpression' !== 'D: Identifier'))": 1,
    "(('A: MemberExpression' == 'B: string') ? 'C: string' : 'D: string')": 1,
    "((('A: Identifier' ? 'B: BinaryExpression' : 'C: string') + 'D: string') + 'E: CallExpression')": 1,
    "(('A: Identifier' ? ('B: Identifier' + 'C: string') : 'D: string') + 'E: string')": 1,
    "('A: Identifier' ? ('B: Identifier' + 'C: string') : 'D: string')": 1,
    "(('A: MemberExpression' == 1) ? true : 'B: Identifier')": 1,
    "(('A: MemberExpression' === 'B: Identifier') ? '' : 'C: MemberExpression')": 1,
    "((-(1) == 'A: Identifier') ? (('B: BinaryExpression' / 'C: Identifier') | 0) : 'D: Identifier')": 1,
    "(-(1) == 'A: Identifier')": 1,
    "((('A: UpdateExpression' * 'B: Identifier') / 'C: Identifier') | 0)": 1,
    "(('A: UpdateExpression' * 'B: Identifier') / 'C: Identifier')": 1,
    "('A: UpdateExpression' * 'B: Identifier')": 1,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: CallExpression') + 'D: string')": 1,
    "('A: Identifier' * (1.0 / 'B: number'))": 1,
    "(1.0 / 'A: number')": 1,
    "((('A: BinaryExpression' + 'B: BinaryExpression') + 'C: Identifier') + 'D: number')": 1,
    "((('A: number' * 'B: Identifier') + ('C: number' * 'D: Identifier')) + 'E: Identifier')": 1,
    "(('A: number' * 'B: Identifier') + ('C: number' * 'D: Identifier'))": 1,
    "('A: MemberExpression' % 'B: MemberExpression')": 1,
    "(('A: Identifier' * 'B: Identifier') | 0)": 1,
    "(('A: Identifier' === 'B: Identifier') && !('C: MemberExpression'))": 1,
    "('A: string' + ('B: Identifier' + 'C: Identifier'))": 1,
    "(('A: MemberExpression' - 'B: MemberExpression') - 'C: MemberExpression')": 1,
    "((('A: string' + 'B: Identifier') + ('C: MemberExpression' ? 'D: BinaryExpression' : '')) + 'E: Identifier')": 1,
    "(('A: string' + 'B: Identifier') + ('C: MemberExpression' ? ('D: string' + 'E: CallExpression') : ''))": 1,
    "((('A: Identifier' + 'B: string') + 'C: Identifier') + 'D: Identifier')": 1,
    "((!('A: Identifier') && ('B: MemberExpression' > 'C: Identifier')) && 'D: MemberExpression')": 1,
    "(!('A: Identifier') && ('B: MemberExpression' > 'C: Identifier'))": 1,
    "(('A: string' + 'B: CallExpression') + '')": 1,
    "(('A: Identifier' !== 'B: CallExpression') ? 'C: Identifier' : ('D: MemberExpression' || 'E: Identifier'))": 1,
    "(0 == 'A: CallExpression')": 1,
    "(('A: MemberExpression' == 0) && (!('B: MemberExpression') || ('C: string' !== 'D: Identifier')))": 1,
    "(!('A: MemberExpression') || ('B: string' !== 'C: Identifier'))": 1,
    "((typeof('A: Identifier') === 'object') && (typeof('B: MemberExpression') === 'string'))": 1,
    "(('A: Identifier' << 'B: number') | 'C: Identifier')": 1,
    "((('A: BinaryExpression' + 'B: string') + ('C: Identifier' ? 'D: Identifier' : 'E: Identifier')) + 'F: string')": 1,
    "((('A: string' + 'B: ConditionalExpression') + 'C: string') + ('D: Identifier' ? 'E: Identifier' : 'F: Identifier'))": 1,
    "((!('A: CallExpression') || !('B: CallExpression')) || ('C: MemberExpression' === 'D: string'))": 1,
    "('A: Identifier' != -(1))": 1,
    "('A: MemberExpression' && (('B: CallExpression' - 'C: Identifier') < 'D: number'))": 1,
    "(('A: Identifier' && 'B: CallExpression') && ('C: MemberExpression' !== true))": 1,
    "(+('A: ThisExpression') === 1)": 1,
    "(+('A: Identifier') === 'B: number')": 1,
    "('A: UpdateExpression' <= 0)": 1,
    "((void(0) === 'A: Identifier') && ('B: Identifier' != null))": 1,
    "('A: Identifier' === ('B: number' * 'C: Identifier'))": 1,
    "((0 === 'A: Identifier') && ('B: Identifier' > 0))": 1,
    "((typeof('A: Identifier') === \"number\") ? ('B: Identifier' + \"\") : (('C: MemberExpression' + 'D: string') + 'E: MemberExpression'))": 1,
    "((('A: string' + 'B: BinaryExpression') + 'C: string') + 'D: Identifier')": 1,
    "('A: Identifier' > ('B: MemberExpression' + 1))": 1,
    "((('A: BinaryExpression' + 'B: string') + ('C: Identifier' - 1)) + 'D: string')": 1,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + ('D: Identifier' - 1))": 1,
    "((('A: string' + 'B: string') + 'C: string') + 'D: MemberExpression')": 1,
    "((('A: UnaryExpression' === 'B: Identifier') ? ('C: BinaryExpression' + 'D: string') : ('E: BinaryExpression' + 'F: string')) + 'G: string')": 1,
    "((void(0) === 'A: Identifier') ? (('B: BinaryExpression' + 'C: Identifier') + 'D: string') : (('E: BinaryExpression' + 'F: Identifier') + 'G: string'))": 1,
    "((('A: BinaryExpression' + 'B: string') + 'C: string') + \"\")": 1,
    "((('A: BinaryExpression' + \"\") + 'B: string') + 'C: string')": 1,
    "((('A: string' + 'B: string') + 'C: string') + \"\")": 1,
    "('A: CallExpression' || (('B: Identifier' > 0) && !('C: CallExpression')))": 1,
    "(('A: Identifier' > 0) && !('B: CallExpression'))": 1,
    "((typeof('A: Identifier') === \"string\") ? 'B: Identifier' : (('C: MemberExpression' + 'D: string') + 'E: MemberExpression'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && 'C: CallExpression') && ('D: MemberExpression' === 'E: string'))": 1,
    "((('A: UnaryExpression' === \"string\") && ('B: UnaryExpression' === \"function\")) && 'C: CallExpression')": 1,
    "((typeof('A: MemberExpression') === \"string\") && (typeof('B: MemberExpression') === \"function\"))": 1,
    "((typeof('A: Identifier') === \"string\") ? (('B: BinaryExpression' + 'C: string') + 'D: Identifier') : (('E: MemberExpression' + 'F: string') + 'G: MemberExpression'))": 1,
    "(('A: Identifier' + 'B: number') < 'C: MemberExpression')": 1,
    "((typeof('A: Identifier') !== \"undefined\") ? (('B: UnaryExpression' !== \"undefined\") ? 'C: FunctionExpression' : 'D: FunctionExpression') : (('E: UnaryExpression' !== \"undefined\") ? 'F: FunctionExpression' : 'G: FunctionExpression'))": 1,
    "((typeof('A: MemberExpression') !== \"undefined\") ? 'B: FunctionExpression' : 'C: FunctionExpression')": 1,
    "((typeof('A: Identifier') !== \"undefined\") ? 'B: FunctionExpression' : 'C: FunctionExpression')": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: UnaryExpression' === \"boolean\")) || (typeof('D: Identifier') === \"number\"))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: UnaryExpression' === \"string\")) || (typeof('D: Identifier') === \"boolean\"))": 1,
    "(((null === 'A: Identifier') || ('B: UnaryExpression' === \"undefined\")) || (typeof('C: Identifier') === \"string\"))": 1,
    "((null === 'A: Identifier') || (typeof('B: Identifier') === \"undefined\"))": 1,
    "(('A: MemberExpression' > 'B: MemberExpression') && !('C: MemberExpression'))": 1,
    "((null === 'A: Identifier') || (typeof('B: Identifier') !== \"object\"))": 1,
    "('A: CallExpression' && (false === 'B: Identifier'))": 1,
    "((typeof('A: Identifier') === \"function\") && (('B: MemberExpression' instanceof 'C: Identifier') || ('D: Identifier' === 'E: Identifier')))": 1,
    "(('A: MemberExpression' instanceof 'B: Identifier') || ('C: Identifier' === 'D: Identifier'))": 1,
    "(('A: Identifier' > 0) ? 'B: MemberExpression' : void(0))": 1,
    "((typeof('A: Identifier') === \"function\") ? 'B: Identifier' : 'C: MemberExpression')": 1,
    "(('A: MemberExpression' & -('B: number')) | ('C: Identifier' & 'D: number'))": 1,
    "('A: MemberExpression' | -('B: number'))": 1,
    "(('A: MemberExpression' & -('B: number')) === -('C: number'))": 1,
    "('A: MemberExpression' & ~(-('B: number')))": 1,
    "~(-('A: number'))": 1,
    "('A: MemberExpression' & ~('B: number'))": 1,
    "~('A: number')": 1,
    "(('A: Identifier' + 0) - 'B: number')": 1,
    "(('A: Identifier' + 1) - 'B: number')": 1,
    "(('A: Identifier' - 'B: number') + 0)": 1,
    "(('A: Identifier' - 'B: number') + 1)": 1,
    "(('A: Identifier' instanceof 'B: Identifier') || ('C: Identifier' === 'D: Identifier'))": 1,
    "(('A: Identifier' !== 'B: Identifier') || (('C: Identifier' instanceof 'D: Identifier') && ('E: Identifier' !== 'F: Identifier')))": 1,
    "(('A: Identifier' instanceof 'B: Identifier') && ('C: Identifier' !== 'D: Identifier'))": 1,
    "((!('A: Identifier') && 'B: CallExpression') && ('C: MemberExpression' !== void(0)))": 1,
    "((null === 'A: Identifier') ? void(0) : 'B: Identifier')": 1,
    "((void(0) === 'A: Identifier') && !('B: CallExpression'))": 1,
    "(('A: MemberExpression' - 'B: MemberExpression') + ('C: CallExpression' - 'D: MemberExpression'))": 1,
    "(('A: Identifier' + 1) === 'B: MemberExpression')": 1,
    "('A: CallExpression' ? 'B: MemberExpression' : void(0))": 1,
    "(0 === ('A: MemberExpression' & 'B: number'))": 1,
    "('A: Identifier' ? 'B: FunctionExpression' : 'C: MemberExpression')": 1,
    "(!('A: Identifier') && (false === 'B: Identifier'))": 1,
    "('A: Identifier' != 0)": 1,
    "((typeof('A: Identifier') === \"number\") ? 'B: Identifier' : 1)": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && 'C: MemberExpression') && (typeof('D: MemberExpression') === \"function\"))": 1,
    "((('A: UnaryExpression' === \"function\") && ('B: UnaryExpression' !== \"undefined\")) && 'C: MemberExpression')": 1,
    "((typeof('A: Identifier') === \"function\") && (typeof('B: Identifier') !== \"undefined\"))": 1,
    "((('A: UnaryExpression' !== \"undefined\") && ('B: UnaryExpression' === \"string\")) ? 'C: CallExpression' : 'D: ArrayExpression')": 1,
    "(!('A: CallExpression') || 'B: MemberExpression')": 1,
    "(((1 + 1) + 1) + 1)": 1,
    "((1 + 1) + 1)": 1,
    "(('A: Identifier' < 'B: number') ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "(1 === 0)": 1,
    "(typeof('A: CallExpression') === 'undefined')": 1,
    "(1 == 1)": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' === \"string\")) && ('D: Identifier' === 'E: Identifier'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' !== null)) && (typeof('D: MemberExpression') === \"string\"))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' !== \"undefined\")) && ('D: Identifier' !== null))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' !== \"undefined\")) && (typeof('D: Identifier') !== \"undefined\"))": 1,
    "((('A: UnaryExpression' !== \"undefined\") && ('B: Identifier' !== null)) && (typeof('C: MemberExpression') !== \"undefined\"))": 1,
    "((typeof('A: Identifier') !== \"undefined\") && ('B: Identifier' !== null))": 1,
    "(-(0) / 0)": 1,
    "((typeof('A: Identifier') !== \"undefined\") ? 'B: Identifier' : 'C: CallExpression')": 1,
    "(('A: CallExpression' * 'B: MemberExpression') | 0)": 1,
    "('A: CallExpression' * 'B: MemberExpression')": 1,
    "((('A: UnaryExpression' !== \"undefined\") && ('B: UnaryExpression' === \"string\")) && (typeof('C: Identifier') === \"undefined\"))": 1,
    "((null == 'A: Identifier') || (typeof('B: Identifier') !== \"object\"))": 1,
    "((0 === 'A: Identifier') ? (('B: BinaryExpression' + 'C: Identifier') + 'D: string') : (('E: BinaryExpression' + 'F: Identifier') + 'G: string'))": 1,
    "((typeof('A: Identifier') === \"number\") ? 'B: Identifier' : 0)": 1,
    "('A: CallExpression' ? \"\" : (('B: string' + 'C: CallExpression') + 'D: string'))": 1,
    "(('A: Identifier' > 0) ? 'B: CallExpression' : 'C: string')": 1,
    "(('A: Identifier' > 0) ? ('B: string' + 'C: Identifier') : \"\")": 1,
    "(('A: Identifier' < 0) ? ('B: string' + 'C: CallExpression') : \"\")": 1,
    "!((('A: number' <= 'B: MemberExpression') && ('C: MemberExpression' <= 'D: number')))": 1,
    "(('A: number' <= 'B: MemberExpression') && ('C: MemberExpression' <= 'D: number'))": 1,
    "('A: number' <= 'B: MemberExpression')": 1,
    "((typeof('A: MemberExpression') === \"function\") && ('B: CallExpression' === -(1)))": 1,
    "(('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 1))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 'D: Identifier')) && ('E: MemberExpression' === 'F: number'))": 1,
    "((('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: Identifier')) && ('E: MemberExpression' === 'F: Identifier'))": 1,
    "(('A: MemberExpression' && ('B: CallExpression' >= 0)) && ('C: string' === 'D: CallExpression'))": 1,
    "(('A: MemberExpression' || 'B: string') + 'C: string')": 1,
    "((('A: UnaryExpression' !== \"boolean\") ? false : 'B: MemberExpression') || !(!('C: MemberExpression')))": 1,
    "((typeof('A: MemberExpression') !== \"boolean\") ? false : 'B: MemberExpression')": 1,
    "('A: Identifier' && (('B: UnaryExpression' !== \"boolean\") ? true : 'C: MemberExpression'))": 1,
    "(('A: MemberExpression' === 'B: string') || (0 === 'C: CallExpression'))": 1,
    "('A: CallExpression' || !(!('B: MemberExpression')))": 1,
    "((!('A: UnaryExpression') || !('B: UnaryExpression')) || !(!('C: MemberExpression')))": 1,
    "((!('A: UnaryExpression') || !('B: UnaryExpression')) || (('C: UnaryExpression' === \"boolean\") ? 'D: MemberExpression' : !('E: UnaryExpression')))": 1,
    "((typeof('A: MemberExpression') === \"boolean\") ? 'B: MemberExpression' : !(!('C: MemberExpression')))": 1,
    "('A: MemberExpression' && (typeof('B: MemberExpression') === \"string\"))": 1,
    "(('A: CallExpression' >= 0) && ('B: string' === 'C: Identifier'))": 1,
    "(('A: Identifier' / 'B: Identifier') | 0)": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: string' === 'D: Identifier')) || 'E: CallExpression')": 1,
    "('A: MemberExpression' && !(('B: LogicalExpression' && 'C: BinaryExpression')))": 1,
    "!((('A: CallExpression' && 'B: BinaryExpression') && ('C: MemberExpression' <= 'D: number')))": 1,
    "(('A: CallExpression' && ('B: MemberExpression' >= 0)) && ('C: MemberExpression' <= 'D: number'))": 1,
    "('A: CallExpression' && ('B: MemberExpression' >= 0))": 1,
    "(('A: MemberExpression' === 1) ? ('' + 'B: MemberExpression') : 'C: CallExpression')": 1,
    "(('A: MemberExpression' <= 0) || !('B: Identifier'))": 1,
    "('A: MemberExpression' ? '' : 'B: Identifier')": 1,
    "(('A: CallExpression' + 'B: Identifier') + 'C: Identifier')": 1,
    "((('A: CallExpression' + 'B: Identifier') + ('C: Identifier' ? 'D: string' : 'E: string')) + 'F: Identifier')": 1,
    "(('A: CallExpression' + 'B: Identifier') + ('C: Identifier' ? 'D: string' : 'E: string'))": 1,
    "('A: Identifier' ? ('B: Identifier' - 1) : 'C: Identifier')": 1,
    "('A: number' * (('B: Identifier' - 'C: number') / 'D: number'))": 1,
    "(('A: Identifier' - 'B: number') / 'C: number')": 1,
    "((('A: number' + 'B: BinaryExpression') + ('C: number' * 'D: CallExpression')) + 'E: CallExpression')": 1,
    "(('A: number' + ('B: number' * 'C: CallExpression')) + ('D: number' * 'E: CallExpression'))": 1,
    "('A: number' + ('B: number' * 'C: CallExpression'))": 1,
    "('A: number' + ('B: Identifier' - 'C: number'))": 1,
    "((('A: number' * 'B: BinaryExpression') + 'C: number') / 'D: number')": 1,
    "(('A: number' * ('B: Identifier' - 'C: number')) + 'D: number')": 1,
    "('A: number' + (('B: BinaryExpression' | 'C: BinaryExpression') | 'D: CallExpression'))": 1,
    "((('A: CallExpression' << 'B: number') | ('C: CallExpression' << 1)) | 'D: CallExpression')": 1,
    "(('A: CallExpression' << 'B: number') | ('C: CallExpression' << 1))": 1,
    "('A: CallExpression' << 'B: number')": 1,
    "('A: CallExpression' << 1)": 1,
    "('A: CallExpression' ? '' : (('B: MemberExpression' === 1) ? 'C: string' : 'D: string'))": 1,
    "(('A: Identifier' !== -(1)) && (('B: UnaryExpression' === 'C: Identifier') || ('D: Identifier' < 'E: Identifier')))": 1,
    "((-(1) === 'A: Identifier') || ('B: Identifier' < 'C: Identifier'))": 1,
    "(('A: MemberExpression' === 0) ? 1 : 'B: CallExpression')": 1,
    "(('A: Identifier' && !('B: Identifier')) && ('C: Identifier' === 'D: Identifier'))": 1,
    "(('A: CallExpression' >= 'B: number') && ('C: CallExpression' >= 'D: number'))": 1,
    "(('A: CallExpression' >= 'B: number') ? 'C: number' : 'D: number')": 1,
    "('A: CallExpression' || ('B: MemberExpression' === 'C: string'))": 1,
    "('A: CallExpression' ? 1 : 0)": 1,
    "(('A: Identifier' >= 'B: number') ? 'C: number' : 'D: number')": 1,
    "(('A: MemberExpression' === false) ? 'B: string' : 'C: TemplateLiteral')": 1,
    "(('A: MemberExpression' > 'B: number') && ('C: string' === 'D: CallExpression'))": 1,
    "('A: CallExpression' + (('B: MemberExpression' === true) ? 'C: string' : ''))": 1,
    "(('A: MemberExpression' === true) ? 'B: string' : '')": 1,
    "('A: MemberExpression' ? (('B: string' + 'C: Identifier') + 'D: string') : (('E: string' + 'F: Identifier') + 'G: string'))": 1,
    "!(!(('A: MemberExpression' || 'B: MemberExpression')))": 1,
    "!(('A: MemberExpression' || 'B: MemberExpression'))": 1,
    "(('A: MemberExpression' && ('B: MemberExpression' !== 'C: Identifier')) && ('D: MemberExpression' === 'E: Identifier'))": 1,
    "(('A: MemberExpression' && !('B: MemberExpression')) && !('C: CallExpression'))": 1,
    "((null == 'A: Identifier') && ('B: MemberExpression' !== 'C: Identifier'))": 1,
    "((typeof('A: Identifier') === 'object') && ('B: Identifier' instanceof 'C: Identifier'))": 1,
    "((!('A: UnaryExpression') && 'B: Identifier') && !('C: MemberExpression'))": 1,
    "(!(!('A: MemberExpression')) && 'B: Identifier')": 1,
    "(('A: Identifier' !== 'B: Identifier') && !('C: CallExpression'))": 1,
    "('A: MemberExpression' || 'B: TemplateLiteral')": 1,
    "((!('A: Identifier') && !('B: MemberExpression')) && 'C: MemberExpression')": 1,
    "(('A: MemberExpression' === false) && ('B: MemberExpression' === null))": 1,
    "('A: Identifier' ? 'B: TemplateLiteral' : 'C: string')": 1,
    "(('A: MemberExpression' > 0) && 'B: MemberExpression')": 1,
    "(('A: Identifier' && 'B: MemberExpression') && (typeof('C: MemberExpression') === 'function'))": 1,
    "('A: CallExpression' && ('B: MemberExpression' === 'C: MemberExpression'))": 1,
    "((('A: MemberExpression' && 'B: BinaryExpression') && !('C: MemberExpression')) && !('D: MemberExpression'))": 1,
    "(('A: MemberExpression' && ('B: MemberExpression' === 0)) && !('C: MemberExpression'))": 1,
    "(('A: MemberExpression' === 'B: Identifier') || 'C: CallExpression')": 1,
    "(('A: MemberExpression' > 1) && ('B: MemberExpression' === 'C: string'))": 1,
    "(('A: MemberExpression' > 0) && !('B: CallExpression'))": 1,
    "('A: MemberExpression' ? 'B: Identifier' : null)": 1,
    "((('A: MemberExpression' > 'B: number') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' !== 'F: string'))": 1,
    "(('A: MemberExpression' > 'B: number') && ('C: MemberExpression' === 'D: string'))": 1,
    "((('A: MemberExpression' || 'B: MemberExpression') && ('C: MemberExpression' === 0)) && ('D: MemberExpression' === 0))": 1,
    "(('A: MemberExpression' || 'B: MemberExpression') && ('C: MemberExpression' === 0))": 1,
    "('A: MemberExpression' && ('B: MemberExpression' in 'C: MemberExpression'))": 1,
    "('A: MemberExpression' in 'B: MemberExpression')": 1,
    "(('A: Identifier' === 'B: CallExpression') || 'C: CallExpression')": 1,
    "(('A: CallExpression' !== 'B: Identifier') && !('C: CallExpression'))": 1,
    "((('A: MemberExpression' !== 'B: Identifier') && 'C: CallExpression') && 'D: CallExpression')": 1,
    "(('A: MemberExpression' !== 'B: Identifier') && 'C: CallExpression')": 1,
    "(!('A: MemberExpression') && ('B: Identifier' === 'C: CallExpression'))": 1,
    "('A: Identifier' && (('B: BinaryExpression' && 'C: BinaryExpression') || ('D: BinaryExpression' && 'E: BinaryExpression')))": 1,
    "((('A: MemberExpression' === 'B: Identifier') && (false === 'C: Identifier')) || (('D: MemberExpression' !== 'E: Identifier') && ('F: MemberExpression' === 'G: Identifier')))": 1,
    "(('A: MemberExpression' === 'B: Identifier') && (false === 'C: Identifier'))": 1,
    "(('A: MemberExpression' !== 'B: Identifier') && ('C: MemberExpression' === 'D: Identifier'))": 1,
    "((1 === 'A: Identifier') ? '' : 'B: string')": 1,
    "(('A: MemberExpression' !== 0) && 'B: MemberExpression')": 1,
    "(('A: MemberExpression' || 'B: MemberExpression') ? 'C: string' : 'D: ArrayExpression')": 1,
    "('A: MemberExpression' ? 'B: string' : 'C: ArrayExpression')": 1,
    "('A: MemberExpression' ? 'B: Identifier' : 'C: ArrayExpression')": 1,
    "(('A: Identifier' && 'B: MemberExpression') ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "((typeof('A: Identifier') !== 'string') && !('B: CallExpression'))": 1,
    "((('A: BinaryExpression' && 'B: Identifier') && ('C: UnaryExpression' !== 'function')) && 'D: MemberExpression')": 1,
    "(((0 === 'A: Identifier') && 'B: Identifier') && (typeof('C: Identifier') !== 'function'))": 1,
    "(('A: MemberExpression' && 'B: MemberExpression') && !('C: CallExpression'))": 1,
    "((('A: MemberExpression' + 'B: ConditionalExpression') + ('C: MemberExpression' ? 'D: string' : '')) + ('E: Identifier' ? ('F: string' + 'G: Identifier') : ''))": 1,
    "(('A: MemberExpression' + ('B: MemberExpression' ? 'C: BinaryExpression' : '')) + ('D: MemberExpression' ? 'E: string' : ''))": 1,
    "((('A: Identifier' + 'B: Identifier') + 'C: string') + 'D: CallExpression')": 1,
    "(('A: MemberExpression' || 'B: MemberExpression') || ('C: CallExpression' && ('D: UnaryExpression' === 'boolean')))": 1,
    "('A: CallExpression' && (typeof('B: MemberExpression') === 'boolean'))": 1,
    "(('A: MemberExpression' !== 'B: Identifier') && 'C: MemberExpression')": 1,
    "(('A: string' + ('B: Identifier' - 1)) + 'C: string')": 1,
    "((('A: Identifier' > 0) ? 'B: Identifier' : '') + 'C: CallExpression')": 1,
    "(('A: Identifier' > 0) ? 'B: Identifier' : '')": 1,
    "(('A: Identifier' !== 'B: Identifier') ? 'C: Identifier' : false)": 1,
    "('A: MemberExpression' === ('B: Identifier' === 'C: Identifier'))": 1,
    "(('A: MemberExpression' > 1) && !('B: CallExpression'))": 1,
    "((('A: Identifier' > 1) && ('B: Identifier' > 1)) && ('C: MemberExpression' === 'D: MemberExpression'))": 1,
    "(('A: Identifier' > 1) && ('B: Identifier' > 1))": 1,
    "((('A: UnaryExpression' !== 'undefined') && 'B: MemberExpression') && (('C: MemberExpression' === 'D: string') || 'E: MemberExpression'))": 1,
    "(('A: MemberExpression' === 'B: string') || 'C: MemberExpression')": 1,
    "((('A: LogicalExpression' || 'B: LogicalExpression') || ('C: LogicalExpression' && 'D: BinaryExpression')) || (('E: BinaryExpression' && 'F: MemberExpression') && 'G: CallExpression'))": 1,
    "((('A: LogicalExpression' && 'B: MemberExpression') || ('C: LogicalExpression' && 'D: LogicalExpression')) || (('E: LogicalExpression' && 'F: CallExpression') && ('G: CallExpression' >= 'H: number')))": 1,
    "((('A: LogicalExpression' && 'B: MemberExpression') && 'C: MemberExpression') || (('D: BinaryExpression' && 'E: MemberExpression') && ('F: MemberExpression' || 'G: LogicalExpression')))": 1,
    "((('A: UnaryExpression' !== 'undefined') && 'B: MemberExpression') && ('C: MemberExpression' || ('D: MemberExpression' && 'E: MemberExpression')))": 1,
    "((('A: BinaryExpression' && 'B: MemberExpression') && 'C: CallExpression') && ('D: CallExpression' >= 'E: number'))": 1,
    "((('A: BinaryExpression' + 'B: MemberExpression') + ('C: MemberExpression' ? 'D: string' : 'E: string')) + 'F: string')": 1,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + 'C: MemberExpression') + ('D: MemberExpression' ? 'E: string' : 'F: string'))": 1,
    "((('A: ConditionalExpression' + 'B: MemberExpression') + ('C: MemberExpression' ? 'D: string' : 'E: string')) + 'F: MemberExpression')": 1,
    "((('A: MemberExpression' ? 'B: string' : '') + 'C: MemberExpression') + ('D: MemberExpression' ? 'E: string' : 'F: string'))": 1,
    "(('A: MemberExpression' ? 'B: string' : '') + 'C: MemberExpression')": 1,
    "(('A: MemberExpression' || 'B: MemberExpression') || 'C: ArrowFunctionExpression')": 1,
    "((!('A: Identifier') && ('B: UnaryExpression' !== 'undefined')) && ('C: string' in 'D: Identifier'))": 1,
    "(!('A: Identifier') && (typeof('B: Identifier') !== 'undefined'))": 1,
    "('A: CallExpression' % 'B: MemberExpression')": 1,
    "('A: Identifier' - ('B: Identifier' || 'C: Identifier'))": 1,
    "(('A: MemberExpression' + ('B: BinaryExpression' ? 'C: string' : 'D: Identifier')) + 'E: Identifier')": 1,
    "('A: MemberExpression' + (('B: UnaryExpression' === 'undefined') ? 'C: string' : 'D: Identifier'))": 1,
    "((typeof('A: Identifier') === 'undefined') ? 'B: string' : 'C: Identifier')": 1,
    "((typeof('A: Identifier') === 'string') ? 'B: Identifier' : '')": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: MemberExpression' === true)) || 'D: MemberExpression')": 1,
    "((('A: UnaryExpression' === 'undefined') || ('B: MemberExpression' === 'C: string')) || ('D: MemberExpression' === true))": 1,
    "((typeof('A: Identifier') === 'undefined') || ('B: MemberExpression' === 'C: string'))": 1,
    "('A: Identifier' && ('B: MemberExpression' >= 'C: number'))": 1,
    "('null' === 'A: Identifier')": 1,
    "(('A: string' in 'B: MemberExpression') ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "('A: string' + (('B: Identifier' < 'C: number') ? 'D: Identifier' : ('E: string' + 'F: Identifier')))": 1,
    "(('A: Identifier' < 'B: number') ? 'C: Identifier' : ('D: string' + 'E: Identifier'))": 1,
    "((('A: CallExpression' + 'B: Identifier') + 'C: string') + 'D: MemberExpression')": 1,
    "(('A: CallExpression' + 'B: Identifier') + 'C: string')": 1,
    "(('A: MemberExpression' === true) && (typeof('B: MemberExpression') === 'function'))": 1,
    "(('A: MemberExpression' !== 'B: string') ? ('C: string' + 'D: Identifier') : 'E: Identifier')": 1,
    "('A: Identifier' && ('B: Identifier' !== 'C: MemberExpression'))": 1,
    "('A: MemberExpression' ? ('B: CallExpression' + 'C: MemberExpression') : '')": 1,
    "(('A: string' === 'B: Identifier') && ('C: MemberExpression' === 1))": 1,
    "(('A: CallExpression' && ('B: MemberExpression' > 1)) ? (('C: BinaryExpression' + 'D: MemberExpression') + 'E: string') : (('F: string' + 'G: MemberExpression') + 'H: string'))": 1,
    "('A: CallExpression' && ('B: MemberExpression' > 1))": 1,
    "(('A: Identifier' !== -(1)) ? 'B: CallExpression' : 'C: CallExpression')": 1,
    "(!('A: CallExpression') ? 'B: CallExpression' : 'C: ArrayExpression')": 1,
    "(('A: MemberExpression' === 'B: string') ? ('C: CallExpression' + 1) : 0)": 1,
    "((('A: Identifier' >= 'B: number') && ('C: Identifier' < 'D: number')) || ('E: number' === 'F: Identifier'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') && ('C: Identifier' > 'D: number')) && ('E: Identifier' < 'F: number'))": 1,
    "((('A: UnaryExpression' === 'string') || ('B: CallExpression' !== 'C: Identifier')) && ('D: Identifier' > 'E: number'))": 1,
    "((typeof('A: Identifier') === 'string') || ('B: CallExpression' !== 'C: Identifier'))": 1,
    "((typeof('A: MemberExpression') !== 'number') && (typeof('B: MemberExpression') === 'number'))": 1,
    "(typeof('A: MemberExpression') !== 'number')": 1,
    "((typeof('A: Identifier') === 'number') && ('B: MemberExpression' === 1))": 1,
    "(!('A: CallExpression') && (typeof('B: Identifier') === 'function'))": 1,
    "(!('A: Identifier') && ('B: MemberExpression' < 'C: number'))": 1,
    "((typeof('A: Identifier') === 'string') && ('B: MemberExpression' !== 0))": 1,
    "(!('A: MemberExpression') && !('B: CallExpression'))": 1,
    "((typeof('A: Identifier') === 'object') && (('B: UnaryExpression' === 'function') || ('C: Identifier' === 'D: Identifier')))": 1,
    "((typeof('A: Identifier') === 'function') || ('B: Identifier' === 'C: Identifier'))": 1,
    "(!('A: MemberExpression') ? 'B: CallExpression' : 'C: Identifier')": 1,
    "(('A: CallExpression' === -(1)) ? 'B: CallExpression' : 'C: Identifier')": 1,
    "(('A: MemberExpression' > 0) ? 'B: CallExpression' : false)": 1,
    "('A: CallExpression' ? 'B: CallExpression' : ('C: CallExpression' ? 'D: CallExpression' : 'E: ArrayExpression'))": 1,
    "((typeof('A: Identifier') === 'object') ? ('B: string' + 'C: CallExpression') : 'D: CallExpression')": 1,
    "('A: MemberExpression' - 0)": 1,
    "(!('A: Identifier') || ('B: CallExpression' && !('C: MemberExpression')))": 1,
    "(('A: Identifier' !== false) && !('B: Identifier'))": 1,
    "(('A: Identifier' || 'B: Identifier') ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "('A: Identifier' && (typeof('B: Identifier') === 'string'))": 1,
    "('function' !== typeof('A: Identifier'))": 1,
    "('A: Identifier' || ('B: MemberExpression' === 0))": 1,
    "(('A: string' === 'B: Identifier') ? null : 'C: Identifier')": 1,
    "(('A: Identifier' + 'B: Identifier') + 'C: CallExpression')": 1,
    "(('A: Identifier' !== true) && ('B: Identifier' < 'C: MemberExpression'))": 1,
    "(!('A: Identifier') && ('B: Identifier' !== 'C: string'))": 1,
    "('A: MemberExpression' ? 'B: CallExpression' : 'C: MemberExpression')": 1,
    "(('A: Identifier' && ('B: Identifier' !== 'C: string')) && ('D: Identifier' !== 'E: string'))": 1,
    "(!('A: Identifier') && ('B: MemberExpression' !== 'C: string'))": 1,
    "('A: Identifier' + (('B: MemberExpression' === 'C: string') ? 'D: CallExpression' : 'E: Identifier'))": 1,
    "(('A: MemberExpression' === 'B: string') ? 'C: CallExpression' : 'D: Identifier')": 1,
    "(('A: Identifier' === 'B: Identifier') || !('C: Identifier'))": 1,
    "('A: Identifier' && (('B: MemberExpression' === 'C: Identifier') || ('D: MemberExpression' && 'E: BinaryExpression')))": 1,
    "(('A: MemberExpression' === 'B: Identifier') || ('C: MemberExpression' && ('D: MemberExpression' !== 'E: string')))": 1,
    "((('A: UnaryExpression' !== 'string') || ('B: MemberExpression' === 0)) || ('C: MemberExpression' === 'D: string'))": 1,
    "((typeof('A: Identifier') !== 'object') || !('B: Identifier'))": 1,
    "(!((0 in 'A: Identifier')) || !((0 in 'B: Identifier')))": 1,
    "(('A: string' === 'B: Identifier') && ('C: MemberExpression' === false))": 1,
    "(~('A: CallExpression') ? 'B: CallExpression' : 'C: ObjectExpression')": 1,
    "(('A: MemberExpression' !== 'B: string') ? ('C: string' + 'D: MemberExpression') : 'E: MemberExpression')": 1,
    "(('A: Identifier' < 'B: MemberExpression') && !('C: Identifier'))": 1,
    "((('A: MemberExpression' + 'B: string') + 'C: MemberExpression') + ('D: MemberExpression' ? 'E: string' : ''))": 1,
    "(('A: MemberExpression' + 'B: string') + ('C: MemberExpression' || 'D: string'))": 1,
    "('A: MemberExpression' !== 0x00)": 1,
    "(~('A: CallExpression') || ('B: Identifier' === 'C: CallExpression'))": 1,
    "('A: MemberExpression' ? ('B: MemberExpression' === 'C: string') : ('D: CallExpression' !== -(1)))": 1,
    "(!('A: CallExpression') ? 'B: CallExpression' : 'C: MemberExpression')": 1,
    "(('A: MemberExpression' === '') || ('B: MemberExpression' === 'C: Identifier'))": 1,
    "!(('A: CallExpression' in 'B: MemberExpression'))": 1,
    "('A: CallExpression' ? 'B: Identifier' : 'C: NewExpression')": 1,
    "('A: Identifier' + ('B: Identifier' ? 'C: CallExpression' : 'D: Identifier'))": 1,
    "(('A: Identifier' <= 'B: Identifier') ? 'C: Identifier' : 'D: Identifier')": 1,
    "(('A: Identifier' >= 'B: Identifier') ? 'C: Identifier' : 'D: Identifier')": 1,
    "(!('A: Identifier') ? 'B: ArrayExpression' : 'C: CallExpression')": 1,
    "((null == 'A: Identifier') || 'B: CallExpression')": 1,
    "((null === 'A: Identifier') ? null : 'B: CallExpression')": 1,
    "((!('A: Identifier') && ('B: Identifier' !== 0)) && (typeof('C: MemberExpression') === 'function'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: Identifier' < 0)) || ('D: Identifier' && ('E: Identifier' >= 'F: Identifier')))": 1,
    "((('A: Identifier' === 'B: Identifier') || ('C: Identifier' >= 'D: Identifier')) || ('E: Identifier' < 0))": 1,
    "(('A: Identifier' === 'B: Identifier') || ('C: Identifier' >= 'D: Identifier'))": 1,
    "('A: Identifier' && ('B: Identifier' >= 'C: Identifier'))": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: Identifier' : 'D: CallExpression')": 1,
    "(('A: Identifier' === 'B: Identifier') || ('C: CallExpression' && !('D: CallExpression')))": 1,
    "(((null == 'A: Identifier') || ('B: Identifier' !== 'C: Identifier')) ? 'D: Identifier' : 'E: Identifier')": 1,
    "(('A: Identifier' < 0) ? 0 : 'B: CallExpression')": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: Identifier' : +('D: Identifier'))": 1,
    "(('A: Identifier' < 0) || ('B: Identifier' != 'C: Identifier'))": 1,
    "(('A: Identifier' >= 0) && ('B: Identifier' == 'C: CallExpression'))": 1,
    "(('A: Identifier' > -(1)) ? 'B: MemberExpression' : 'C: Identifier')": 1,
    "((('A: Identifier' != null) && 'B: MemberExpression') ? 'C: MemberExpression' : 'D: Identifier')": 1,
    "((null == 'A: Identifier') ? 0 : 'B: CallExpression')": 1,
    "(('A: Identifier' != null) && (typeof('B: MemberExpression') !== 'function'))": 1,
    "('A: CallExpression' ? 'B: NewExpression' : 'C: ArrayExpression')": 1,
    "((('A: Identifier' != null) && ('B: UnaryExpression' !== 'function')) && 'C: CallExpression')": 1,
    "(((true === 'A: Identifier') || (false === 'B: Identifier')) || ('C: CallExpression' && ('D: string' == 'E: CallExpression')))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && !('C: MemberExpression')) && 'D: Identifier')": 1,
    "((('A: UnaryExpression' === 'object') && ('B: Identifier' !== null)) && !('C: MemberExpression'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && !('C: MemberExpression')) && 'D: Identifier')": 1,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: Identifier' !== null)) && !('D: MemberExpression'))": 1,
    "(('A: Identifier' && ('B: UnaryExpression' === 'object')) && ('C: Identifier' !== null))": 1,
    "('A: Identifier' || 'B: ArrowFunctionExpression')": 1,
    "(('A: CallExpression' && ('B: MemberExpression' === 1)) && !('C: CallExpression'))": 1,
    "('A: CallExpression' && ('B: MemberExpression' === 1))": 1,
    "('A: CallExpression' && (('B: LogicalExpression' || 'C: CallExpression') || 'D: CallExpression'))": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || 'C: CallExpression') || 'D: CallExpression')": 1,
    "((('A: CallExpression' || 'B: BinaryExpression') || ('C: UnaryExpression' === 'function')) || 'D: CallExpression')": 1,
    "(('A: CallExpression' || ('B: UnaryExpression' === 'string')) || (typeof('C: MemberExpression') === 'function'))": 1,
    "('A: CallExpression' || (typeof('B: Identifier') === 'string'))": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: CallExpression' : !(!('D: Identifier')))": 1,
    "((('A: string' == 'B: Identifier') || ('C: string' == 'D: Identifier')) || (('E: BinaryExpression' && 'F: BinaryExpression') && !('G: CallExpression')))": 1,
    "((('A: UnaryExpression' === 'string') && ('B: UnaryExpression' === 'string')) && !('C: CallExpression'))": 1,
    "((typeof('A: MemberExpression') === 'string') && (typeof('B: MemberExpression') === 'string'))": 1,
    "((('A: UnaryExpression' === 'number') && ('B: Identifier' > 'C: UnaryExpression')) && (0 == ('D: Identifier' % 1)))": 1,
    "((typeof('A: Identifier') === 'number') && ('B: Identifier' > -(1)))": 1,
    "((typeof('A: Identifier') === 'number') || ('B: CallExpression' && ('C: string' == 'D: CallExpression')))": 1,
    "(('A: Identifier' != null) && (('object' === 'B: Identifier') || ('function' === 'C: Identifier')))": 1,
    "(!('A: CallExpression') || ('B: CallExpression' != 'C: string'))": 1,
    "(('string' === 'A: Identifier') || (('B: LogicalExpression' && 'C: UnaryExpression') && ('D: string' == 'E: CallExpression')))": 1,
    "('string' === 'A: Identifier')": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && !('C: CallExpression')) && ('D: string' == 'E: CallExpression'))": 1,
    "((('object' === 'A: Identifier') && ('B: Identifier' != null)) && !('C: CallExpression'))": 1,
    "(('A: string' == 'B: Identifier') || (('C: BinaryExpression' && 'D: BinaryExpression') && ('E: string' == 'F: CallExpression')))": 1,
    "((('object' === 'A: Identifier') && ('B: Identifier' != null)) && ('C: string' == 'D: CallExpression'))": 1,
    "(('A: Identifier' != null) && (('B: Identifier' === 'C: Identifier') ? ('D: BinaryExpression' && 'E: UnaryExpression') : ('F: Identifier' > 'G: Identifier')))": 1,
    "(('A: Identifier' === 'B: Identifier') ? (('C: Identifier' === 'D: Identifier') && !('E: CallExpression')) : ('F: Identifier' > 'G: Identifier'))": 1,
    "('A: Identifier' ? ('B: CallExpression' / 'C: Identifier') : 'D: Identifier')": 1,
    "('A: CallExpression' / 'B: Identifier')": 1,
    "((typeof('A: Identifier') !== 'function') || (('B: Identifier' != null) && ('C: UnaryExpression' !== 'function')))": 1,
    "(('A: Identifier' != null) && (('B: Identifier' === 'C: Identifier') ? ('D: BinaryExpression' && 'E: UnaryExpression') : ('F: Identifier' < 'G: Identifier')))": 1,
    "(('A: Identifier' === 'B: Identifier') ? (('C: Identifier' === 'D: Identifier') && !('E: CallExpression')) : ('F: Identifier' < 'G: Identifier'))": 1,
    "(('A: Identifier' < 0) ? 'B: Identifier' : 0)": 1,
    "(!('A: Identifier') || ('B: Identifier' >= 'C: Identifier'))": 1,
    "(('A: Identifier' && ('B: Identifier' < 'C: Identifier')) ? ('D: Identifier' + 'E: CallExpression') : ('F: Identifier' || ''))": 1,
    "(('A: Identifier' && ('B: Identifier' < 'C: Identifier')) ? ('D: CallExpression' + 'E: Identifier') : ('F: Identifier' || ''))": 1,
    "('A: CallExpression' ? 0 : 1)": 1,
    "((null == 'A: Identifier') ? 'B: ObjectExpression' : 'C: CallExpression')": 1,
    "('A: CallExpression' ? +('B: Identifier') : 'C: Identifier')": 1,
    "(('A: Identifier' || ('B: Identifier' % 1)) || ('C: Identifier' % 1))": 1,
    "('A: Identifier' || ('B: Identifier' % 1))": 1,
    "('A: Identifier' + ('B: Identifier' * ('C: BinaryExpression' + 'D: CallExpression')))": 1,
    "('A: Identifier' * (('B: Identifier' - 'C: Identifier') + 'D: CallExpression'))": 1,
    "(('A: Identifier' - 'B: Identifier') + 'C: CallExpression')": 1,
    "((!('A: Identifier') || ('B: Identifier' < 1)) || ('C: Identifier' > 'D: MemberExpression'))": 1,
    "(('A: MemberExpression' < 'B: number') ? 'C: Identifier' : 'D: CallExpression')": 1,
    "((typeof('A: Identifier') === 'function') ? 'B: CallExpression' : 'C: Identifier')": 1,
    "((null == 'A: Identifier') ? 1 : 'B: Identifier')": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: Identifier' : ('D: Identifier' >>> 0))": 1,
    "('A: Identifier' && (('B: UnaryExpression' === 'string') || ('C: BinaryExpression' && 'D: UnaryExpression')))": 1,
    "((typeof('A: Identifier') === 'string') || (('B: Identifier' != null) && !('C: CallExpression')))": 1,
    "(('A: Identifier' < 'B: number') ? 1 : 0)": 1,
    "(('A: number' == 'B: Identifier') ? 'C: ArrayExpression' : 'D: ArrayExpression')": 1,
    "(('A: number' == 'B: Identifier') ? 'C: Identifier' : 'D: CallExpression')": 1,
    "((('A: NewExpression' - 'B: Identifier') < 'C: Identifier') && (typeof('D: Identifier') !== 'string'))": 1,
    "('A: Identifier' ? 'B: CallExpression' : 'C: ObjectExpression')": 1,
    "((('A: MemberExpression' + 'B: string') + 'C: Identifier') + 'D: string')": 1,
    "(('A: Identifier' !== 'B: Identifier') && ('C: MemberExpression' === 'D: MemberExpression'))": 1,
    "((('A: MemberExpression' === 'B: MemberExpression') && ('C: MemberExpression' === 'D: Identifier')) && ('E: Identifier' !== 'F: Identifier'))": 1,
    "(('A: MemberExpression' === 'B: MemberExpression') && ('C: MemberExpression' === 'D: Identifier'))": 1,
    "((('A: LogicalExpression' && 'B: UnaryExpression') && !('C: CallExpression')) && !('D: CallExpression'))": 1,
    "((('A: CallExpression' && 'B: CallExpression') && !('C: CallExpression')) && !('D: CallExpression'))": 1,
    "(('A: Identifier' !== 'B: Identifier') && (('C: Identifier' instanceof 'D: Identifier') || !('E: BinaryExpression')))": 1,
    "((('A: MemberExpression' !== 'B: MemberExpression') && ('C: MemberExpression' !== 'D: MemberExpression')) && ('E: MemberExpression' !== 'F: MemberExpression'))": 1,
    "(('A: MemberExpression' !== 'B: MemberExpression') && ('C: MemberExpression' !== 'D: MemberExpression'))": 1,
    "((('A: MemberExpression' !== 'B: MemberExpression') && ('C: MemberExpression' === 'D: MemberExpression')) && ('E: MemberExpression' === 'F: MemberExpression'))": 1,
    "(('A: MemberExpression' !== 'B: MemberExpression') && ('C: MemberExpression' === 'D: MemberExpression'))": 1,
    "('A: Identifier' ? 'B: NewExpression' : 'C: NewExpression')": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: ObjectExpression' : 'D: ObjectExpression')": 1,
    "('A: Identifier' - (('B: Identifier' > 1) ? 1 : 0))": 1,
    "(('A: MemberExpression' === 1) && !('B: MemberExpression'))": 1,
    "(('A: UpdateExpression' == 'B: number') ? +('C: NewExpression') : +('D: NewExpression'))": 1,
    "('A: UpdateExpression' != 'B: number')": 1,
    "(((null == 'A: Identifier') || ('B: Identifier' !== 'C: Identifier')) ? 1 : 'D: Identifier')": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: string' : '')": 1,
    "('A: CallExpression' ? 'B: number' : 1)": 1,
    "('A: Identifier' ? 'B: number' : 0)": 1,
    "('A: Identifier' ? -('B: Identifier') : 'C: Identifier')": 1,
    "('A: Identifier' ? 'B: CallExpression' : !('C: CallExpression'))": 1,
    "('A: Identifier' ? 'B: number' : 'C: CallExpression')": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: MemberExpression' : 'D: Identifier')": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: number' : -(1))": 1,
    "('A: Identifier' ? 'B: MemberExpression' : 'C: NewExpression')": 1,
    "((!('A: Identifier') && 'B: Identifier') && 'C: Identifier')": 1,
    "(('A: Identifier' + 1) % 'B: MemberExpression')": 1,
    "('A: UpdateExpression' % 'B: MemberExpression')": 1,
    "((typeof('A: Identifier') === 'string') ? 'B: ArrayExpression' : 'C: ArrayExpression')": 1,
    "(('A: Identifier' instanceof 'B: Identifier') && (('C: Identifier' === 'D: Identifier') || ('E: BinaryExpression' && 'F: BinaryExpression')))": 1,
    "((!('A: Identifier') && ('B: Identifier' instanceof 'C: Identifier')) && (!('D: CallExpression') || ('E: MemberExpression' == 'F: Identifier')))": 1,
    "(!('A: Identifier') && ('B: Identifier' instanceof 'C: Identifier'))": 1,
    "(!('A: CallExpression') || ('B: MemberExpression' == 'C: Identifier'))": 1,
    "('A: Identifier' ? false : 1)": 1,
    "(('A: MemberExpression' > 'B: number') || 'C: CallExpression')": 1,
    "(('A: string' == 'B: Identifier') ? 'C: string' : 'D: ArrayExpression')": 1,
    "((('A: BinaryExpression' + 'B: string') + ('C: Identifier' ? 0 : 1)) + 'D: string')": 1,
    "((('A: string' + 'B: Identifier') + 'C: string') + ('D: Identifier' ? 0 : 1))": 1,
    "(('A: Identifier' + 'B: MemberExpression') + 'C: MemberExpression')": 1,
    "((('A: Identifier' !== 'B: Identifier') && ('C: Identifier' !== 'D: Identifier')) && 'E: CallExpression')": 1,
    "((('A: ConditionalExpression' + 'B: string') + ('C: Identifier' ? '' : 'D: string')) + 'E: string')": 1,
    "((('A: BinaryExpression' ? 'B: string' : 'C: string') + 'D: string') + ('E: Identifier' ? '' : 'F: string'))": 1,
    "((('A: Identifier' === 'B: Identifier') ? 'C: string' : 'D: string') + 'E: string')": 1,
    "((('A: UnaryExpression' && 'B: UnaryExpression') && !('C: Identifier')) && 'D: MemberExpression')": 1,
    "((!('A: Identifier') && ('B: Identifier' !== 'C: Identifier')) ? 0 : 'D: Identifier')": 1,
    "((!('A: Identifier') && ('B: MemberExpression' == 'C: Identifier')) || ('D: Identifier' !== 'E: Identifier'))": 1,
    "(!('A: Identifier') && ('B: MemberExpression' == 'C: Identifier'))": 1,
    "(('A: Identifier' && ('B: Identifier' !== 'C: Identifier')) ? 'D: CallExpression' : 0)": 1,
    "(('A: Identifier' != 'B: number') && ('C: Identifier' != 'D: number'))": 1,
    "('A: Identifier' ? ('B: Identifier' ? 'C: string' : 'D: string') : 'E: Identifier')": 1,
    "('A: Identifier' ? ('B: Identifier' ? 'C: string' : 'D: Identifier') : 'E: string')": 1,
    "('A: Identifier' ? ('B: Identifier' || 'C: ObjectExpression') : 'D: Identifier')": 1,
    "((('A: Identifier' % 1) && ('B: Identifier' >= 0)) && ('C: Identifier' <= 1))": 1,
    "((('A: Identifier' % 1) && ('B: Identifier' >= 0)) && ('C: Identifier' <= 'D: number'))": 1,
    "((('A: Identifier' % 1) && ('B: Identifier' >= 'C: number')) && ('D: Identifier' <= 'E: number'))": 1,
    "(('A: Identifier' % 1) && ('B: Identifier' >= 'C: number'))": 1,
    "((('A: Identifier' >= 0) && ('B: Identifier' <= 'C: MemberExpression')) && (0 == ('D: Identifier' % 1)))": 1,
    "(('A: Identifier' >= 0) && ('B: Identifier' <= 'C: MemberExpression'))": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: Identifier' : '')": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: Identifier' : 'D: ArrayExpression')": 1,
    "('A: Identifier' ? 'object' : 'B: string')": 1,
    "('A: Identifier' ? 'B: number' : ('C: Identifier' ? 'D: number' : 'E: number'))": 1,
    "('A: Identifier' ? ('B: Identifier' ? 'C: number' : 'D: number') : 'E: number')": 1,
    "(('A: Identifier' ? !('B: CallExpression') : 'C: CallExpression') ? 0 : 'D: CallExpression')": 1,
    "('A: Identifier' ? !('B: CallExpression') : 'C: CallExpression')": 1,
    "('A: Identifier' ? 'B: string' : 'C: ObjectExpression')": 1,
    "(('A: UpdateExpression' == 'B: number') ? 'C: Identifier' : +('D: NewExpression'))": 1,
    "('A: string' + ('B: Identifier' ? 'C: string' : ''))": 1,
    "(('A: UpdateExpression' < 'B: number') ? 0 : +('C: NewExpression'))": 1,
    "(('A: Identifier' > 1) ? 'B: string' : 'C: string')": 1,
    "('A: CallExpression' in 'B: Identifier')": 1,
    "((('A: UnaryExpression' === 'object') && 'B: Identifier') || 'C: ThisExpression')": 1,
    "((typeof('A: Identifier') === 'object') && 'B: Identifier')": 1,
    "((('A: MemberExpression' > 'B: Identifier') && !('C: CallExpression')) ? 'D: Identifier' : 'E: string')": 1,
    "(('A: MemberExpression' > 'B: Identifier') && !('C: CallExpression'))": 1,
    "('A: CallExpression' || ('B: string' in 'C: CallExpression'))": 1,
    "('A: string' in 'B: CallExpression')": 1,
    "('A: Identifier' || (typeof('B: Identifier') === 'function'))": 1,
    "((!('A: LogicalExpression') && ('B: Identifier' && 'C: BinaryExpression')) && 'D: MemberExpression')": 1,
    "(!(('A: LogicalExpression' || 'B: Identifier')) && ('C: Identifier' && ('D: MemberExpression' != 'null')))": 1,
    "!((('A: MemberExpression' || 'B: MemberExpression') || 'C: Identifier'))": 1,
    "('A: Identifier' && ('B: MemberExpression' != 'null'))": 1,
    "('A: MemberExpression' != 'null')": 1,
    "('A: Identifier' || (typeof('B: Identifier') !== 'function'))": 1,
    "(!(('A: LogicalExpression' && 'B: BinaryExpression')) && 'C: CallExpression')": 1,
    "!((('A: BinaryExpression' && 'B: ThisExpression') && ('C: MemberExpression' === 1)))": 1,
    "((('A: string' == 'B: Identifier') && 'C: ThisExpression') && ('D: MemberExpression' === 1))": 1,
    "(('A: string' == 'B: Identifier') && 'C: ThisExpression')": 1,
    "('A: Identifier' ? 'B: MemberExpression' : '')": 1,
    "!((('A: BinaryExpression' || 'B: BinaryExpression') || 'C: CallExpression'))": 1,
    "((('A: string' == 'B: Identifier') || ('C: MemberExpression' == 1)) || 'D: CallExpression')": 1,
    "(('A: string' == 'B: Identifier') || ('C: MemberExpression' == 1))": 1,
    "('A: string' + +('B: NewExpression'))": 1,
    "('A: Identifier' && !(('B: Identifier' || 'C: Identifier')))": 1,
    "('A: Identifier' ? 'B: ObjectExpression' : ('C: Identifier' ? 'D: ObjectExpression' : 'E: ObjectExpression'))": 1,
    "('A: Identifier' + ('B: Identifier' || 0))": 1,
    "(('A: Identifier' < 1) || ('B: Identifier' > 'C: Identifier'))": 1,
    "(('A: Identifier' == 'B: Identifier') ? 'C: Identifier' : (('D: Identifier' == 'E: Identifier') ? 'F: Identifier' : 'G: Identifier'))": 1,
    "(('A: Identifier' == 'B: Identifier') ? 'C: Identifier' : 'D: Identifier')": 1,
    "(('A: Identifier' === 'B: Identifier') || (-('C: Identifier') === 'D: Identifier'))": 1,
    "(('A: Identifier' < 0) ? -(1) : 1)": 1,
    "('A: Identifier' ? ('B: Identifier' - 'C: Identifier') : 'D: Identifier')": 1,
    "((typeof('A: MemberExpression') === 'function') ? 'B: CallExpression' : 'C: Identifier')": 1,
    "((0 === 'A: Identifier') ? 'B: Identifier' : +('C: Identifier'))": 1,
    "(('A: Identifier' || 'B: CallExpression') ? 'C: CallExpression' : ('D: CallExpression' ? 'E: Identifier' : +('F: Identifier')))": 1,
    "('A: CallExpression' ? 'B: Identifier' : +('C: Identifier'))": 1,
    "('A: CallExpression' ? 'B: ArrayExpression' : 'C: CallExpression')": 1,
    "('A: Identifier' < -('B: Identifier'))": 1,
    "(('A: Identifier' || 'B: CallExpression') || 'C: CallExpression')": 1,
    "((typeof('A: Identifier') === 'function') ? 'B: CallExpression' : 'C: ObjectExpression')": 1,
    "(('A: string' in 'B: Identifier') ? 'C: CallExpression' : 'D: Identifier')": 1,
    "('A: CallExpression' != 'B: Identifier')": 1,
    "((null == 'A: Identifier') ? true : 'B: CallExpression')": 1,
    "((null == 'A: Identifier') ? 'B: ArrayExpression' : 'C: CallExpression')": 1,
    "(('A: Identifier' > 1) ? 'B: MemberExpression' : 'C: Identifier')": 1,
    "((typeof('A: Identifier') === 'function') ? 'B: SequenceExpression' : 'C: Identifier')": 1,
    "('A: number' * ('B: number' * ('C: UnaryExpression' * 'D: number')))": 1,
    "('A: number' * (-(1) * 'B: number'))": 1,
    "(-(1) * 'A: number')": 1,
    "(('A: Identifier' ? ('B: Identifier' ? 'C: string' : '') : 'D: string') + 'E: Identifier')": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' == \"function\")) ? 'D: CallExpression' : (('E: BinaryExpression' && 'F: MemberExpression') ? 'G: CallExpression' : 'H: CallExpression'))": 1,
    "((('A: UnaryExpression' == \"object\") && (\"undefined\" != 'B: UnaryExpression')) && (typeof('C: Identifier') == \"function\"))": 1,
    "((('A: MemberExpression' != null) && ('B: MemberExpression' !== 'C: string')) ? 'D: string' : 'E: MemberExpression')": 1,
    "(('A: MemberExpression' != null) && ('B: MemberExpression' !== 'C: string'))": 1,
    "(('A: MemberExpression' != null) ? 'B: MemberExpression' : 'C: number')": 1,
    "(('A: MemberExpression' != null) ? 'B: MemberExpression' : false)": 1,
    "(('A: MemberExpression' === true) ? 'B: string' : 'C: string')": 1,
    "(('A: MemberExpression' === true) ? 'B: number' : 'C: number')": 1,
    "((0 === 'A: CallExpression') || ('B: MemberExpression' === 0))": 1,
    "((typeof('A: Identifier') === 'function') && !('B: Identifier'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: MemberExpression' === 'D: string')) && ('E: Identifier' < 'F: MemberExpression'))": 1,
    "(('A: Identifier' && ('B: MemberExpression' === 'C: string')) && 'D: Identifier')": 1,
    "('A: Identifier' && (('B: BinaryExpression' || 'C: BinaryExpression') || ('D: MemberExpression' === 'E: string')))": 1,
    "(('A: MemberExpression' === 'B: string') && 'C: Identifier')": 1,
    "((('A: MemberExpression' && 'B: MemberExpression') && ('C: MemberExpression' === 'D: MemberExpression')) && ('E: MemberExpression' === 'F: MemberExpression'))": 1,
    "(('A: MemberExpression' && 'B: MemberExpression') && ('C: MemberExpression' === 'D: MemberExpression'))": 1,
    "('A: CallExpression' !== ('B: MemberExpression' - 'C: MemberExpression'))": 1,
    "((('A: BinaryExpression' + 'B: string') + typeof('C: Identifier')) + 'D: string')": 1,
    "((('A: BinaryExpression' + 'B: string') + 'C: string') + typeof('D: Identifier'))": 1,
    "((('A: BinaryExpression' + 'B: string') + 'C: MemberExpression') + (('D: Identifier' != null) ? 'E: Identifier' : ''))": 1,
    "(('A: Identifier' != null) ? 'B: Identifier' : '')": 1,
    "('A: Identifier' && (('B: Identifier' && 'C: MemberExpression') || 'D: MemberExpression'))": 1,
    "(('A: Identifier' && ('B: UnaryExpression' === 'object')) ? 'C: Identifier' : 'D: ObjectExpression')": 1,
    "(('A: MemberExpression' !== 'B: string') && (typeof('C: Identifier') !== 'undefined'))": 1,
    "(!('A: MemberExpression') && ('B: Identifier' < 'C: number'))": 1,
    "((('A: BinaryExpression' + 'B: CallExpression') + 'C: string') + (('D: BinaryExpression' + 'E: Identifier') + 'F: string'))": 1,
    "(('A: MemberExpression' !== 'B: string') ? 'C: CallExpression' : void(0))": 1,
    "(('A: MemberExpression' > 0) ? (('B: string' + 'C: CallExpression') + 'D: string') : '')": 1,
    "('A: CallExpression' && (typeof('B: Identifier') !== 'function'))": 1,
    "((typeof('A: Identifier') === 'undefined') || (null === 'B: Identifier'))": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: MemberExpression' === 'D: UnaryExpression')) && !('E: CallExpression'))": 1,
    "(('A: MemberExpression' > 0) ? 'B: TemplateLiteral' : 'C: string')": 1,
    "(('A: Identifier' > 0) ? (('B: string' + 'C: Identifier') + 'D: string') : 'E: string')": 1,
    "((!('A: Identifier') && ('B: Identifier' != null)) && !('C: CallExpression'))": 1,
    "(('A: Identifier' < 'B: MemberExpression') && !('C: MemberExpression'))": 1,
    "('A: number' - ('B: Identifier' - 'C: Identifier'))": 1,
    "(('A: Identifier' >= 'B: number') && !(('C: BinaryExpression' && 'D: BinaryExpression')))": 1,
    "!(((0 === 'A: Identifier') && ('B: string' === 'C: Identifier')))": 1,
    "((0 === 'A: Identifier') && ('B: string' === 'C: Identifier'))": 1,
    "(('A: Identifier' > 0) || ('B: Identifier' > 'C: number'))": 1,
    "(!('A: MemberExpression') && ('B: MemberExpression' !== 'C: number'))": 1,
    "('A: MemberExpression' && (('B: string' + 'C: LogicalExpression') + 'D: string'))": 1,
    "(('A: string' + ('B: MemberExpression' || 'C: MemberExpression')) + 'D: string')": 1,
    "('A: string' + ('B: MemberExpression' || 'C: MemberExpression'))": 1,
    "(('A: Identifier' !== 'B: string') && 'C: TemplateLiteral')": 1,
    "('A: Identifier' ? ('B: Identifier' ? 'C: string' : false) : ('D: Identifier' && 'E: string'))": 1,
    "(('A: Identifier' && !('B: Identifier')) ? 'C: ArrayExpression' : 'D: MemberExpression')": 1,
    "('A: Identifier' ? 'B: ArrowFunctionExpression' : ('C: Identifier' && 'D: ArrowFunctionExpression'))": 1,
    "('A: Identifier' && 'B: ArrowFunctionExpression')": 1,
    "(('A: Identifier' && 'B: Identifier') && 'C: CallExpression')": 1,
    "(('A: Identifier' && 'B: CallExpression') && 'C: NewExpression')": 1,
    "(!('A: Identifier') && 'B: ObjectExpression')": 1,
    "(!('A: Identifier') || ('B: MemberExpression' === 'C: string'))": 1,
    "(('A: MemberExpression' && ('B: BinaryExpression' || 'C: BinaryExpression')) && 'D: MemberExpression')": 1,
    "('A: MemberExpression' && (('B: UnaryExpression' !== 'string') || ('C: CallExpression' !== 'D: string')))": 1,
    "((typeof('A: MemberExpression') !== 'string') || ('B: CallExpression' !== 'C: string'))": 1,
    "((!('A: MemberExpression') && ('B: CallExpression' === 'C: UnaryExpression')) && ('D: CallExpression' === -(1)))": 1,
    "(!('A: MemberExpression') && ('B: CallExpression' === -(1)))": 1,
    "('A: TemplateLiteral' + 'B: Identifier')": 1,
    "((typeof('A: Identifier') === 'object') ? 'B: number' : 'C: number')": 1,
    "(('A: string' === 'B: Identifier') && !('C: Identifier'))": 1,
    "(('A: string' === 'B: Identifier') ? 1 : 'C: number')": 1,
    "(('A: TemplateLiteral' + 'B: string') + ('C: Identifier' ? 'D: string' : ''))": 1,
    "((('A: MemberExpression' && 'B: MemberExpression') && 'C: MemberExpression') ? 'D: NewExpression' : 'E: Identifier')": 1,
    "((('A: MemberExpression' && 'B: MemberExpression') && 'C: MemberExpression') || false)": 1,
    "((('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: string')) && (('E: BinaryExpression' || 'F: BinaryExpression') || ('G: MemberExpression' === null)))": 1,
    "((('A: UnaryExpression' === 'string') || ('B: UnaryExpression' === 'number')) || ('C: MemberExpression' === null))": 1,
    "((typeof('A: MemberExpression') === 'string') || (typeof('B: MemberExpression') === 'number'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: MemberExpression' != null)) && !('D: MemberExpression'))": 1,
    "((('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' != null))": 1,
    "(('A: string' === 'B: Identifier') && ('C: MemberExpression' === 'D: string'))": 1,
    "(('A: MemberExpression' == null) || ('B: MemberExpression' == null))": 1,
    "((('A: MemberExpression' === 'B: string') && ('C: Identifier' === 'D: Identifier')) || (('E: MemberExpression' === 'F: string') && ('G: MemberExpression' === 'H: Identifier')))": 1,
    "(('A: MemberExpression' === 'B: string') && ('C: Identifier' === 'D: Identifier'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 'D: string')) && 'E: CallExpression')": 1,
    "((('A: LogicalExpression' && 'B: LogicalExpression') && !('C: MemberExpression')) && ('D: MemberExpression' === 'E: string'))": 1,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: BinaryExpression' || 'D: BinaryExpression')) && !('E: MemberExpression'))": 1,
    "(('A: Identifier' && ('B: MemberExpression' === 'C: string')) && (('D: MemberExpression' === 'E: string') || ('F: MemberExpression' === 'G: string')))": 1,
    "(('A: MemberExpression' != null) && ('B: MemberExpression' === 'C: MemberExpression'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: Identifier'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: string'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && !('C: MemberExpression')) && ('D: MemberExpression' === 'E: string'))": 1,
    "((('A: Identifier' != null) && ('B: MemberExpression' === 'C: string')) && !('D: MemberExpression'))": 1,
    "('A: MemberExpression' !== 'function')": 1,
    "((('A: BinaryExpression' + 'B: TemplateLiteral') + 'C: CallExpression') + 'D: TemplateLiteral')": 1,
    "((('A: TemplateLiteral' + 'B: TemplateLiteral') + 'C: TemplateLiteral') + 'D: CallExpression')": 1,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) ? 'E: string' : 'F: string')": 1,
    "(('A: Identifier' && ('B: MemberExpression' === 'C: string')) && ('function' === 'D: Identifier'))": 1,
    "((('A: BinaryExpression' + 'B: string') + 'C: CallExpression') + 'D: TemplateLiteral')": 1,
    "((('A: BinaryExpression' + 'B: string') + ('C: BinaryExpression' ? 'D: string' : 'E: string')) + 'F: string')": 1,
    "((('A: ConditionalExpression' + 'B: Identifier') + 'C: string') + (('D: MemberExpression' > 1) ? 'E: string' : 'F: string'))": 1,
    "((('A: BinaryExpression' ? '' : 'B: BinaryExpression') + 'C: Identifier') + 'D: string')": 1,
    "((('A: MemberExpression' > 1) ? '' : ('B: Identifier' + 'C: string')) + 'D: Identifier')": 1,
    "(('A: MemberExpression' > 1) ? '' : ('B: Identifier' + 'C: string'))": 1,
    "(((null == 'A: Identifier') || ('B: MemberExpression' == null)) || ('C: MemberExpression' !== 'D: string'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: BinaryExpression' || 'D: BinaryExpression')) && ('E: MemberExpression' === 'F: Identifier'))": 1,
    "((('A: Identifier' != null) && ('B: MemberExpression' != null)) && (('C: MemberExpression' === 'D: string') || ('E: MemberExpression' === 'F: string')))": 1,
    "(('A: Identifier' != null) && ('B: Identifier' !== 'C: MemberExpression'))": 1,
    "(('A: TemplateLiteral' + ('B: LogicalExpression' || 'C: CallExpression')) + 'D: Identifier')": 1,
    "('A: TemplateLiteral' + (('B: CallExpression' || 'C: CallExpression') || 'D: CallExpression'))": 1,
    "(('A: Identifier' && ('B: MemberExpression' === 'C: string')) && ('D: MemberExpression' === 'E: MemberExpression'))": 1,
    "(('A: Identifier' && !('B: CallExpression')) && !('C: CallExpression'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' != null))": 1,
    "(('A: Identifier' !== 'B: Identifier') && ('C: Identifier' != null))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && !('C: MemberExpression')) && !(('D: LogicalExpression' && 'E: BinaryExpression')))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: MemberExpression' !== 'D: string')) && !('E: MemberExpression'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') && ('C: MemberExpression' === 'D: Identifier')) && ('E: MemberExpression' !== 'F: string'))": 1,
    "((('A: MemberExpression' === 'B: string') || ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: Identifier'))": 1,
    "!((('A: BinaryExpression' && 'B: LogicalExpression') && ('C: MemberExpression' === 'D: MemberExpression')))": 1,
    "((('A: MemberExpression' != null) && ('B: BinaryExpression' || 'C: BinaryExpression')) && ('D: MemberExpression' === 'E: MemberExpression'))": 1,
    "(('A: MemberExpression' != null) && (('B: MemberExpression' === 'C: string') || ('D: MemberExpression' === 'E: string')))": 1,
    "((('A: BinaryExpression' && 'B: MemberExpression') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: Identifier'))": 1,
    "((('A: MemberExpression' === 'B: string') && 'C: MemberExpression') && ('D: MemberExpression' === 'E: string'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 'D: string')) && !('E: MemberExpression'))": 1,
    "((('A: Identifier' === 'B: Identifier') && 'C: Identifier') && 'D: MemberExpression')": 1,
    "('A: CallExpression' ? 0 : -(1))": 1,
    "((0 === 'A: Identifier') && ('B: MemberExpression' === 'C: number'))": 1,
    "(('A: Identifier' === ('B: MemberExpression' - 'C: number')) && ('D: MemberExpression' > 'E: number'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && !('C: CallExpression')) && (typeof('D: MemberExpression') === 'string'))": 1,
    "((('A: UnaryExpression' === 'object') && ('B: Identifier' !== null)) && !('C: CallExpression'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') && ('C: MemberExpression' === 'D: MemberExpression')) && ('E: MemberExpression' === 'F: MemberExpression'))": 1,
    "((('A: MemberExpression' === 'B: string') || ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: MemberExpression'))": 1,
    "(('A: MemberExpression' <= 'B: MemberExpression') && ('C: MemberExpression' >= 'D: MemberExpression'))": 1,
    "((('A: MemberExpression' === 'B: string') && !('C: MemberExpression')) && 'D: CallExpression')": 1,
    "(('A: MemberExpression' === 'B: Identifier') || (('C: BinaryExpression' && 'D: BinaryExpression') && ('E: MemberExpression' === 'F: Identifier')))": 1,
    "((('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' === 'F: Identifier'))": 1,
    "('A: Identifier' ? ('B: CallExpression' || 'C: CallExpression') : ('D: CallExpression' || 'E: CallExpression'))": 1,
    "(('A: MemberExpression' === 0) ? ('B: Identifier' <= 'C: CallExpression') : ('D: Identifier' < 'E: CallExpression'))": 1,
    "((('A: TemplateLiteral' + 'B: string') + 'C: string') + ('D: Identifier' ? ('E: string' + 'F: string') : ''))": 1,
    "('A: Identifier' ? ('B: string' + 'C: string') : '')": 1,
    "(('A: MemberExpression' && ('B: BinaryExpression' || 'C: BinaryExpression')) && ('D: MemberExpression' === 'E: Identifier'))": 1,
    "('A: MemberExpression' && (('B: MemberExpression' === 'C: string') || ('D: MemberExpression' === 'E: string')))": 1,
    "(('A: MemberExpression' === 'B: string') || (('C: MemberExpression' === 'D: string') && 'E: MemberExpression'))": 1,
    "((null === 'A: Identifier') ? 'B: MemberExpression' : 'C: ObjectExpression')": 1,
    "(-('A: number') * 'B: Identifier')": 1,
    "('A: MemberExpression' ? 'B: MemberExpression' : 0)": 1,
    "(('A: Identifier' !== 0) && (0 === ('B: Identifier' % 'C: number')))": 1,
    "(('A: MemberExpression' * 'B: Identifier') % 'C: MemberExpression')": 1,
    "(('A: Identifier' > 'B: Identifier') ? (('C: MemberExpression' - 'D: Identifier') + 'E: Identifier') : ('F: Identifier' - 'G: Identifier'))": 1,
    "('A: Identifier' + ('B: Identifier' * 'C: Identifier'))": 1,
    "('A: Identifier' - ('B: Identifier' * 'C: Identifier'))": 1,
    "(0 === ('A: Identifier' - 'B: Identifier'))": 1,
    "('A: Identifier' >= ('B: Identifier' + 'C: number'))": 1,
    "(('A: Identifier' !== 'B: Identifier') || !('C: Identifier'))": 1,
    "('A: string' === 'B: ChainExpression')": 1,
    "(!('A: Identifier') || ('B: Identifier' !== 'C: MemberExpression'))": 1,
    "((('A: Identifier' && 'B: CallExpression') && 'C: Identifier') && 'D: CallExpression')": 1,
    "(('A: Identifier' && 'B: CallExpression') && 'C: Identifier')": 1,
    "(('A: Identifier' > 0) && ('B: Identifier' < 'C: number'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && 'C: CallExpression') && ('D: MemberExpression' !== true))": 1,
    "((('A: Identifier' !== null) && ('B: UnaryExpression' === 'object')) && 'C: CallExpression')": 1,
    "((('A: BinaryExpression' && 'B: CallExpression') && !('C: CallExpression')) && !('D: CallExpression'))": 1,
    "((('A: UnaryExpression' === 'number') && 'B: CallExpression') && !('C: CallExpression'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && 'C: CallExpression') && ('D: MemberExpression' !== 'E: Identifier'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && 'C: CallExpression') && 'D: CallExpression')": 1,
    "(('A: Identifier' < 'B: Identifier') > false)": 1,
    "(('A: string' === 'B: Identifier') ? 'C: Identifier' : 'D: Identifier')": 1,
    "((('A: BinaryExpression' && 'B: Identifier') && !('C: CallExpression')) && 'D: SequenceExpression')": 1,
    "((('A: UnaryExpression' == \"number\") && 'B: Identifier') && !('C: CallExpression'))": 1,
    "((typeof('A: Identifier') == \"number\") && 'B: Identifier')": 1,
    "(((\"number\" != 'A: UnaryExpression') && (\"number\" != 'B: UnaryExpression')) || (('C: Identifier' && 'D: UnaryExpression') && 'E: SequenceExpression'))": 1,
    "((\"number\" != typeof('A: Identifier')) && (\"number\" != typeof('B: Identifier')))": 1,
    "('A: Identifier' && (\"number\" != typeof('B: Identifier')))": 1,
    "(!('A: Identifier') && (\"number\" != typeof('B: Identifier')))": 1,
    "('A: MemberExpression' && ('B: CallExpression' !== 0))": 1,
    "('A: Identifier' && ('B: MemberExpression' === 'C: MemberExpression'))": 1,
    "(('A: MemberExpression' && 'B: MemberExpression') || '')": 1,
    "(('A: Identifier' + ('B: Identifier' ? 'C: Identifier' : 'D: CallExpression')) + 'E: string')": 1,
    "('A: Identifier' + ('B: Identifier' ? 'C: Identifier' : 'D: CallExpression'))": 1,
    "((-(1) === 'A: Identifier') || (-(1) === 'B: Identifier'))": 1,
    "(('A: MemberExpression' === 'B: Identifier') ? 'C: Identifier' : 'D: CallExpression')": 1,
    "(!('A: MemberExpression') && ('B: Identifier' > 'C: Identifier'))": 1,
    "((('A: MemberExpression' === 1) && ('B: MemberExpression' === 'C: MemberExpression')) && ('D: MemberExpression' === 'E: MemberExpression'))": 1,
    "(('A: MemberExpression' === 1) && ('B: MemberExpression' === 'C: MemberExpression'))": 1,
    "!(!(('A: CallExpression' & 'B: number')))": 1,
    "!(('A: CallExpression' & 'B: number'))": 1,
    "('A: CallExpression' & 'B: number')": 1,
    "('A: Identifier' && (('B: LogicalExpression' || 'C: BinaryExpression') || ('D: MemberExpression' === 'E: string')))": 1,
    "((('A: BinaryExpression' && 'B: LogicalExpression') || ('C: string' === 'D: Identifier')) || ('E: MemberExpression' === 'F: string'))": 1,
    "((('A: string' === 'B: Identifier') && ('C: LogicalExpression' || 'D: BinaryExpression')) || ('E: string' === 'F: Identifier'))": 1,
    "(('A: string' === 'B: Identifier') && (('C: LogicalExpression' || 'D: BinaryExpression') || ('E: MemberExpression' === 'F: string')))": 1,
    "((('A: LogicalExpression' || 'B: BinaryExpression') || ('C: MemberExpression' === 'D: string')) || ('E: MemberExpression' === 'F: string'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || ('C: MemberExpression' === 'D: string')) || ('E: MemberExpression' === 'F: string'))": 1,
    "((('A: CallExpression' !== 'B: UnaryExpression') && ('C: Identifier' !== 'D: string')) && ('E: Identifier' !== 'F: string'))": 1,
    "(('A: CallExpression' !== -(1)) && ('B: Identifier' !== 'C: string'))": 1,
    "('A: Identifier' ? null : 'B: CallExpression')": 1,
    "((('A: UnaryExpression' + 'B: string') + 'C: Identifier') + 'D: string')": 1,
    "((!('A: UnaryExpression') + 'B: string') + 'C: Identifier')": 1,
    "(!(!('A: Identifier')) + 'B: string')": 1,
    "(('A: string' === 'B: Identifier') && ('C: string' === 'D: Identifier'))": 1,
    "(('A: Identifier' > 1) ? (1 - 'B: Identifier') : 'C: Identifier')": 1,
    "(1 - 'A: Identifier')": 1,
    "(('A: MemberExpression' === 'B: Identifier') ? 'C: MemberExpression' : 'D: Identifier')": 1,
    "('A: CallExpression' && ('B: Identifier' in 'C: Identifier'))": 1,
    "(('A: Identifier' !== 'B: Identifier') ? ('C: Identifier' + 'D: CallExpression') : 'E: Identifier')": 1,
    "((typeof('A: Identifier') === 'boolean') || (typeof('B: Identifier') === 'number'))": 1,
    "((('A: UnaryExpression' && 'B: BinaryExpression') && ('C: Identifier' !== 0)) && !(('D: CallExpression' && 'E: MemberExpression')))": 1,
    "((!('A: Identifier') && ('B: UnaryExpression' === 'number')) && ('C: Identifier' !== 0))": 1,
    "(!('A: Identifier') && (typeof('B: Identifier') === 'number'))": 1,
    "!(('A: CallExpression' && 'B: MemberExpression'))": 1,
    "((('A: Identifier' != null) && ('B: MemberExpression' === null)) && !('C: Identifier'))": 1,
    "(('A: Identifier' != null) && ('B: MemberExpression' === null))": 1,
    "('A: CallExpression' ? 'B: MemberExpression' : null)": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: Identifier' !== 'D: Identifier')) && (typeof('E: Identifier') !== 'string'))": 1,
    "((('A: string' === 'B: Identifier') && ('C: Identifier' !== null)) && ('D: Identifier' !== 'E: Identifier'))": 1,
    "(('A: string' === 'B: Identifier') && ('C: Identifier' !== null))": 1,
    "(('A: Identifier' !== null) && ('B: MemberExpression' === 'C: Identifier'))": 1,
    "((typeof('A: Identifier') === 'boolean') && 'B: CallExpression')": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') && ('C: Identifier' !== null)) && ('D: MemberExpression' === 'E: Identifier'))": 1,
    "((('A: string' === 'B: Identifier') || ('C: string' === 'D: Identifier')) && ('E: Identifier' !== null))": 1,
    "(!('A: CallExpression') && (1 === ('B: Identifier' % 'C: number')))": 1,
    "((0 > 'A: Identifier') || ('B: Identifier' > 'C: MemberExpression'))": 1,
    "(('A: Identifier' !== 'B: Identifier') || ('C: Identifier' !== 'D: Identifier'))": 1,
    "(('A: MemberExpression' != null) ? 'B: MemberExpression' : ('C: MemberExpression' === false))": 1,
    "('' + 'A: UpdateExpression')": 1,
    "(('A: Identifier' !== 'B: string') && !('C: MemberExpression'))": 1,
    "((('A: UnaryExpression' === 'string') && ('B: MemberExpression' >= 'C: string')) && ('D: MemberExpression' <= 'E: string'))": 1,
    "((typeof('A: Identifier') === 'string') && ('B: MemberExpression' >= 'C: string'))": 1,
    "('A: MemberExpression' >= 'B: string')": 1,
    "('A: MemberExpression' <= 'B: string')": 1,
    "(('A: Identifier' === 'B: Identifier') || ('C: MemberExpression' === 0))": 1,
    "(('A: MemberExpression' && ('B: MemberExpression' !== 'C: string')) && ('D: MemberExpression' !== 'E: string'))": 1,
    "((typeof('A: Identifier') === 'function') && !('B: MemberExpression'))": 1,
    "('A: Identifier' || ('B: MemberExpression' > 0))": 1,
    "(('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: MemberExpression'))": 1,
    "(('A: MemberExpression' === 'B: string') && ('C: MemberExpression' !== 'D: MemberExpression'))": 1,
    "((null === 'A: Identifier') || !('B: CallExpression'))": 1,
    "(('A: string' === 'B: Identifier') && ('C: MemberExpression' > 0))": 1,
    "(('A: string' === 'B: Identifier') && ('C: MemberExpression' > 1))": 1,
    "(('A: MemberExpression' === 0) && ('B: MemberExpression' === 0))": 1,
    "void('A: MemberExpression')": 1,
    "(('A: MemberExpression' && 'B: MemberExpression') && !('C: MemberExpression'))": 1,
    "((('A: UnaryExpression' !== 'object') && ('B: UnaryExpression' !== 'function')) && ('C: Identifier' != null))": 1,
    "((typeof('A: Identifier') !== 'object') && (typeof('B: Identifier') !== 'function'))": 1,
    "((('A: BinaryExpression' && 'B: MemberExpression') && 'C: MemberExpression') && ('D: MemberExpression' !== 'E: MemberExpression'))": 1,
    "((('A: UnaryExpression' === 'string') && 'B: MemberExpression') && 'C: MemberExpression')": 1,
    "(('A: MemberExpression' === 'B: Identifier') && ('C: Identifier' !== 'D: Identifier'))": 1,
    "(('A: Identifier' !== null) && ('B: Identifier' !== 'C: Identifier'))": 1,
    "(('A: Identifier' && ('B: MemberExpression' || 'C: MemberExpression')) || 'D: string')": 1,
    "('A: Identifier' || (('B: Identifier' && 'C: MemberExpression') && 'D: Identifier'))": 1,
    "(('A: Identifier' && 'B: MemberExpression') && 'C: Identifier')": 1,
    "(('A: MemberExpression' > 0) && 'B: CallExpression')": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: string' : 'D: Identifier')": 1,
    "(('A: Identifier' - 'B: MemberExpression') - 1)": 1,
    "((typeof('A: Identifier') !== 'undefined') ? 'B: Identifier' : null)": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: MemberExpression' !== 'D: Identifier')) ? 'E: CallExpression' : null)": 1,
    "((('A: UnaryExpression' !== 'undefined') && ('B: MemberExpression' !== 'C: Identifier')) && ('D: MemberExpression' !== 'E: Identifier'))": 1,
    "((typeof('A: Identifier') !== 'undefined') && ('B: MemberExpression' !== 'C: Identifier'))": 1,
    "(('A: Identifier' !== null) && !(('B: Identifier' && 'C: Identifier')))": 1,
    "(('A: MemberExpression' > 'B: Identifier') && (!('C: Identifier') || 'D: CallExpression'))": 1,
    "((typeof('A: Identifier') === 'number') && ('B: Identifier' > 0))": 1,
    "((null === 'A: CallExpression') && ('B: Identifier' === 'C: CallExpression'))": 1,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: MemberExpression' !== 'D: Identifier')) && ('E: MemberExpression' !== 'F: Identifier'))": 1,
    "(('A: Identifier' && ('B: Identifier' !== 'C: Identifier')) && ('D: MemberExpression' !== 'E: Identifier'))": 1,
    "('A: Identifier' ? 'B: ObjectExpression' : null)": 1,
    "(('A: CallExpression' === -(1)) ? 'B: Identifier' : 'C: Identifier')": 1,
    "(('A: Identifier' === 'B: Identifier') || ('C: MemberExpression' !== 'D: string'))": 1,
    "(('A: Identifier' * 'B: CallExpression') | 0)": 1,
    "(!('A: Identifier') || ('B: Identifier' && ('C: CallExpression' !== 'D: UnaryExpression')))": 1,
    "('A: Identifier' && ('B: CallExpression' !== -(1)))": 1,
    "(!('A: Identifier') || (typeof('B: Identifier') !== 'string'))": 1,
    "(('A: Identifier' && 'B: Identifier') || (!('C: Identifier') && !('D: Identifier')))": 1,
    "('A: Identifier' * ('B: number' * 'C: number'))": 1,
    "(('A: Identifier' > 0) ? 'B: TemplateLiteral' : '')": 1,
    "(('A: Identifier' > 0) ? 'B: string' : '')": 1,
    "(('A: Identifier' + 'B: Identifier') < 0)": 1,
    "((('A: Identifier' - 'B: Identifier') / 'C: Identifier') - (('D: Identifier' * 'E: CallExpression') / 'F: CallExpression'))": 1,
    "(('A: Identifier' * 'B: CallExpression') / 'C: CallExpression')": 1,
    "('A: CallExpression' + ('B: CallExpression' / 'C: CallExpression'))": 1,
    "('A: CallExpression' / 'B: CallExpression')": 1,
    "('A: CallExpression' !== '')": 1,
    "(('A: string' === 'B: Identifier') ? 'C: TemplateLiteral' : 'D: TemplateLiteral')": 1,
    "(('A: MemberExpression' === 1) && ('' === 'B: CallExpression'))": 1,
    "((('A: Identifier' && 'B: MemberExpression') && 'C: MemberExpression') && ('D: MemberExpression' === 'E: string'))": 1,
    "((('A: string' + 'B: string') + 'C: string') + 'D: Identifier')": 1,
    "((('A: MemberExpression' === 'B: string') && ('C: UnaryExpression' === 'string')) && ('D: MemberExpression' === ''))": 1,
    "(('A: MemberExpression' !== 'B: string') || !('C: CallExpression'))": 1,
    "(('A: MemberExpression' === 'B: string') && !('C: CallExpression'))": 1,
    "((('A: MemberExpression' !== 'B: string') || ('C: MemberExpression' !== 'D: string')) || ('E: MemberExpression' !== 'F: string'))": 1,
    "((('A: BinaryExpression' || 'B: BinaryExpression') || !('C: CallExpression')) || !('D: MemberExpression'))": 1,
    "((('A: MemberExpression' !== 'B: string') || ('C: MemberExpression' !== 'D: string')) || !('E: CallExpression'))": 1,
    "(('A: MemberExpression' === 'B: string') && ('C: CallExpression' || 'D: CallExpression'))": 1,
    "((('A: Identifier' + 'B: string') + 'C: string') + 'D: string')": 1,
    "(('A: Identifier' !== null) && ('B: Identifier' !== null))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: MemberExpression' === 'D: string')) && (('E: MemberExpression' === 'F: string') || ('G: MemberExpression' === 'H: string')))": 1,
    "(('A: MemberExpression' < 'B: number') || 'C: CallExpression')": 1,
    "('A: Identifier' && (null === 'B: Identifier'))": 1,
    "(('A: Identifier' != null) && ('B: MemberExpression' === true))": 1,
    "!(('A: MemberExpression' && ('B: MemberExpression' === 'C: Identifier')))": 1,
    "((0 === 'A: Identifier') && (0 === 'B: Identifier'))": 1,
    "(('A: MemberExpression' - 'B: MemberExpression') > 1)": 1,
    "((('A: MemberExpression' === 'B: string') || ('C: MemberExpression' === 'D: string')) && ('E: MemberExpression' !== 'F: string'))": 1,
    "(!('A: CallExpression') && 'B: MemberExpression')": 1,
    "(('A: CallExpression' - 'B: MemberExpression') > ('C: number' * ('D: number' * 'E: number')))": 1,
    "(('A: MemberExpression' < 'B: MemberExpression') ? -(1) : 1)": 1,
    "('A: MemberExpression' ? 'B: MemberExpression' : false)": 1,
    "('A: MemberExpression' && (typeof('B: MemberExpression') === 'function'))": 1,
    "(('A: MemberExpression' !== 'B: Identifier') && !('C: CallExpression'))": 1,
    "((('A: TemplateLiteral' + 'B: string') + 'C: TemplateLiteral') + 'D: TemplateLiteral')": 1,
    "(('A: TemplateLiteral' + 'B: string') + 'C: TemplateLiteral')": 1,
    "((('A: Identifier' !== 'B: Identifier') && ('C: Identifier' !== null)) && (typeof('D: MemberExpression') === 'function'))": 1,
    "(('A: Identifier' !== 'B: Identifier') && ('C: Identifier' !== null))": 1,
    "('A: Identifier' ? ('B: Identifier' ? 'C: string' : 'D: string') : ('E: Identifier' ? 'F: string' : 'G: string'))": 1,
    "(('A: Identifier' === 'B: Identifier') && (typeof('C: Identifier') === 'string'))": 1,
    "((('A: BinaryExpression' + 'B: CallExpression') + 'C: CallExpression') + 'D: TemplateLiteral')": 1,
    "((('A: BinaryExpression' + 'B: CallExpression') + 'C: CallExpression') + 'D: CallExpression')": 1,
    "((('A: string' + 'B: CallExpression') + 'C: CallExpression') + 'D: CallExpression')": 1,
    "((('A: TemplateLiteral' + 'B: string') + 'C: string') + 'D: Identifier')": 1,
    "('A: AwaitExpression' || 'B: Identifier')": 1,
    "('A: TaggedTemplateExpression' + 'B: TaggedTemplateExpression')": 1,
    "('A: CallExpression' && 'B: Identifier')": 1,
    "('A: Identifier' ? 'B: TemplateLiteral' : 'C: Identifier')": 1,
    "('A: TemplateLiteral' === 'B: MemberExpression')": 1,
    "(('A: MemberExpression' === null) && ('B: MemberExpression' === null))": 1,
    "(!('A: Identifier') && (('B: string' === 'C: Identifier') || ('D: string' === 'E: Identifier')))": 1,
    "(('A: string' === 'B: Identifier') || ('C: CallExpression' !== -(1)))": 1,
    "(('A: Identifier' || !('B: Identifier')) ? 'C: string' : 'D: string')": 1,
    "(!('A: Identifier') || (typeof('B: MemberExpression') !== 'string'))": 1,
    "((('A: MemberExpression' !== null) && ('B: BinaryExpression' || 'C: BinaryExpression')) && !('D: CallExpression'))": 1,
    "(('A: MemberExpression' !== null) && (('B: UnaryExpression' === 'object') || ('C: UnaryExpression' === 'function')))": 1,
    "((typeof('A: MemberExpression') === 'object') || (typeof('B: MemberExpression') === 'function'))": 1,
    "(!('A: MemberExpression') && (('B: BinaryExpression' || 'C: BinaryExpression') || ('D: Identifier' === 'E: Identifier')))": 1,
    "((('A: Identifier' !== 'B: Identifier') && ('C: Identifier' !== 'D: Identifier')) && ('E: Identifier' !== 'F: Identifier'))": 1,
    "(('A: string' === 'B: Identifier') ? 'C: Identifier' : (('D: Identifier' + 'E: string') + 'F: CallExpression'))": 1,
    "((typeof('A: Identifier') === 'string') ? 'B: CallExpression' : 'C: Identifier')": 1,
    "('A: MemberExpression' ? 'B: CallExpression' : 1)": 1,
    "('A: MemberExpression' ? 'B: CallExpression' : 0)": 1,
    "((typeof('A: Identifier') !== 'string') || (('B: Identifier' !== 'C: Identifier') && ('D: UnaryExpression' !== 'string')))": 1,
    "(('A: Identifier' !== 'B: Identifier') && (typeof('C: Identifier') !== 'string'))": 1,
    "(('A: Identifier' + 'B: string') + ('C: Identifier' || ''))": 1,
    "('A: string' + ('B: Identifier' || ''))": 1,
    "('A: CallExpression' && 'B: string')": 1,
    "('A: MemberExpression' || (('B: MemberExpression' === 'C: string') ? 'D: string' : 'E: string'))": 1,
    "(('A: Identifier' > -(1)) && ('B: Identifier' === ('C: MemberExpression' - 'D: MemberExpression')))": 1,
    "('A: Identifier' === ('B: MemberExpression' - 'C: MemberExpression'))": 1,
    "(('A: MemberExpression' === 'B: Identifier') && 'C: Identifier')": 1,
    "(('A: Identifier' !== '') && 'B: CallExpression')": 1,
    "((('A: LogicalExpression' || 'B: MemberExpression') || 'C: MemberExpression') || null)": 1,
    "((('A: LogicalExpression' || 'B: MemberExpression') || 'C: MemberExpression') || 'D: string')": 1,
    "('A: number' * ('B: Identifier' + 1))": 1,
    "(('A: Identifier' ? 'B: CallExpression' : '') + 'C: string')": 1,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + ('D: MemberExpression' || ''))": 1,
    "((('A: Identifier' + 'B: MemberExpression') + 'C: string') + ('D: MemberExpression' || ''))": 1,
    "(('A: Identifier' + 'B: MemberExpression') + 'C: string')": 1,
    "(('A: CallExpression' + ('B: MemberExpression' || 0)) / 'C: number')": 1,
    "('A: CallExpression' + ('B: MemberExpression' || 0))": 1,
    "((('A: UnaryExpression' || 'B: UnaryExpression') || !('C: MemberExpression')) || !('D: MemberExpression'))": 1,
    "('A: MemberExpression' || (('B: MemberExpression' === 'C: string') ? 'D: number' : 'E: number'))": 1,
    "(('A: MemberExpression' === 'B: string') ? 'C: number' : 'D: number')": 1,
    "(!('A: MemberExpression') && ('B: MemberExpression' || ('C: MemberExpression' === '')))": 1,
    "('A: MemberExpression' || ('B: MemberExpression' === ''))": 1,
    "((('A: MemberExpression' !== null) && ('B: MemberExpression' !== 'C: Identifier')) && ('D: MemberExpression' !== ''))": 1,
    "(('A: MemberExpression' !== null) && ('B: MemberExpression' !== 'C: Identifier'))": 1,
    "('A: MemberExpression' !== '')": 1,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: Identifier' ? 'D: BinaryExpression' : '')) + 'E: string')": 1,
    "((('A: BinaryExpression' + 'B: MemberExpression') + ('C: MemberExpression' ? 'D: BinaryExpression' : '')) + ('E: Identifier' ? ('F: string' + 'G: CallExpression') : ''))": 1,
    "((('A: BinaryExpression' + 'B: string') + 'C: MemberExpression') + ('D: MemberExpression' ? ('E: string' + 'F: MemberExpression') : ''))": 1,
    "('A: Identifier' ? ('B: string' + 'C: CallExpression') : '')": 1,
    "((('A: BinaryExpression' + 'B: MemberExpression') + ('C: MemberExpression' ? 'D: BinaryExpression' : '')) + 'E: string')": 1,
    "((typeof('A: Identifier') === 'undefined') ? 'B: MemberExpression' : 'C: Identifier')": 1,
    "((('A: MemberExpression' || 'B: MemberExpression') || ('C: MemberExpression' && 'D: BinaryExpression')) || 'E: MemberExpression')": 1,
    "(('A: MemberExpression' || 'B: MemberExpression') || ('C: MemberExpression' && ('D: UnaryExpression' !== 'boolean')))": 1,
    "('A: MemberExpression' && (typeof('B: MemberExpression') !== 'boolean'))": 1,
    "(!('A: Identifier') || ('B: CallExpression' === -(1)))": 1,
    "(('A: string' === 'B: Identifier') && (('C: Identifier' !== 'D: string') || ('E: Identifier' !== 'F: Identifier')))": 1,
    "(('A: Identifier' !== 'B: string') || ('C: Identifier' !== 'D: Identifier'))": 1,
    "(!('A: Identifier') && (typeof('B: MemberExpression') === 'boolean'))": 1,
    "(('A: Identifier' ? 'B: string' : 'C: string') + 'D: CallExpression')": 1,
    "(('A: Identifier' ? ('B: Identifier' + 'C: string') : '') + 'D: CallExpression')": 1,
    "('A: Identifier' ? ('B: Identifier' + 'C: string') : '')": 1,
    "((('A: MemberExpression' >= 'B: number') && ('C: MemberExpression' < 'D: number')) && 'E: CallExpression')": 1,
    "((('A: MemberExpression' && 'B: BinaryExpression') && ('C: MemberExpression' !== 'D: number')) && ('E: MemberExpression' !== 'F: number'))": 1,
    "(('A: MemberExpression' && ('B: MemberExpression' !== 'C: string')) && ('D: MemberExpression' !== 'E: number'))": 1,
    "(('A: MemberExpression' !== 'B: number') && ('C: MemberExpression' !== 'D: number'))": 1,
    "!(('A: CallExpression' === -(1)))": 1,
    "('A: MemberExpression' ? 'B: CallExpression' : 'C: ObjectExpression')": 1,
    "(!('A: MemberExpression') && ('B: MemberExpression' !== false))": 1,
    "((0 === 'A: CallExpression') || ('B: CallExpression' !== -(1)))": 1,
    "('A: CallExpression' === ('B: MemberExpression' - 1))": 1,
    "(!(('A: MemberExpression' || 'B: LogicalExpression')) && !('C: MemberExpression'))": 1,
    "!(('A: MemberExpression' || ('B: MemberExpression' && 'C: MemberExpression')))": 1,
    "((('A: MemberExpression' === 'B: string') && ('C: MemberExpression' === 'D: string')) || (('E: MemberExpression' === 'F: string') && ('G: MemberExpression' === 'H: string')))": 1,
    "(('A: Identifier' && 'B: CallExpression') && 'C: CallExpression')": 1,
    "((('A: UnaryExpression' && 'B: MemberExpression') && 'C: MemberExpression') && !('D: CallExpression'))": 1,
    "((!('A: MemberExpression') && 'B: MemberExpression') && 'C: MemberExpression')": 1,
    "(('A: MemberExpression' && !('B: MemberExpression')) ? 'C: MemberExpression' : 'D: MemberExpression')": 1,
    "(('A: string' === 'B: Identifier') ? 'C: Identifier' : 'D: MemberExpression')": 1,
    "(('A: MemberExpression' !== 'B: string') && (typeof('C: MemberExpression') !== 'undefined'))": 1,
    "(!('A: Identifier') && !('B: CallExpression'))": 1,
    "(('A: Identifier' && ('B: MemberExpression' === 'C: string')) || ('D: MemberExpression' === 'E: string'))": 1,
    "((('A: BinaryExpression' && 'B: UnaryExpression') && ('C: MemberExpression' === 0)) && 'D: MemberExpression')": 1,
    "((('A: MemberExpression' === 'B: Identifier') && !('C: Identifier')) && ('D: MemberExpression' === 0))": 1,
    "(('A: MemberExpression' === 'B: Identifier') && !('C: Identifier'))": 1,
    "((('A: MemberExpression' && 'B: MemberExpression') && 'C: MemberExpression') && !('D: CallExpression'))": 1,
    "((typeof('A: MemberExpression') === 'number') && 'B: CallExpression')": 1,
    "((('A: MemberExpression' && 'B: MemberExpression') && ('C: MemberExpression' === 'D: string')) && 'E: MemberExpression')": 1,
    "(('A: MemberExpression' && 'B: MemberExpression') && ('C: MemberExpression' === 'D: string'))": 1,
    "((('A: MemberExpression' === 'B: Identifier') && 'C: MemberExpression') && (!('D: CallExpression') || !('E: MemberExpression')))": 1,
    "(('A: MemberExpression' === 'B: Identifier') && 'C: MemberExpression')": 1,
    "(!('A: CallExpression') || !('B: MemberExpression'))": 1,
    "('A: CallExpression' ? 'B: MemberExpression' : ('C: MemberExpression' + 'D: string'))": 1,
    "(('A: MemberExpression' && 'B: MemberExpression') ? 'C: MemberExpression' : 'D: Identifier')": 1,
    "((('A: BinaryExpression' || 'B: LogicalExpression') || ('C: number' === 'D: Identifier')) || ('E: number' === 'F: Identifier'))": 1,
    "((('A: MemberExpression' === 'B: string') || ('C: BinaryExpression' && 'D: BinaryExpression')) || ('E: number' === 'F: Identifier'))": 1,
    "(('A: MemberExpression' === 'B: string') || (('C: Identifier' >= 'D: number') && ('E: Identifier' < 'F: number')))": 1,
    "((('A: MemberExpression' === 'B: string') && ('C: MemberExpression' > 0)) && ('D: MemberExpression' === 'E: string'))": 1,
    "(('A: MemberExpression' === 'B: string') && ('C: MemberExpression' > 0))": 1,
    "((typeof('A: MemberExpression') === 'undefined') && !('B: MemberExpression'))": 1,
    "(('A: MemberExpression' === null) ? 'B: CallExpression' : '')": 1,
    "(!('A: MemberExpression') || ('B: Identifier' !== 'C: string'))": 1,
    "((typeof('A: Identifier') === 'string') ? 'B: CallExpression' : 'C: CallExpression')": 1,
    "(('A: MemberExpression' === 'B: number') || ('C: MemberExpression' === 'D: string'))": 1,
    "(('A: string' + 'B: MemberExpression') + 'C: Identifier')": 1,
    "(!('A: MemberExpression') && !('B: Identifier'))": 1,
    "('A: MemberExpression' instanceof 'B: MemberExpression')": 1,
    "((typeof('A: MemberExpression') === 'function') ? 'B: CallExpression' : ('C: string' + 'D: MemberExpression'))": 1,
    "((0 === 'A: Identifier') || ('B: number' === 'C: Identifier'))": 1,
    "(+('A: MemberExpression') === 'B: Identifier')": 1,
    "(('A: Identifier' * 'B: Identifier') & 'C: Identifier')": 1,
    "(('A: CallExpression' >= 'B: number') ? 'C: ArrayExpression' : 'D: ArrayExpression')": 1,
    "('A: MemberExpression' ? 'B: MemberExpression' : (('C: MemberExpression' && 'D: MemberExpression') ? 'E: number' : 'F: number'))": 1,
    "(('A: MemberExpression' && 'B: MemberExpression') ? 'C: number' : 'D: number')": 1,
    "(('A: string' === 'B: CallExpression') ? 'C: object' : 'D: object')": 1,
    "(('A: MemberExpression' === 'B: string') || ('C: MemberExpression' === ('D: BinaryExpression' + 'E: string')))": 1,
    "(('A: MemberExpression' !== 'B: string') || ('C: MemberExpression' !== false))": 1,
    "(('A: Identifier' ? 'B: string' : 'C: string') + 'D: string')": 1,
    "('A: Identifier' ? ('' + 'B: MemberExpression') : 'C: Identifier')": 1,
    "((('A: Identifier' % 'B: number') ? 'C: MemberExpression' : 'D: MemberExpression') + 'E: string')": 1,
    "(('A: Identifier' % 'B: number') ? 'C: MemberExpression' : 'D: MemberExpression')": 1,
    "((0 === 'A: Identifier') ? 'B: Identifier' : (('C: Identifier' + 'D: string') + ('E: Identifier' + 1)))": 1,
    "(('A: Identifier' === ('B: Identifier' - 1)) ? 'C: Identifier' : (('D: Identifier' + 'E: string') + ('F: Identifier' + 'G: number')))": 1,
    "('A: Identifier' === ('B: Identifier' - 1))": 1,
    "(('A: Identifier' + 'B: string') + ('C: Identifier' + 'D: number'))": 1,
    "((typeof('A: Identifier') === 'function') && ('B: MemberExpression' === 'C: string'))": 1,
    "(('A: MemberExpression' === 'B: MemberExpression') ? 'C: number' : 1)": 1,
    "('A: Identifier' ? ('B: string' + 'C: MemberExpression') : (('D: MemberExpression' + 'E: string') + 'F: Identifier'))": 1,
    "((typeof('A: Identifier') == 'number') ? -(1) : 'B: number')": 1,
    "('A: MemberExpression' * (('B: MemberExpression' + 'C: MemberExpression') + 'D: number'))": 1,
    "(('A: MemberExpression' + 'B: MemberExpression') + 'C: number')": 1,
    "('A: Identifier' + ('B: MemberExpression' * 'C: Identifier'))": 1,
    "('A: number' === ('B: number' * 'C: Identifier'))": 1,
    "('A: Identifier' + 'B: ThisExpression')": 1,
    "(('A: Identifier' > 1) ? null : true)": 1,
    "('A: CallExpression' ? 'B: CallExpression' : void(0))": 1,
    "('A: string' + ('B: MemberExpression' || 'C: Identifier'))": 1,
    "(('A: string' === 'B: Identifier') || ('C: Identifier' === ('D: string' + 'E: MemberExpression')))": 1,
    "('A: Identifier' === ('B: string' + 'C: MemberExpression'))": 1,
    "(('A: Identifier' < 'B: number') ? 'C: Identifier' : ('D: CallExpression' + 'E: CallExpression'))": 1,
    "(('A: NewExpression' - 'B: Identifier') < 'C: number')": 1,
    "((typeof('A: Identifier') === 'object') ? 'B: CallExpression' : void(0))": 1,
    "(('A: number' * 'B: number') - ('C: number' / 'D: number'))": 1,
    "((typeof('A: Identifier') != 'undefined') && 'B: MemberExpression')": 1,
    "((typeof('A: Identifier') != 'undefined') ? 'B: Identifier' : 'C: Identifier')": 1,
    "(('A: Identifier' - 'B: Identifier') <= 'C: number')": 1,
    "('A: CallExpression' >= 'B: Identifier')": 1,
    "(('A: Identifier' <= 0) && ('B: Identifier' > -('C: number')))": 1,
    "('A: Identifier' > -('B: number'))": 1,
    "(('A: Identifier' && 'B: CallExpression') ? 'C: MemberExpression' : 'D: Identifier')": 1,
    "((('A: UnaryExpression' === \"function\") && ('B: UnaryExpression' === 'C: string')) ? 'D: FunctionExpression' : 'E: FunctionExpression')": 1,
    "((typeof('A: Identifier') === \"function\") && (typeof('B: MemberExpression') === 'C: string'))": 1,
    "(typeof('A: MemberExpression') === 'B: string')": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: Identifier' !== 'D: MemberExpression')) ? 'E: string' : typeof('F: Identifier'))": 1,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: MemberExpression' === 'D: Identifier')) && ('E: Identifier' !== 'F: MemberExpression'))": 1,
    "(('A: Identifier' && ('B: UnaryExpression' === \"function\")) && ('C: MemberExpression' === 'D: Identifier'))": 1,
    "('A: Identifier' && (typeof('B: Identifier') === \"function\"))": 1,
    "((('A: Identifier' && 'B: BinaryExpression') && ('C: UnaryExpression' === \"function\")) && (typeof('D: MemberExpression') === \"function\"))": 1,
    "(('A: Identifier' && ('B: UnaryExpression' !== \"undefined\")) && (typeof('C: MemberExpression') === \"function\"))": 1,
    "(('A: Identifier' === 'B: CallExpression') ? 'C: CallExpression' : 'D: Identifier')": 1,
    "!(('A: Identifier' && ('B: UnaryExpression' !== \"undefined\")))": 1,
    "(((null === 'A: Identifier') && ('B: MemberExpression' === 'C: Identifier')) || ((null === 'D: Identifier') && ('E: MemberExpression' === 'F: Identifier')))": 1,
    "(('A: MemberExpression' !== 'B: Identifier') || ('C: MemberExpression' !== 'D: Identifier'))": 1,
    "(('A: MemberExpression' === 'B: MemberExpression') && ('C: CallExpression' === 'D: CallExpression'))": 1,
    "((('A: LogicalExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' === \"function\")) && ('D: CallExpression' === 'E: CallExpression'))": 1,
    "((('A: BinaryExpression' && 'B: BinaryExpression') && ('C: UnaryExpression' === \"function\")) && (typeof('D: MemberExpression') === \"function\"))": 1,
    "((('A: MemberExpression' !== 'B: Identifier') && ('C: UnaryExpression' !== \"undefined\")) && (typeof('D: MemberExpression') === \"function\"))": 1,
    "(('A: MemberExpression' !== 'B: Identifier') && (typeof('C: MemberExpression') !== \"undefined\"))": 1,
    "(('A: MemberExpression' !== 'B: MemberExpression') && !('C: CallExpression'))": 1,
    "(('A: MemberExpression' === 'B: number') || 'C: CallExpression')": 1,
    "(('A: Identifier' && 'B: MemberExpression') && !('C: MemberExpression'))": 1,
    "(('A: string' === 'B: CallExpression') || (('C: BinaryExpression' && 'D: BinaryExpression') && ('E: MemberExpression' ? 'F: BinaryExpression' : 'G: LogicalExpression')))": 1,
    "((('A: UnaryExpression' === \"number\") && ('B: MemberExpression' !== 'C: Identifier')) && ('D: MemberExpression' ? ('E: CallExpression' === 'F: MemberExpression') : ('G: BinaryExpression' && 'H: BinaryExpression')))": 1,
    "((typeof('A: MemberExpression') === \"number\") && ('B: MemberExpression' !== 'C: Identifier'))": 1,
    "('A: MemberExpression' ? ('B: CallExpression' === 'C: MemberExpression') : ((null === 'D: CallExpression') && ('E: MemberExpression' === 'F: Identifier')))": 1,
    "((null === 'A: CallExpression') && ('B: MemberExpression' === 'C: Identifier'))": 1,
    "(('A: string' + ('B: Identifier' - 'C: MemberExpression')) + 'D: string')": 1,
    "('A: string' + ('B: Identifier' - 'C: MemberExpression'))": 1,
    "((\"string\" === 'A: Identifier') ? 'B: Identifier' : 'C: MemberExpression')": 1,
    "((('A: MemberExpression' !== 'B: Identifier') && ('C: MemberExpression' !== 'D: Identifier')) && ('E: MemberExpression' === 'F: Identifier'))": 1,
    "('A: MemberExpression' + ('B: Identifier' || 0))": 1,
    "((('A: Identifier' + 'B: Identifier') + 'C: string') + 'D: Identifier')": 1,
    "((0 === 'A: Identifier') ? 'B: string' : ('C: string' + 'D: Identifier'))": 1,
    "((('A: MemberExpression' > 0) && ('B: MemberExpression' !== 'C: Identifier')) ? 'D: MemberExpression' : 'E: ObjectExpression')": 1,
    "(('A: MemberExpression' > 0) && ('B: MemberExpression' !== 'C: Identifier'))": 1,
    "(('A: Identifier' !== null) ? 'B: CallExpression' : 'C: Identifier')": 1,
    "((('A: MemberExpression' > 'B: number') && ('C: MemberExpression' !== 'D: Identifier')) ? 'E: MemberExpression' : 'F: ObjectExpression')": 1,
    "(('A: MemberExpression' > 'B: number') && ('C: MemberExpression' !== 'D: Identifier'))": 1,
    "((typeof('A: Identifier') === \"function\") ? 'B: ArrayExpression' : 'C: ArrayExpression')": 1,
    "(('A: Identifier' !== null) && (('object' === 'B: Identifier') || ('function' === 'C: Identifier')))": 1,
    "((('A: UnaryExpression' === 'undefined') && ('B: UnaryExpression' !== 'undefined')) && ('C: string' === 'D: CallExpression'))": 1,
    "((typeof('A: Identifier') === 'undefined') && (typeof('B: Identifier') !== 'undefined'))": 1,
    "((('A: UnaryExpression' !== 'undefined') && ('B: UnaryExpression' !== 'undefined')) && (typeof('C: Identifier') !== 'undefined'))": 1,
    "(('A: Identifier' === 'B: Identifier') && (typeof('C: Identifier') === 'function'))": 1,
    "(('A: Identifier' && ('object' === 'B: ConditionalExpression')) && ('C: MemberExpression' === 'D: Identifier'))": 1,
    "('A: Identifier' && ('object' === ('B: BinaryExpression' ? 'undefined' : 'C: CallExpression')))": 1,
    "('object' === (('A: UnaryExpression' === 'undefined') ? 'undefined' : 'B: CallExpression'))": 1,
    "((('A: MemberExpression' === 'B: MemberExpression') && ('C: Identifier' === 'D: Identifier')) && ('E: MemberExpression' === 'F: Identifier'))": 1,
    "(('A: MemberExpression' === 'B: MemberExpression') && ('C: Identifier' === 'D: Identifier'))": 1,
    "(('A: MemberExpression' === 'B: Identifier') && ('C: Identifier' < 'D: MemberExpression'))": 1,
    "(('A: Identifier' === 'B: Identifier') && ('C: MemberExpression' !== 'D: Identifier'))": 1,
    "((typeof('A: Identifier') !== 'function') && 'B: CallExpression')": 1,
    "(('A: ThisExpression' instanceof 'B: Identifier') ? 'C: CallExpression' : 'D: CallExpression')": 1,
    "('A: CallExpression' || \"\")": 1,
    "(('A: Identifier' === 'B: Identifier') ? 'C: number' : 'D: Identifier')": 1,
    "((!('A: MemberExpression') || ('B: MemberExpression' <= 0)) || ('C: Identifier' < 'D: MemberExpression'))": 1,
    "(!('A: MemberExpression') || ('B: MemberExpression' <= 0))": 1,
    "((!('A: MemberExpression') && !('B: MemberExpression')) && ('C: MemberExpression' === 0))": 1,
    "('A: CallExpression' * (('B: MemberExpression' - 'C: Identifier') + 1))": 1,
    "(('A: MemberExpression' - 'B: Identifier') + 1)": 1,
    "('A: CallExpression' || -(1))": 1,
    "('A: Identifier' >>> 'B: number')": 1,
    "((('A: string' + 'B: BinaryExpression') + 'C: string') + 'D: MemberExpression')": 1,
    "(('A: string' + ('B: MemberExpression' + 1)) + 'C: string')": 1,
    "('A: string' + ('B: MemberExpression' + 1))": 1,
    "(('A: MemberExpression' === 0) && ('B: MemberExpression' !== 0))": 1,
    "((('A: string' === 'B: Identifier') && ('C: MemberExpression' !== 'D: BinaryExpression')) && (('E: MemberExpression' > 0) || ('F: CallExpression' > 'G: number')))": 1,
    "(('A: string' === 'B: Identifier') && ('C: MemberExpression' !== ('D: CallExpression' - 1)))": 1,
    "('A: MemberExpression' !== ('B: CallExpression' - 1))": 1,
    "(('A: MemberExpression' > 0) || ('B: CallExpression' > 'C: number'))": 1,
    "('A: string' + ('B: string' + 'C: Identifier'))": 1,
    "('A: MemberExpression' && ('B: MemberExpression' === null))": 1,
    "(('A: MemberExpression' !== null) && ('B: MemberExpression' !== 'C: MemberExpression'))": 1,
    "(('A: MemberExpression' === null) && !('B: MemberExpression'))": 1,
    "('A: Identifier' ? 0 : 'B: MemberExpression')": 1,
    "('A: Identifier' && ('B: MemberExpression' === 'C: CallExpression'))": 1,
    "('A: MemberExpression' && +('B: CallExpression'))": 1,
    "('A: MemberExpression' && !(!('B: Identifier')))": 1,
    "('A: ThisExpression' !== 'B: MemberExpression')": 1,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + (('D: Identifier' && 'E: MemberExpression') || 'F: Identifier'))": 1,
    "((('A: string' + 'B: ConditionalExpression') + 'C: string') + 'D: MemberExpression')": 1,
    "(('A: string' + ('B: UnaryExpression' ? 'C: string' : 'D: CallExpression')) + 'E: string')": 1,
    "('A: string' + (!('B: Identifier') ? 'C: string' : 'D: CallExpression'))": 1,
    "(!('A: Identifier') ? 'B: string' : 'C: CallExpression')": 1,
    "((typeof('A: Identifier') === \"number\") && ('B: Identifier' > 0))": 1,
    "(typeof('A: Identifier') !== \"number\")": 1,
    "((\"undefined\" === 'A: CallExpression') || (\"\" === 'B: Identifier'))": 1,
    "(('A: ThisExpression' instanceof 'B: Identifier') ? 'C: ThisExpression' : 'D: MemberExpression')": 1,
    "((('A: Identifier' instanceof 'B: Identifier') && 'C: MemberExpression') || 'D: MemberExpression')": 1,
    "(('A: Identifier' instanceof 'B: Identifier') && 'C: MemberExpression')": 1,
    "('A: Identifier' ? 'B: string' : ('C: string' + 'D: CallExpression'))": 1,
    "(!('A: Identifier') ? 'B: string' : ('C: string' + 'D: CallExpression'))": 1,
    "((\"function\" === 'A: Identifier') && (true === 'B: CallExpression'))": 1,
    "((('A: UnaryExpression' !== \"undefined\") && 'B: Identifier') && 'C: MemberExpression')": 1,
    "(('A: Identifier' && 'B: MemberExpression') && ('C: Identifier' instanceof 'D: MemberExpression'))": 1,
    "!(('A: MemberExpression' && ('B: MemberExpression' !== 'C: string')))": 1,
    "('A: Identifier' || ('B: Identifier' > 1))": 1,
    "(('A: Identifier' || 0) + 'B: number')": 1,
    "(('A: MemberExpression' === \"\") && ('B: MemberExpression' === 0))": 1,
    "((typeof('A: Identifier') === \"undefined\") || (typeof('B: Identifier') === \"undefined\"))": 1,
    "(('A: MemberExpression' === 1) || 'B: CallExpression')": 1,
    "((typeof('A: Identifier') === \"undefined\") || !('B: MemberExpression'))": 1,
    "(('A: MemberExpression' ? 'B: string' : \"\") + 'C: Identifier')": 1,
    "('A: Identifier' || (('B: UnaryExpression' === \"undefined\") && !('C: CallExpression')))": 1,
    "((typeof('A: Identifier') === \"undefined\") && !('B: CallExpression'))": 1,
    "((typeof('A: MemberExpression') === \"function\") ? 'B: CallExpression' : 'C: CallExpression')": 1,
    "(!('A: MemberExpression') || (typeof('B: MemberExpression') === \"string\"))": 1,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: MemberExpression' ? 'D: string' : \"\")) + 'E: string')": 1,
    "((('A: BinaryExpression' + 'B: string') + ('C: MemberExpression' ? 'D: BinaryExpression' : \"\")) + ('E: MemberExpression' ? 'F: string' : \"\"))": 1,
    "((('A: BinaryExpression' + 'B: Identifier') + 'C: string') + ('D: MemberExpression' ? ('E: BinaryExpression' + 'F: string') : \"\"))": 1,
    "('A: MemberExpression' ? (('B: string' + 'C: CallExpression') + 'D: string') : \"\")": 1,
    "((('A: string' + 'B: Identifier') + 'C: string') + (('D: MemberExpression' === 'E: MemberExpression') ? ('F: AssignmentExpression' && 'G: string') : \"\"))": 1,
    "(('A: MemberExpression' === 'B: MemberExpression') ? ('C: AssignmentExpression' && 'D: string') : \"\")": 1,
    "((('A: string' + 'B: CallExpression') + 'C: string') + (('D: MemberExpression' === 'E: Identifier') ? ('F: AssignmentExpression' && 'G: string') : \"\"))": 1,
    "(('A: MemberExpression' === 'B: Identifier') ? ('C: AssignmentExpression' && 'D: string') : \"\")": 1,
    "('A: MemberExpression' ? ('B: MemberExpression' || true) : 'C: Identifier')": 1,
    "('A: MemberExpression' || true)": 1,
    "(('A: MemberExpression' === 'B: string') && ('C: string' in 'D: MemberExpression'))": 1,
    "('A: Identifier' && ('B: CallExpression' > -(1)))": 1,
    "('A: AssignmentExpression' != null)": 1,
    "('A: CallExpression' && ('B: MemberExpression' !== 'C: Identifier'))": 1,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: MemberExpression') + 'D: CallExpression')": 1,
    "((\"\" === 'A: Identifier') ? 'B: Identifier' : 'C: Identifier')": 1,
    "(('A: MemberExpression' === 0) ? 'B: Identifier' : 'C: Identifier')": 1,
    "('A: MemberExpression' !== \"\")": 1,
    "((('A: BinaryExpression' + 'B: string') + ('C: Identifier' ? 'D: string' : \"\")) + 'E: string')": 1,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + ('D: Identifier' ? 'E: string' : \"\"))": 1,
    "((('A: BinaryExpression' + 'B: string') + 'C: string') + 'D: MemberExpression')": 1,
    "((('A: string' + 'B: ConditionalExpression') + 'C: string') + 'D: string')": 1,
    "(('A: string' + ('B: Identifier' ? 'C: string' : \"\")) + 'D: string')": 1,
    "('A: string' + ('B: Identifier' ? 'C: string' : \"\"))": 1,
    "(('A: MemberExpression' === 'B: number') || !('C: Identifier'))": 1,
    "(!('A: Identifier') || ('B: CallExpression' > -(1)))": 1,
    "(('A: Identifier' === 'B: Identifier') && 'C: MemberExpression')": 1,
    "('A: Identifier' || ('B: MemberExpression' !== 'C: MemberExpression'))": 1,
    "('A: string' + ('B: CallExpression' || 'C: MemberExpression'))": 1,
    "(!('A: Identifier') || ('B: MemberExpression' <= 0))": 1,
    "(('A: MemberExpression' === \"\") || ('B: MemberExpression' === 'C: string'))": 1,
    "('A: Identifier' && (!('B: Identifier') || ('C: MemberExpression' === false)))": 1,
    "(!('A: Identifier') || ('B: MemberExpression' === false))": 1,
    "('A: CallExpression' || ('B: MemberExpression' ? 'C: string' : 'D: string'))": 1,
    "((typeof('A: MemberExpression') === \"number\") && (typeof('B: MemberExpression') === \"number\"))": 1,
    "((('A: Identifier' > 0) ? 'B: string' : \"\") + 'C: Identifier')": 1,
    "((typeof('A: MemberExpression') !== \"boolean\") && (typeof('B: MemberExpression') !== \"boolean\"))": 1,
    "('A: MemberExpression' !== ('B: MemberExpression' + 'C: MemberExpression'))": 1,
    "((('A: BinaryExpression' + 'B: MemberExpression') + 'C: string') + 'D: string')": 1,
    "('A: Identifier' ? (('B: BinaryExpression' + 'C: Identifier') + 'D: string') : \"\")": 1,
    "((('A: string' + 'B: Identifier') + 'C: MemberExpression') + 'D: string')": 1,
    "(('A: string' + 'B: Identifier') + 'C: MemberExpression')": 1,
    "('A: MemberExpression' && ('B: string' === 'C: Identifier'))": 1,
    "!((('A: Identifier' && 'B: MemberExpression') && ('C: MemberExpression' > 0)))": 1,
    "(('A: Identifier' && 'B: MemberExpression') && ('C: MemberExpression' > 0))": 1,
    "(('A: Identifier' > 'B: number') ? ('C: Identifier' - 'D: number') : 0)": 1,
    "((null === 'A: Identifier') || (null === 'B: Identifier'))": 1,
    "(('A: MemberExpression' < 'B: number') && ('C: Identifier' || 'D: Identifier'))": 1,
    "('A: Identifier' && (('B: LogicalExpression' && 'C: Identifier') || ('D: BinaryExpression' && 'E: BinaryExpression')))": 1,
    "((('A: LogicalExpression' && 'B: Identifier') && 'C: Identifier') || (('D: MemberExpression' < 'E: number') && ('F: number' === 'G: BinaryExpression')))": 1,
    "((('A: Identifier' && 'B: Identifier') && 'C: Identifier') && 'D: Identifier')": 1,
    "(('A: MemberExpression' < 'B: number') && ('C: number' === ('D: BinaryExpression' + 'E: Identifier')))": 1,
    "('A: number' === (('B: BinaryExpression' + 'C: Identifier') + 'D: Identifier'))": 1,
    "(('A: Identifier' && ('B: MemberExpression' > 'C: number')) && ('D: MemberExpression' > 'E: number'))": 1,
    "(('A: MemberExpression' < 'B: number') || (('C: MemberExpression' * 'D: number') < 'E: MemberExpression'))": 1,
    "(('A: MemberExpression' * 'B: number') < 'C: MemberExpression')": 1,
    "('A: AssignmentExpression' !== -(1))": 1,
    "('A: MemberExpression' < ('B: Identifier' + 'C: Identifier'))": 1,
    "(('A: MemberExpression' * 'B: number') >= 'C: MemberExpression')": 1,
    "(('A: Identifier' >= 1) && ('B: Identifier' >= 1))": 1,
    "(('A: Identifier' && ('B: MemberExpression' <= 'C: CallExpression')) && ('D: MemberExpression' <= 'E: CallExpression'))": 1,
    "('A: Identifier' && ('B: MemberExpression' <= 'C: CallExpression'))": 1,
    "((0 === 'A: Identifier') || ('B: CallExpression' === 'C: CallExpression'))": 1,
    "('A: MemberExpression' ? 'B: CallExpression' : ('C: MemberExpression' !== 'D: Identifier'))": 1,
    "(('A: Identifier' + 'B: Identifier') > 1)": 1,
    "(('A: Identifier' !== 0) && ('B: Identifier' !== 0))": 1,
    "((('A: BinaryExpression' - 'B: Identifier') > 0) && ('C: MemberExpression' === 'D: Identifier'))": 1,
    "((('A: Identifier' - 'B: Identifier') - 'C: Identifier') > 0)": 1,
    "((('A: BinaryExpression' + 'B: ConditionalExpression') + ('C: Identifier' ? 1 : 0)) + 1)": 1,
    "((('A: BinaryExpression' - 'B: Identifier') + ('C: Identifier' ? 1 : 0)) + ('D: Identifier' ? 1 : 0))": 1,
    "((('A: Identifier' - 'B: Identifier') - 'C: Identifier') + ('D: Identifier' ? 1 : 0))": 1,
    "(('A: Identifier' !== 0) && ('B: MemberExpression' === 'C: Identifier'))": 1,
    "(('A: Identifier' || 'B: MemberExpression') || 'C: Identifier')": 1,
    "('A: MemberExpression' ? 'B: ArrayExpression' : 'C: CallExpression')": 1,
    "(('A: MemberExpression' === 'B: string') || 'C: CallExpression')": 1,
    "(('A: MemberExpression' && ('B: MemberExpression' != null)) && !('C: Identifier'))": 1,
    "('A: MemberExpression' && ('B: MemberExpression' != null))": 1,
    "((('A: BinaryExpression' && 'B: MemberExpression') || 'C: MemberExpression') ? 'D: ArrayExpression' : 'E: ArrayExpression')": 1,
    "((('A: string' === 'B: Identifier') && 'C: MemberExpression') || 'D: MemberExpression')": 1,
    "((('A: Identifier' || 'B: Identifier') || 'C: Identifier') && !('D: MemberExpression'))": 1,
    "('A: Identifier' ? 'B: TemplateLiteral' : !('C: Identifier'))": 1,
    "('A: Identifier' ? 'B: TemplateLiteral' : true)": 1,
    "('A: Identifier' ? 'B: TemplateLiteral' : false)": 1,
    "(('A: Identifier' && 'B: Identifier') ? 'C: ObjectExpression' : 'D: ObjectExpression')": 1,
    "('A: Identifier' in 'B: MemberExpression')": 1,
    "(('A: TemplateLiteral' === 'B: Identifier') ? 'C: Identifier' : 'D: TemplateLiteral')": 1,
    "('A: TemplateLiteral' === 'B: Identifier')": 1,
    "('A: MemberExpression' || !('B: Identifier'))": 1,
    "(!('A: Identifier') && ('B: MemberExpression' || 'C: MemberExpression'))": 1,
    "(('A: Identifier' || !('B: MemberExpression')) && 'C: MemberExpression')": 1,
    "('A: Identifier' || !('B: MemberExpression'))": 1,
    "(('A: MemberExpression' && 'B: MemberExpression') || ('C: Identifier' ? 'D: string' : 'E: string'))": 1,
    "('A: Identifier' || ('B: Identifier' && !('C: CallExpression')))": 1,
    "('A: CallExpression' ? 'B: string' : (('C: string' === 'D: Identifier') ? 'E: string' : 'F: string'))": 1,
    "(('A: string' === 'B: Identifier') ? 'C: TemplateLiteral' : 'D: Identifier')": 1,
    "((('A: string' === 'B: Identifier') || 'C: ChainExpression') ? 'D: ArrayExpression' : 'E: Identifier')": 1,
    "(('A: string' === 'B: Identifier') || 'C: ChainExpression')": 1,
    "(('A: Identifier' !== 'B: string') && !('C: ChainExpression'))": 1,
    "!('A: ChainExpression')": 1,
    "('A: MemberExpression' || ('B: CallExpression' && 'C: MemberExpression'))": 1,
    "(('A: string' === 'B: Identifier') || ('C: CallExpression' && 'D: CallExpression'))": 1,
    "((('A: BinaryExpression' + 'B: TemplateLiteral') + 'C: TemplateLiteral') + 'D: CallExpression')": 1,
    "((('A: TemplateLiteral' + 'B: CallExpression') + 'C: TemplateLiteral') + 'D: TemplateLiteral')": 1,
    "(('A: TemplateLiteral' + 'B: CallExpression') + 'C: TemplateLiteral')": 1
}